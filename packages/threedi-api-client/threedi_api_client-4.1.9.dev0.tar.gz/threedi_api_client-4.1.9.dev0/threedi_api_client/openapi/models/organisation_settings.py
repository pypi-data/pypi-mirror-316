# coding: utf-8

"""
    3Di API

    3Di simulation API (latest stable version: v3)   Framework release: 3.4.24   3Di core release: 3.5.4.1  deployed on:  08:40AM (UTC) on December 20, 2024  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: info@nelen-schuurmans.nl
    Generated by: https://openapi-generator.tech
"""


import logging
import pprint
import re  # noqa: F401

import six

from threedi_api_client.openapi.configuration import Configuration

logger = logging.getLogger(__name__)

class OrganisationSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'id': 'int',
        'organisation': 'str',
        'organisation_name': 'str',
        'historical_rain_radar_uuids': 'list[str]',
        'forecast_rain_radar_uuids': 'list[str]'
    }

    required_fields = [
       'organisation',
    ]

    attribute_map = {
        'url': 'url',
        'id': 'id',
        'organisation': 'organisation',
        'organisation_name': 'organisation_name',
        'historical_rain_radar_uuids': 'historical_rain_radar_uuids',
        'forecast_rain_radar_uuids': 'forecast_rain_radar_uuids'
    }

    def __init__(self, url=None, id=None, organisation=None, organisation_name=None, historical_rain_radar_uuids=None, forecast_rain_radar_uuids=None, local_vars_configuration=None, fetched_from_api=False):  # noqa: E501
        """OrganisationSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        # True if data is coming from API
        self._fetched_from_api = fetched_from_api

        self._url = None
        self._id = None
        self._organisation = None
        self._organisation_name = None
        self._historical_rain_radar_uuids = None
        self._forecast_rain_radar_uuids = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if id is not None:
            self.id = id
        self.organisation = organisation
        if organisation_name is not None:
            self.organisation_name = organisation_name
        if historical_rain_radar_uuids is not None:
            self.historical_rain_radar_uuids = historical_rain_radar_uuids
        if forecast_rain_radar_uuids is not None:
            self.forecast_rain_radar_uuids = forecast_rain_radar_uuids

    @property
    def url(self):
        """Gets the url of this OrganisationSettings.  # noqa: E501


        :return: The url of this OrganisationSettings.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrganisationSettings.


        :param url: The url of this OrganisationSettings.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def id(self):
        """Gets the id of this OrganisationSettings.  # noqa: E501


        :return: The id of this OrganisationSettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganisationSettings.


        :param id: The id of this OrganisationSettings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def organisation(self):
        """Gets the organisation of this OrganisationSettings.  # noqa: E501

        The unique_id of an organisation  # noqa: E501

        :return: The organisation of this OrganisationSettings.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this OrganisationSettings.

        The unique_id of an organisation  # noqa: E501

        :param organisation: The organisation of this OrganisationSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and organisation is None:  # noqa: E501
            self.__handle_validation_error("Invalid value for `organisation`, must not be `None`")  # noqa: E501

        self._organisation = organisation

    @property
    def organisation_name(self):
        """Gets the organisation_name of this OrganisationSettings.  # noqa: E501


        :return: The organisation_name of this OrganisationSettings.  # noqa: E501
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this OrganisationSettings.


        :param organisation_name: The organisation_name of this OrganisationSettings.  # noqa: E501
        :type: str
        """

        self._organisation_name = organisation_name

    @property
    def historical_rain_radar_uuids(self):
        """Gets the historical_rain_radar_uuids of this OrganisationSettings.  # noqa: E501

        List of historical rain radar UUIDs  # noqa: E501

        :return: The historical_rain_radar_uuids of this OrganisationSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._historical_rain_radar_uuids

    @historical_rain_radar_uuids.setter
    def historical_rain_radar_uuids(self, historical_rain_radar_uuids):
        """Sets the historical_rain_radar_uuids of this OrganisationSettings.

        List of historical rain radar UUIDs  # noqa: E501

        :param historical_rain_radar_uuids: The historical_rain_radar_uuids of this OrganisationSettings.  # noqa: E501
        :type: list[str]
        """

        self._historical_rain_radar_uuids = historical_rain_radar_uuids

    @property
    def forecast_rain_radar_uuids(self):
        """Gets the forecast_rain_radar_uuids of this OrganisationSettings.  # noqa: E501

        List of forecast rain radar UUIDs  # noqa: E501

        :return: The forecast_rain_radar_uuids of this OrganisationSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._forecast_rain_radar_uuids

    @forecast_rain_radar_uuids.setter
    def forecast_rain_radar_uuids(self, forecast_rain_radar_uuids):
        """Sets the forecast_rain_radar_uuids of this OrganisationSettings.

        List of forecast rain radar UUIDs  # noqa: E501

        :param forecast_rain_radar_uuids: The forecast_rain_radar_uuids of this OrganisationSettings.  # noqa: E501
        :type: list[str]
        """

        self._forecast_rain_radar_uuids = forecast_rain_radar_uuids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def __handle_validation_error(self, message):
        # Only raise ValueError when not fetched from API
        from threedi_api_client import __version__ as VERSION

        if not self._fetched_from_api:
            raise ValueError(message + f" It is possible that the current threedi-api-client version ({VERSION}) is out of date: consult https://pypi.org/project/threedi-api-client/ and consider upgrading.")  # noqa: E501
        logger.warning(message + " Please update to the latest threedi-api-client version.")  # noqa: E501

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganisationSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganisationSettings):
            return True

        return self.to_dict() != other.to_dict()
