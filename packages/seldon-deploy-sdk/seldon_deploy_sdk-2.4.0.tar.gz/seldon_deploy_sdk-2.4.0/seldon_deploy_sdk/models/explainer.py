# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Explainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'dict(str, str)',
        'container_spec': 'Container',
        'endpoint': 'Endpoint',
        'env_secret_ref_name': 'str',
        'init_parameters': 'str',
        'model_uri': 'str',
        'replicas': 'int',
        'service_account_name': 'str',
        'storage_initializer_image': 'str',
        'type': 'AlibiExplainerType'
    }

    attribute_map = {
        'config': 'config',
        'container_spec': 'containerSpec',
        'endpoint': 'endpoint',
        'env_secret_ref_name': 'envSecretRefName',
        'init_parameters': 'initParameters',
        'model_uri': 'modelUri',
        'replicas': 'replicas',
        'service_account_name': 'serviceAccountName',
        'storage_initializer_image': 'storageInitializerImage',
        'type': 'type'
    }

    def __init__(self, config=None, container_spec=None, endpoint=None, env_secret_ref_name=None, init_parameters=None, model_uri=None, replicas=None, service_account_name=None, storage_initializer_image=None, type=None):  # noqa: E501
        """Explainer - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._container_spec = None
        self._endpoint = None
        self._env_secret_ref_name = None
        self._init_parameters = None
        self._model_uri = None
        self._replicas = None
        self._service_account_name = None
        self._storage_initializer_image = None
        self._type = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if container_spec is not None:
            self.container_spec = container_spec
        if endpoint is not None:
            self.endpoint = endpoint
        if env_secret_ref_name is not None:
            self.env_secret_ref_name = env_secret_ref_name
        if init_parameters is not None:
            self.init_parameters = init_parameters
        if model_uri is not None:
            self.model_uri = model_uri
        if replicas is not None:
            self.replicas = replicas
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if storage_initializer_image is not None:
            self.storage_initializer_image = storage_initializer_image
        if type is not None:
            self.type = type

    @property
    def config(self):
        """Gets the config of this Explainer.  # noqa: E501


        :return: The config of this Explainer.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Explainer.


        :param config: The config of this Explainer.  # noqa: E501
        :type: dict(str, str)
        """

        self._config = config

    @property
    def container_spec(self):
        """Gets the container_spec of this Explainer.  # noqa: E501


        :return: The container_spec of this Explainer.  # noqa: E501
        :rtype: Container
        """
        return self._container_spec

    @container_spec.setter
    def container_spec(self, container_spec):
        """Sets the container_spec of this Explainer.


        :param container_spec: The container_spec of this Explainer.  # noqa: E501
        :type: Container
        """

        self._container_spec = container_spec

    @property
    def endpoint(self):
        """Gets the endpoint of this Explainer.  # noqa: E501


        :return: The endpoint of this Explainer.  # noqa: E501
        :rtype: Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Explainer.


        :param endpoint: The endpoint of this Explainer.  # noqa: E501
        :type: Endpoint
        """

        self._endpoint = endpoint

    @property
    def env_secret_ref_name(self):
        """Gets the env_secret_ref_name of this Explainer.  # noqa: E501


        :return: The env_secret_ref_name of this Explainer.  # noqa: E501
        :rtype: str
        """
        return self._env_secret_ref_name

    @env_secret_ref_name.setter
    def env_secret_ref_name(self, env_secret_ref_name):
        """Sets the env_secret_ref_name of this Explainer.


        :param env_secret_ref_name: The env_secret_ref_name of this Explainer.  # noqa: E501
        :type: str
        """

        self._env_secret_ref_name = env_secret_ref_name

    @property
    def init_parameters(self):
        """Gets the init_parameters of this Explainer.  # noqa: E501


        :return: The init_parameters of this Explainer.  # noqa: E501
        :rtype: str
        """
        return self._init_parameters

    @init_parameters.setter
    def init_parameters(self, init_parameters):
        """Sets the init_parameters of this Explainer.


        :param init_parameters: The init_parameters of this Explainer.  # noqa: E501
        :type: str
        """

        self._init_parameters = init_parameters

    @property
    def model_uri(self):
        """Gets the model_uri of this Explainer.  # noqa: E501


        :return: The model_uri of this Explainer.  # noqa: E501
        :rtype: str
        """
        return self._model_uri

    @model_uri.setter
    def model_uri(self, model_uri):
        """Sets the model_uri of this Explainer.


        :param model_uri: The model_uri of this Explainer.  # noqa: E501
        :type: str
        """

        self._model_uri = model_uri

    @property
    def replicas(self):
        """Gets the replicas of this Explainer.  # noqa: E501


        :return: The replicas of this Explainer.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this Explainer.


        :param replicas: The replicas of this Explainer.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def service_account_name(self):
        """Gets the service_account_name of this Explainer.  # noqa: E501


        :return: The service_account_name of this Explainer.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this Explainer.


        :param service_account_name: The service_account_name of this Explainer.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def storage_initializer_image(self):
        """Gets the storage_initializer_image of this Explainer.  # noqa: E501


        :return: The storage_initializer_image of this Explainer.  # noqa: E501
        :rtype: str
        """
        return self._storage_initializer_image

    @storage_initializer_image.setter
    def storage_initializer_image(self, storage_initializer_image):
        """Sets the storage_initializer_image of this Explainer.


        :param storage_initializer_image: The storage_initializer_image of this Explainer.  # noqa: E501
        :type: str
        """

        self._storage_initializer_image = storage_initializer_image

    @property
    def type(self):
        """Gets the type of this Explainer.  # noqa: E501


        :return: The type of this Explainer.  # noqa: E501
        :rtype: AlibiExplainerType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Explainer.


        :param type: The type of this Explainer.  # noqa: E501
        :type: AlibiExplainerType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Explainer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Explainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
