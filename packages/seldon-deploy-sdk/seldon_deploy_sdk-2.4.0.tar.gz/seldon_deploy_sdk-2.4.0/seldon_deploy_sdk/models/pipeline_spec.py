# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PipelineSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'output': 'PipelineOutput',
        'steps': 'list[PipelineStep]'
    }

    attribute_map = {
        'output': 'output',
        'steps': 'steps'
    }

    def __init__(self, output=None, steps=None):  # noqa: E501
        """PipelineSpec - a model defined in Swagger"""  # noqa: E501

        self._output = None
        self._steps = None
        self.discriminator = None

        if output is not None:
            self.output = output
        if steps is not None:
            self.steps = steps

    @property
    def output(self):
        """Gets the output of this PipelineSpec.  # noqa: E501


        :return: The output of this PipelineSpec.  # noqa: E501
        :rtype: PipelineOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this PipelineSpec.


        :param output: The output of this PipelineSpec.  # noqa: E501
        :type: PipelineOutput
        """

        self._output = output

    @property
    def steps(self):
        """Gets the steps of this PipelineSpec.  # noqa: E501

        The steps of this inference graph pipeline  # noqa: E501

        :return: The steps of this PipelineSpec.  # noqa: E501
        :rtype: list[PipelineStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this PipelineSpec.

        The steps of this inference graph pipeline  # noqa: E501

        :param steps: The steps of this PipelineSpec.  # noqa: E501
        :type: list[PipelineStep]
        """

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
