# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationLogsParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_id': 'str',
        'container_name': 'str',
        'deployment_namespace': 'str',
        '_from': 'int',
        'pod_name': 'str',
        'size': 'int'
    }

    attribute_map = {
        'container_id': 'container_id',
        'container_name': 'container_name',
        'deployment_namespace': 'deployment_namespace',
        '_from': 'from',
        'pod_name': 'pod_name',
        'size': 'size'
    }

    def __init__(self, container_id=None, container_name=None, deployment_namespace=None, _from=None, pod_name=None, size=None):  # noqa: E501
        """ApplicationLogsParams - a model defined in Swagger"""  # noqa: E501

        self._container_id = None
        self._container_name = None
        self._deployment_namespace = None
        self.__from = None
        self._pod_name = None
        self._size = None
        self.discriminator = None

        if container_id is not None:
            self.container_id = container_id
        if container_name is not None:
            self.container_name = container_name
        if deployment_namespace is not None:
            self.deployment_namespace = deployment_namespace
        if _from is not None:
            self._from = _from
        if pod_name is not None:
            self.pod_name = pod_name
        if size is not None:
            self.size = size

    @property
    def container_id(self):
        """Gets the container_id of this ApplicationLogsParams.  # noqa: E501


        :return: The container_id of this ApplicationLogsParams.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ApplicationLogsParams.


        :param container_id: The container_id of this ApplicationLogsParams.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def container_name(self):
        """Gets the container_name of this ApplicationLogsParams.  # noqa: E501


        :return: The container_name of this ApplicationLogsParams.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this ApplicationLogsParams.


        :param container_name: The container_name of this ApplicationLogsParams.  # noqa: E501
        :type: str
        """

        self._container_name = container_name

    @property
    def deployment_namespace(self):
        """Gets the deployment_namespace of this ApplicationLogsParams.  # noqa: E501


        :return: The deployment_namespace of this ApplicationLogsParams.  # noqa: E501
        :rtype: str
        """
        return self._deployment_namespace

    @deployment_namespace.setter
    def deployment_namespace(self, deployment_namespace):
        """Sets the deployment_namespace of this ApplicationLogsParams.


        :param deployment_namespace: The deployment_namespace of this ApplicationLogsParams.  # noqa: E501
        :type: str
        """

        self._deployment_namespace = deployment_namespace

    @property
    def _from(self):
        """Gets the _from of this ApplicationLogsParams.  # noqa: E501


        :return: The _from of this ApplicationLogsParams.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ApplicationLogsParams.


        :param _from: The _from of this ApplicationLogsParams.  # noqa: E501
        :type: int
        """

        self.__from = _from

    @property
    def pod_name(self):
        """Gets the pod_name of this ApplicationLogsParams.  # noqa: E501


        :return: The pod_name of this ApplicationLogsParams.  # noqa: E501
        :rtype: str
        """
        return self._pod_name

    @pod_name.setter
    def pod_name(self, pod_name):
        """Sets the pod_name of this ApplicationLogsParams.


        :param pod_name: The pod_name of this ApplicationLogsParams.  # noqa: E501
        :type: str
        """

        self._pod_name = pod_name

    @property
    def size(self):
        """Gets the size of this ApplicationLogsParams.  # noqa: E501


        :return: The size of this ApplicationLogsParams.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ApplicationLogsParams.


        :param size: The size of this ApplicationLogsParams.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationLogsParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationLogsParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
