# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PipelineOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'join_window_ms': 'int',
        'steps': 'list[str]',
        'steps_join': 'JoinType',
        'tensor_map': 'dict(str, str)'
    }

    attribute_map = {
        'join_window_ms': 'joinWindowMs',
        'steps': 'steps',
        'steps_join': 'stepsJoin',
        'tensor_map': 'tensorMap'
    }

    def __init__(self, join_window_ms=None, steps=None, steps_join=None, tensor_map=None):  # noqa: E501
        """PipelineOutput - a model defined in Swagger"""  # noqa: E501

        self._join_window_ms = None
        self._steps = None
        self._steps_join = None
        self._tensor_map = None
        self.discriminator = None

        if join_window_ms is not None:
            self.join_window_ms = join_window_ms
        if steps is not None:
            self.steps = steps
        if steps_join is not None:
            self.steps_join = steps_join
        if tensor_map is not None:
            self.tensor_map = tensor_map

    @property
    def join_window_ms(self):
        """Gets the join_window_ms of this PipelineOutput.  # noqa: E501

        msecs to wait for messages from multiple inputs to arrive before joining the inputs  # noqa: E501

        :return: The join_window_ms of this PipelineOutput.  # noqa: E501
        :rtype: int
        """
        return self._join_window_ms

    @join_window_ms.setter
    def join_window_ms(self, join_window_ms):
        """Sets the join_window_ms of this PipelineOutput.

        msecs to wait for messages from multiple inputs to arrive before joining the inputs  # noqa: E501

        :param join_window_ms: The join_window_ms of this PipelineOutput.  # noqa: E501
        :type: int
        """

        self._join_window_ms = join_window_ms

    @property
    def steps(self):
        """Gets the steps of this PipelineOutput.  # noqa: E501

        Previous step to receive data from  # noqa: E501

        :return: The steps of this PipelineOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this PipelineOutput.

        Previous step to receive data from  # noqa: E501

        :param steps: The steps of this PipelineOutput.  # noqa: E501
        :type: list[str]
        """

        self._steps = steps

    @property
    def steps_join(self):
        """Gets the steps_join of this PipelineOutput.  # noqa: E501


        :return: The steps_join of this PipelineOutput.  # noqa: E501
        :rtype: JoinType
        """
        return self._steps_join

    @steps_join.setter
    def steps_join(self, steps_join):
        """Sets the steps_join of this PipelineOutput.


        :param steps_join: The steps_join of this PipelineOutput.  # noqa: E501
        :type: JoinType
        """

        self._steps_join = steps_join

    @property
    def tensor_map(self):
        """Gets the tensor_map of this PipelineOutput.  # noqa: E501

        Map of tensor name conversions to use e.g. output1 -> input1  # noqa: E501

        :return: The tensor_map of this PipelineOutput.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tensor_map

    @tensor_map.setter
    def tensor_map(self, tensor_map):
        """Sets the tensor_map of this PipelineOutput.

        Map of tensor name conversions to use e.g. output1 -> input1  # noqa: E501

        :param tensor_map: The tensor_map of this PipelineOutput.  # noqa: E501
        :type: dict(str, str)
        """

        self._tensor_map = tensor_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
