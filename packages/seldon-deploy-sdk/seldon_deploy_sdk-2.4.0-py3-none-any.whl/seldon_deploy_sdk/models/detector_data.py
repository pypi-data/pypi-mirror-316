# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DetectorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'DetectorConfiguration',
        'deployment_kind': 'str',
        'deployment_name': 'str',
        'detector_type': 'str',
        'name': 'str',
        'namespace': 'str',
        'status': 'DetectorStatus'
    }

    attribute_map = {
        'config': 'config',
        'deployment_kind': 'deployment_kind',
        'deployment_name': 'deployment_name',
        'detector_type': 'detector_type',
        'name': 'name',
        'namespace': 'namespace',
        'status': 'status'
    }

    def __init__(self, config=None, deployment_kind=None, deployment_name=None, detector_type=None, name=None, namespace=None, status=None):  # noqa: E501
        """DetectorData - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._deployment_kind = None
        self._deployment_name = None
        self._detector_type = None
        self._name = None
        self._namespace = None
        self._status = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if deployment_kind is not None:
            self.deployment_kind = deployment_kind
        if deployment_name is not None:
            self.deployment_name = deployment_name
        if detector_type is not None:
            self.detector_type = detector_type
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if status is not None:
            self.status = status

    @property
    def config(self):
        """Gets the config of this DetectorData.  # noqa: E501


        :return: The config of this DetectorData.  # noqa: E501
        :rtype: DetectorConfiguration
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DetectorData.


        :param config: The config of this DetectorData.  # noqa: E501
        :type: DetectorConfiguration
        """

        self._config = config

    @property
    def deployment_kind(self):
        """Gets the deployment_kind of this DetectorData.  # noqa: E501


        :return: The deployment_kind of this DetectorData.  # noqa: E501
        :rtype: str
        """
        return self._deployment_kind

    @deployment_kind.setter
    def deployment_kind(self, deployment_kind):
        """Sets the deployment_kind of this DetectorData.


        :param deployment_kind: The deployment_kind of this DetectorData.  # noqa: E501
        :type: str
        """

        self._deployment_kind = deployment_kind

    @property
    def deployment_name(self):
        """Gets the deployment_name of this DetectorData.  # noqa: E501


        :return: The deployment_name of this DetectorData.  # noqa: E501
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this DetectorData.


        :param deployment_name: The deployment_name of this DetectorData.  # noqa: E501
        :type: str
        """

        self._deployment_name = deployment_name

    @property
    def detector_type(self):
        """Gets the detector_type of this DetectorData.  # noqa: E501


        :return: The detector_type of this DetectorData.  # noqa: E501
        :rtype: str
        """
        return self._detector_type

    @detector_type.setter
    def detector_type(self, detector_type):
        """Sets the detector_type of this DetectorData.


        :param detector_type: The detector_type of this DetectorData.  # noqa: E501
        :type: str
        """

        self._detector_type = detector_type

    @property
    def name(self):
        """Gets the name of this DetectorData.  # noqa: E501


        :return: The name of this DetectorData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DetectorData.


        :param name: The name of this DetectorData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this DetectorData.  # noqa: E501


        :return: The namespace of this DetectorData.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DetectorData.


        :param namespace: The namespace of this DetectorData.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def status(self):
        """Gets the status of this DetectorData.  # noqa: E501


        :return: The status of this DetectorData.  # noqa: E501
        :rtype: DetectorStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DetectorData.


        :param status: The status of this DetectorData.  # noqa: E501
        :type: DetectorStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetectorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
