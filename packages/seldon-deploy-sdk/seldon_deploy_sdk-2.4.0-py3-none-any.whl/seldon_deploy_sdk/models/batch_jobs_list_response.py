# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BatchJobsListResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batch_jobs': 'BatchJobDescriptionList',
        'limit': 'int',
        'page': 'int',
        'pages_count': 'int'
    }

    attribute_map = {
        'batch_jobs': 'batchJobs',
        'limit': 'limit',
        'page': 'page',
        'pages_count': 'pagesCount'
    }

    def __init__(self, batch_jobs=None, limit=None, page=None, pages_count=None):  # noqa: E501
        """BatchJobsListResponse - a model defined in Swagger"""  # noqa: E501

        self._batch_jobs = None
        self._limit = None
        self._page = None
        self._pages_count = None
        self.discriminator = None

        if batch_jobs is not None:
            self.batch_jobs = batch_jobs
        if limit is not None:
            self.limit = limit
        if page is not None:
            self.page = page
        if pages_count is not None:
            self.pages_count = pages_count

    @property
    def batch_jobs(self):
        """Gets the batch_jobs of this BatchJobsListResponse.  # noqa: E501


        :return: The batch_jobs of this BatchJobsListResponse.  # noqa: E501
        :rtype: BatchJobDescriptionList
        """
        return self._batch_jobs

    @batch_jobs.setter
    def batch_jobs(self, batch_jobs):
        """Sets the batch_jobs of this BatchJobsListResponse.


        :param batch_jobs: The batch_jobs of this BatchJobsListResponse.  # noqa: E501
        :type: BatchJobDescriptionList
        """

        self._batch_jobs = batch_jobs

    @property
    def limit(self):
        """Gets the limit of this BatchJobsListResponse.  # noqa: E501

        Limit of the request in: body  # noqa: E501

        :return: The limit of this BatchJobsListResponse.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this BatchJobsListResponse.

        Limit of the request in: body  # noqa: E501

        :param limit: The limit of this BatchJobsListResponse.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def page(self):
        """Gets the page of this BatchJobsListResponse.  # noqa: E501

        Returned Page (counting from 0) in: body  # noqa: E501

        :return: The page of this BatchJobsListResponse.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this BatchJobsListResponse.

        Returned Page (counting from 0) in: body  # noqa: E501

        :param page: The page of this BatchJobsListResponse.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def pages_count(self):
        """Gets the pages_count of this BatchJobsListResponse.  # noqa: E501

        Number of available pages (Page = 0, ..., PagesCount - 1) in: body  # noqa: E501

        :return: The pages_count of this BatchJobsListResponse.  # noqa: E501
        :rtype: int
        """
        return self._pages_count

    @pages_count.setter
    def pages_count(self, pages_count):
        """Sets the pages_count of this BatchJobsListResponse.

        Number of available pages (Page = 0, ..., PagesCount - 1) in: body  # noqa: E501

        :param pages_count: The pages_count of this BatchJobsListResponse.  # noqa: E501
        :type: int
        """

        self._pages_count = pages_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchJobsListResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchJobsListResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
