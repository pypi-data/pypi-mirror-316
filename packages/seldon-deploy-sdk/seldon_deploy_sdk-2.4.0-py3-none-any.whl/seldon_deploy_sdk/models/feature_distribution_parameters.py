# coding: utf-8

"""
    Seldon Deploy API

    API to interact and manage the lifecycle of your machine learning models deployed through Seldon Deploy.  # noqa: E501

    OpenAPI spec version: v1alpha1
    Contact: hello@seldon.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeatureDistributionParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'histogram_interval': 'float',
        'minimum_bucket_count': 'int',
        'number_of_time_buckets': 'int'
    }

    attribute_map = {
        'histogram_interval': 'histogram_interval',
        'minimum_bucket_count': 'minimum_bucket_count',
        'number_of_time_buckets': 'number_of_time_buckets'
    }

    def __init__(self, histogram_interval=None, minimum_bucket_count=None, number_of_time_buckets=None):  # noqa: E501
        """FeatureDistributionParameters - a model defined in Swagger"""  # noqa: E501

        self._histogram_interval = None
        self._minimum_bucket_count = None
        self._number_of_time_buckets = None
        self.discriminator = None

        if histogram_interval is not None:
            self.histogram_interval = histogram_interval
        if minimum_bucket_count is not None:
            self.minimum_bucket_count = minimum_bucket_count
        if number_of_time_buckets is not None:
            self.number_of_time_buckets = number_of_time_buckets

    @property
    def histogram_interval(self):
        """Gets the histogram_interval of this FeatureDistributionParameters.  # noqa: E501

        HistogramInterval refers to the size of bins in a aggregated feature distribution or statistics queries for real features  # noqa: E501

        :return: The histogram_interval of this FeatureDistributionParameters.  # noqa: E501
        :rtype: float
        """
        return self._histogram_interval

    @histogram_interval.setter
    def histogram_interval(self, histogram_interval):
        """Sets the histogram_interval of this FeatureDistributionParameters.

        HistogramInterval refers to the size of bins in a aggregated feature distribution or statistics queries for real features  # noqa: E501

        :param histogram_interval: The histogram_interval of this FeatureDistributionParameters.  # noqa: E501
        :type: float
        """

        self._histogram_interval = histogram_interval

    @property
    def minimum_bucket_count(self):
        """Gets the minimum_bucket_count of this FeatureDistributionParameters.  # noqa: E501

        MinimumBucketCount refers to the minimum bucket size to filter in case of categorical, proba or one_hot feature queries  # noqa: E501

        :return: The minimum_bucket_count of this FeatureDistributionParameters.  # noqa: E501
        :rtype: int
        """
        return self._minimum_bucket_count

    @minimum_bucket_count.setter
    def minimum_bucket_count(self, minimum_bucket_count):
        """Sets the minimum_bucket_count of this FeatureDistributionParameters.

        MinimumBucketCount refers to the minimum bucket size to filter in case of categorical, proba or one_hot feature queries  # noqa: E501

        :param minimum_bucket_count: The minimum_bucket_count of this FeatureDistributionParameters.  # noqa: E501
        :type: int
        """

        self._minimum_bucket_count = minimum_bucket_count

    @property
    def number_of_time_buckets(self):
        """Gets the number_of_time_buckets of this FeatureDistributionParameters.  # noqa: E501

        NumberOfTimeBuckets refers to the number of time bins in a non time-aggregated feature distribution or statistics queries  # noqa: E501

        :return: The number_of_time_buckets of this FeatureDistributionParameters.  # noqa: E501
        :rtype: int
        """
        return self._number_of_time_buckets

    @number_of_time_buckets.setter
    def number_of_time_buckets(self, number_of_time_buckets):
        """Sets the number_of_time_buckets of this FeatureDistributionParameters.

        NumberOfTimeBuckets refers to the number of time bins in a non time-aggregated feature distribution or statistics queries  # noqa: E501

        :param number_of_time_buckets: The number_of_time_buckets of this FeatureDistributionParameters.  # noqa: E501
        :type: int
        """

        self._number_of_time_buckets = number_of_time_buckets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureDistributionParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureDistributionParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
