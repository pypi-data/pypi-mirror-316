""" All author scripts"""

import json
from anubisgit.data_loader import load_jsons
from anubisgit.comparator import full_compare
from loguru import logger

PRENOMS = [
    "pierre",
    "guillaume",
    "serge",
    "nicolas",
    "thibault",
    "marie",
    "jean",
    "julien",
    "constantin",
    "nicolas",
    "laurent",
    "antoine",
    "julien",
    "thomas",
    "quentin",
]


def clean_name(name: str) -> str:
    """
    Simple function that remove unwanted characters from names.

    Args:
        name (str): Name of the person from git

    Returns:
        name (str): Cleaned name
    """
    name = name.lower()
    if name in PRENOMS:
        return ""

    # Skip digits
    name = "".join([i for i in name if not i.isdigit()])

    for char in "-_.@":
        name = name.replace(char, " ")

    # shrink common surnames to first letter
    for pattern in PRENOMS:
        idx = name.find(pattern)
        if idx != -1:
            len_ = len(pattern)
            rename = name[: idx + 1] + name[idx + len_ :]
            return rename
    return name


def get_author_list(path: str, filename: str = "./authors_raw.json") -> list:
    """
    Find all authors in the analysis and dump a json.

    Args:
        path (str): Path to .json files generated by Anubis.
        filename (str): Name of the file dumped. Defaults to ./authors_raw.json.

    Returns:
        out (list): List of authors name
    """

    # logger.info("Get authors from blame...")
    # authors_b = _authors_from_blame(path)
    logger.info("Get authors from commits...")
    authors_c = _authors_from_commits(path)

    logger.info("Sort authors ...")
    # out = sorted(list(set(authors_b + authors_c)))
    out = sorted(list(set(authors_c)))
    logger.info("Dump authors ...")

    with open(filename, "w") as fout:
        json.dump(out, fout)

    return out


def find_authors_matches(authors_list: list) -> dict:
    """
    Identify the similar names for each author, giving each one a id.

    Args:
        authors_list (list): List of the authors

    Returns:
        dict: Authors with there id.
    """
    uid = 0
    assign_ = {auth: 0 for auth in authors_list}

    for auth_1 in authors_list:
        for auth_2 in authors_list:
            if auth_1 != auth_2 and full_compare(
                clean_name(auth_1), clean_name(auth_2)
            ):
                if assign_[auth_1] > 0:
                    assign_[auth_2] = assign_[auth_1]
                elif assign_[auth_2] > 0:
                    assign_[auth_1] = assign_[auth_2]
                else:
                    uid += 1
                    assign_[auth_1] = uid
                    assign_[auth_2] = uid
    return assign_


def gather_aliases(assign_: dict) -> dict:
    """
    Regroup similar authors previously identified.

    Args:
        assign_ (dict): Authors with there id.

    Returns:
        dict: Id with their corresponding authors.
    """

    match_dict_ = {0: []}
    for auth_ in assign_:
        uid = assign_[auth_]

        if uid not in match_dict_:
            match_dict_[uid] = []

        if uid > 0:
            match_dict_[uid].append(auth_)
    return match_dict_


def associate_trigram(match_dict: dict) -> dict:
    """
    Find the authors trigram.

    Args:
        match_dict (dict): Id with their corresponding authors.

    Returns:
        dict: Dict with author name as key and its corresponding trigram as value
    """
    alias_dict = {}
    for uid, aliases in match_dict.items():
        if uid == 0:
            for auth_ in aliases:
                alias_dict[auth_] = define_trigram(auth_)
        else:
            for auth_ in aliases:
                alias_dict[auth_] = define_trigram(aliases[0])
    return alias_dict


def build_aliases(authors_list: list) -> dict:
    """
    Build aliases from authors name.

    Args:
        authors_list (list): List of gitlab authors

    Returns:
        alias_dict (dict): Dict of corresponding aliases
    """

    logger.info("Find matching names...")
    assign_ = find_authors_matches(authors_list)

    logger.info("Gather aliases...")
    match_dict_ = gather_aliases(assign_)

    logger.info("Add single names...")
    for auth_ in authors_list:
        found_ = False
        for uid in match_dict_:
            if auth_ in match_dict_[uid]:
                found_ = True
        if not found_:
            match_dict_[0].append(auth_)
    match_dict_[0] = sorted(match_dict_[0])

    logger.info(" > Single authors:")
    logger.info(" -" + "\n -".join(match_dict_[0]))
    logger.info(" > Aliased authors:")
    for names in match_dict_.values():
        logger.info(" -" + ", ".join(names))

    logger.info("Build trigrams...")
    alias_dict = associate_trigram(match_dict_)

    return alias_dict


def define_trigram(name: str) -> str:
    """
    Try to define a trigram from a name.

    Trigram should be firxst letter of first name and first and last letters of last name.

    ex: Nicolas Dubois -> NDS

    If the name passed is a single word, then it returns the first three letters.
    If the name is one word with less than three characters, it returns the input name.

    Args:
        name (str): name to process

    Returns:
        str: trigram
    """
    # split space
    words = name.split()
    if not words:
        return "XXX"
    if len(words) == 1:
        if len(words[0]) < 3:
            return words[0].upper()
        else:
            return words[0][:3].upper()
    else:
        return f"{words[0][0]}{words[-1][0]}{words[-1][-1]}".upper()


def _authors_from_blame(path: str) -> list:
    """
    Get list of authors that appear in the joined_blame_monthly.json file

    Args:
        path (str): path to Anubis database

    Returns:
        list_authors (str): names of authors from blame
    """
    # get data from file
    blame_db = load_jsons(path, "blame.json")
    list_authors = []

    # loop for each month
    for list_of_blame_file in blame_db.values():
        if list_of_blame_file is not None:
            for blame_file in list_of_blame_file:
                if "author" in blame_file.keys():
                    for author in blame_file["author"]:
                        author_name = remove_mail_from_author_str(author)
                        list_authors.append(author_name)
    return list_authors


def _authors_from_commits(path: str) -> list:
    """
    Get list of authors that appear in the joined_commits_monthly.json file

    Args:
        path (str): path to Anubis database

    Returns:
        list_authors (list): names of authors from commits
    """
    # get data from file
    commits_db = load_jsons(path, "commits.json")

    list_authors = []
    # loop for each month
    for list_of_commit in commits_db.values():
        if list_of_commit is not None:
            for commit in list_of_commit:
                author_name = remove_mail_from_author_str(commit["author"])
                if author_name is not None:
                    list_authors.append(author_name)
    return list_authors


def remove_mail_from_author_str(author: str) -> str:
    """
    Remove mail from author string.

    Author string could look like: "John Smith <john.smith@cerfacs.fr>".
    We want to extract the name "John Smith"

    Args:
        author (str): author string

    Returns:
        str: author name
    """
    try:
        return author.split("<")[0].rstrip().title()
    except AttributeError:
        return None
