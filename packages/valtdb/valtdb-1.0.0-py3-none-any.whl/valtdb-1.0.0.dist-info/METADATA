Metadata-Version: 2.1
Name: valtdb
Version: 1.0.0
Summary: A secure and flexible database library with encryption and remote access
Home-page: https://github.com/DevsBenji/valtdb
Author: DevsBenji
Author-email: benji.development@protonmail.com
Project-URL: Bug Tracker, https://github.com/DevsBenji/valtdb/issues
Keywords: database,encryption,secure-database,nosql,embedded-database,key-value-store,document-database,database-security,encrypted-storage,secure-communication,database-tools,python3,data-storage,crypto
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Database
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: cryptography>=41.0.0
Requires-Dist: paramiko>=3.3.1
Requires-Dist: python-dateutil>=2.8.2
Requires-Dist: requests>=2.31.0
Requires-Dist: typing-extensions>=4.7.1
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: flake8>=6.1.0; extra == "dev"
Requires-Dist: bandit>=1.7.5; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0.2; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=0.5.2; extra == "docs"
Requires-Dist: sphinx-autodoc-typehints>=1.12.0; extra == "docs"

# ValtDB

ValtDB - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∞ Python. –û–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —à–∏—Ä–æ–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤.

## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- üöÄ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- üîí –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- üéØ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π API
- üìä –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤
- üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- üì¶ –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
- üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
- üîç –ì–∏–±–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

## –£—Å—Ç–∞–Ω–æ–≤–∫–∞

```bash
pip install valtdb
```

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

```python
from valtdb.api import ValtDB

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ValtDB
db = ValtDB("./data")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.db("myapp")

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
secure_db = db.db("secure_app", {
    "algorithm": "AES",
    "hash_algorithm": "SHA256"
})
```

### –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü

```python
# –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
users = db.table("users", {
    "id": "int",
    "name": "str",
    "email": "str"
})

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã
posts = db.table("posts", {
    "id": {"type": "int", "required": True, "unique": True},
    "title": {"type": "str", "required": True},
    "content": {"type": "str", "encrypted": True},
    "status": {"type": "str", "choices": ["draft", "published", "archived"]},
    "views": {"type": "int", "default": 0},
    "created_at": {"type": "datetime", "auto_now": True},
    "tags": {"type": "list", "item_type": "str"}
})
```

### –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏

```python
# –í—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
users.insert({
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com"
})

# –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞
users.bulk_insert([
    {"id": 2, "name": "Jane Doe", "email": "jane@example.com"},
    {"id": 3, "name": "Bob Smith", "email": "bob@example.com"}
])

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
users.query().where(id=1).update({"name": "John Smith"})

# –£–¥–∞–ª–µ–Ω–∏–µ
users.query().where(email="john@example.com").delete()
```

## –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤

#### –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã

```python
# –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
active_users = users.query()\
    .where(status="active")\
    .get()

# –í—ã–±–æ—Ä –ø–æ–ª–µ–π
names = users.query()\
    .select("name", "email")\
    .where(status="active")\
    .get()

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
sorted_users = users.query()\
    .order_by("name", SortOrder.ASC)\
    .get()
```

#### –°–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è

```python
# –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
results = users.query()\
    .where(status="active")\
    .where_between("age", 18, 65)\
    .where_not_null("email")\
    .where_like("name", "%John%")\
    .get()

# OR —É—Å–ª–æ–≤–∏—è
results = users.query()\
    .where(role="admin")\
    .or_where(status="premium")\
    .get()

# IN —É—Å–ª–æ–≤–∏—è
results = users.query()\
    .where_in("status", ["active", "pending"])\
    .get()

# –°–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
premium_active_users = users.query()\
    .where(status="active")\
    .where(subscription="premium")\
    .where_greater("last_login", "2024-01-01")\
    .where_not_in("role", ["banned", "suspended"])\
    .get()
```

#### –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞

```python
# –ü–æ–¥—Å—á–µ—Ç
total = users.query().count()

# –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
avg_age = users.query()\
    .where(status="active")\
    .avg("age")

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
stats = users.query()\
    .select("country", db.raw("COUNT(*) as user_count"))\
    .group_by("country")\
    .having("user_count", ("GT", 100))\
    .get()

# –°–ª–æ–∂–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
user_stats = users.query()\
    .select(
        "department",
        db.raw("AVG(salary) as avg_salary"),
        db.raw("COUNT(*) as employee_count")
    )\
    .group_by("department")\
    .having("employee_count", ("GT", 5))\
    .order_by("avg_salary", SortOrder.DESC)\
    .get()
```

#### –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü

```python
# INNER JOIN
user_posts = users.query()\
    .select("users.name", "posts.title")\
    .join("posts", {"users.id": "posts.user_id"})\
    .where("posts.status", "published")\
    .get()

# LEFT JOIN —Å —É—Å–ª–æ–≤–∏—è–º–∏
results = users.query()\
    .select("users.*", "orders.total")\
    .left_join("orders", {"users.id": "orders.user_id"})\
    .where("users.status", "active")\
    .where_greater("orders.total", 1000)\
    .get()
```

### –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

```python
# –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
with db.transaction():
    user_id = users.insert_get_id({
        "name": "New User",
        "email": "new@example.com"
    })
    posts.insert({
        "user_id": user_id,
        "title": "First Post"
    })

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
try:
    with db.transaction():
        users.insert({"id": 1, "name": "Test"})
        posts.insert({"id": 1, "invalid": "data"})
except Exception:
    print("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
```

### –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∏ —á–∞–Ω–∫–∏

```python
# –ü—Ä–æ—Å—Ç–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
posts, meta = posts.query()\
    .where(status="published")\
    .order_by("created_at", SortOrder.DESC)\
    .paginate(page=2, per_page=20)

print(f"Showing {meta['from']} to {meta['to']} of {meta['total']} entries")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
users.query()\
    .where(status="active")\
    .chunk(100, lambda batch: process_users(batch))
```

### –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

```python
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
secure_users = db.table("secure_users", {
    "id": "int",
    "name": "str",
    "email": {"type": "str", "encrypted": True},
    "ssn": {"type": "str", "encrypted": True},
    "notes": {"type": "str", "encrypted": True}
})

# –†–∞–±–æ—Ç–∞ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
secure_users.insert({
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "ssn": "123-45-6789",
    "notes": "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
})
```

### –ë—ç–∫–∞–ø—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ

```python
# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
backup_file = db.backup("./backups")

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
db.restore(backup_file)
```

### –°—ã—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã

```python
# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ SQL
results = db.execute(
    "SELECT users.*, COUNT(orders.id) as order_count " +
    "FROM users " +
    "LEFT JOIN orders ON users.id = orders.user_id " +
    "GROUP BY users.id " +
    "HAVING order_count > :min_orders",
    {"min_orders": 5}
)
```

## –û–±–Ω–æ–≤–ª–µ–Ω–∏—è API

### –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ `exec_command` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ SSH.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–µ—Ç–æ–¥–∞—Ö —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

### –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

#### –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ SSH
```python
from valtdb.ssh import SSHConnection

connection = SSHConnection(host='example.com', username='user', password='pass')
result = connection.exec_command('ls -la')
print(result)
```

## –í–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç

–ú—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ ValtDB! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ø–æ –≤–Ω–µ—Å–µ–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π](CONTRIBUTING.md).

## –õ–∏—Ü–µ–Ω–∑–∏—è

ValtDB —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π MIT. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ [LICENSE](LICENSE).

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

- üí¨ [Telegram](https://t.me/DevBenji)

## –ê–≤—Ç–æ—Ä—ã

ValtDB —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è [–∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤](https://github.com/valtdb/valtdb/graphs/contributors).

## –¢–µ–≥–∏

#python #database #encryption #secure-database #nosql #embedded-database #python-library #database-management #crypto #secure-storage #key-value-store #document-database #python-package #database-security #python3 #encrypted-storage #secure-communication #database-tools #python-development #data-storage
