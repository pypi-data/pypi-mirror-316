# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from seres_client.models.available_resource_assembly_schema_schema import AvailableResourceAssemblySchemaSchema

class TestAvailableResourceAssemblySchemaSchema(unittest.TestCase):
    """AvailableResourceAssemblySchemaSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AvailableResourceAssemblySchemaSchema:
        """Test AvailableResourceAssemblySchemaSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AvailableResourceAssemblySchemaSchema`
        """
        model = AvailableResourceAssemblySchemaSchema()
        if include_optional:
            return AvailableResourceAssemblySchemaSchema(
                port_id = 56,
                resource_assembly_schema_id = 56,
                requires_transformation = True,
                requires_window = True,
                requires_secondary_window = True,
                components = [
                    seres_client.models.available_resource_assembly_schema_component_schema.AvailableResourceAssemblySchemaComponentSchema(
                        type = 'payload', 
                        resource_assembly_schema_component_id = 56, 
                        resource_id = 56, 
                        resource_schema_id = 56, 
                        is_primary = True, 
                        configuration = 'primary', 
                        resource_schema_actions = [
                            seres_client.models.available_resource_assembly_schema_component_resource_schema_action_schema.AvailableResourceAssemblySchemaComponentResourceSchemaActionSchema(
                                resource_schema_action_id = 56, 
                                resource_schema_action_schema_id = 56, )
                            ], )
                    ]
            )
        else:
            return AvailableResourceAssemblySchemaSchema(
                port_id = 56,
                resource_assembly_schema_id = 56,
                requires_transformation = True,
                requires_window = True,
                requires_secondary_window = True,
                components = [
                    seres_client.models.available_resource_assembly_schema_component_schema.AvailableResourceAssemblySchemaComponentSchema(
                        type = 'payload', 
                        resource_assembly_schema_component_id = 56, 
                        resource_id = 56, 
                        resource_schema_id = 56, 
                        is_primary = True, 
                        configuration = 'primary', 
                        resource_schema_actions = [
                            seres_client.models.available_resource_assembly_schema_component_resource_schema_action_schema.AvailableResourceAssemblySchemaComponentResourceSchemaActionSchema(
                                resource_schema_action_id = 56, 
                                resource_schema_action_schema_id = 56, )
                            ], )
                    ],
        )
        """

    def testAvailableResourceAssemblySchemaSchema(self):
        """Test AvailableResourceAssemblySchemaSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
