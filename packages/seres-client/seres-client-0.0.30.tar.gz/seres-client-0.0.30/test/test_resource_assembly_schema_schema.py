# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from seres_client.models.resource_assembly_schema_schema import ResourceAssemblySchemaSchema

class TestResourceAssemblySchemaSchema(unittest.TestCase):
    """ResourceAssemblySchemaSchema unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResourceAssemblySchemaSchema:
        """Test ResourceAssemblySchemaSchema
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResourceAssemblySchemaSchema`
        """
        model = ResourceAssemblySchemaSchema()
        if include_optional:
            return ResourceAssemblySchemaSchema(
                reference = '',
                is_partial = True,
                id = 56,
                status = 'new',
                components = [
                    seres_client.models.resource_assembly_schema_component_schema.ResourceAssemblySchemaComponentSchema(
                        resource_assembly_schema_id = 56, 
                        parent_resource_assembly_schema_component_id = 56, 
                        resource_schema_id = 56, 
                        configuration = 'primary', 
                        position_reference = '', 
                        is_main = True, 
                        id = 56, 
                        meta_energy_bank_consumer_link_needs_defining = True, 
                        meta_energy_bank_component_link_could_need_defining = True, 
                        resource_schema_type = 'payload', )
                    ],
                meta_default_configuration_ready = True,
                meta_movement_profiles_ready = True,
                meta_energy_configuration_ready = True,
                movement_domain_types = [
                    'aerial'
                    ]
            )
        else:
            return ResourceAssemblySchemaSchema(
                reference = '',
                is_partial = True,
                id = 56,
                status = 'new',
                components = [
                    seres_client.models.resource_assembly_schema_component_schema.ResourceAssemblySchemaComponentSchema(
                        resource_assembly_schema_id = 56, 
                        parent_resource_assembly_schema_component_id = 56, 
                        resource_schema_id = 56, 
                        configuration = 'primary', 
                        position_reference = '', 
                        is_main = True, 
                        id = 56, 
                        meta_energy_bank_consumer_link_needs_defining = True, 
                        meta_energy_bank_component_link_could_need_defining = True, 
                        resource_schema_type = 'payload', )
                    ],
                meta_default_configuration_ready = True,
                meta_movement_profiles_ready = True,
                meta_energy_configuration_ready = True,
                movement_domain_types = [
                    'aerial'
                    ],
        )
        """

    def testResourceAssemblySchemaSchema(self):
        """Test ResourceAssemblySchemaSchema"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
