# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from seres_client.models.implementation_status_enum import ImplementationStatusEnum
from seres_client.models.movement_domain_type import MovementDomainType
from seres_client.models.paginated_response_schema_resource_assembly_schema_schema import PaginatedResponseSchemaResourceAssemblySchemaSchema
from seres_client.models.resource_assembly_schema_schema import ResourceAssemblySchemaSchema

from seres_client.api_client import ApiClient, RequestSerialized
from seres_client.api_response import ApiResponse
from seres_client.rest import RESTResponseType


class ResourceAssemblySchemasApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_resource_assembly_schema(
        self,
        resource_assembly_schema_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ResourceAssemblySchemaSchema:
        """Get Resource Assembly Schema

        Get the given resource assembly schema

        :param resource_assembly_schema_id: (required)
        :type resource_assembly_schema_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_assembly_schema_serialize(
            resource_assembly_schema_id=resource_assembly_schema_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResourceAssemblySchemaSchema",
            '401': None,
            '404': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_resource_assembly_schema_with_http_info(
        self,
        resource_assembly_schema_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ResourceAssemblySchemaSchema]:
        """Get Resource Assembly Schema

        Get the given resource assembly schema

        :param resource_assembly_schema_id: (required)
        :type resource_assembly_schema_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_assembly_schema_serialize(
            resource_assembly_schema_id=resource_assembly_schema_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResourceAssemblySchemaSchema",
            '401': None,
            '404': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_resource_assembly_schema_without_preload_content(
        self,
        resource_assembly_schema_id: StrictInt,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Resource Assembly Schema

        Get the given resource assembly schema

        :param resource_assembly_schema_id: (required)
        :type resource_assembly_schema_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_assembly_schema_serialize(
            resource_assembly_schema_id=resource_assembly_schema_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ResourceAssemblySchemaSchema",
            '401': None,
            '404': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_resource_assembly_schema_serialize(
        self,
        resource_assembly_schema_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_assembly_schema_id is not None:
            _path_params['resource_assembly_schema_id'] = resource_assembly_schema_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/resource-assembly-schemas/{resource_assembly_schema_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_resource_assembly_schemas(
        self,
        main_component_resource_schema_ids: Annotated[Optional[List[Optional[StrictInt]]], Field(description="Filter assemblies that have these resource schemas as main components")] = None,
        primary_resource_schema_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that have these resource schemas as primary components")] = None,
        secondary_resource_schema_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that have these resource schemas as secondary components")] = None,
        resource_schema_id: Annotated[Optional[StrictInt], Field(description="Filter assemblies that use this resource schema in any capacity")] = None,
        useable: Annotated[Optional[StrictBool], Field(description="Filter assemblies that can be used by a port (launch, landing, storage are supported, and the assembly is active)")] = None,
        useable_by_port_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that can be used by all of the specified ports (launch, landing, storage are supported, and the assembly is active)")] = None,
        is_partial: Optional[StrictBool] = None,
        status: Optional[ImplementationStatusEnum] = None,
        port_id: Annotated[Optional[StrictInt], Field(description="Filter assemblies compatible with this port")] = None,
        has_battery_component: Annotated[Optional[StrictBool], Field(description="Filter resource assembly schemas that have at least one component of battery type. Note that this is based on type, not energy profiles")] = None,
        supported_movement_domain_type: Annotated[Optional[MovementDomainType], Field(description="Filter assembly schemas that are able to operate in the given domain")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Space seperated list of search terms")] = None,
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedResponseSchemaResourceAssemblySchemaSchema:
        """Get Resource Assembly Schemas

        List the resource assembly schemas

        :param main_component_resource_schema_ids: Filter assemblies that have these resource schemas as main components
        :type main_component_resource_schema_ids: List[Optional[int]]
        :param primary_resource_schema_ids: Filter assemblies that have these resource schemas as primary components
        :type primary_resource_schema_ids: List[int]
        :param secondary_resource_schema_ids: Filter assemblies that have these resource schemas as secondary components
        :type secondary_resource_schema_ids: List[int]
        :param resource_schema_id: Filter assemblies that use this resource schema in any capacity
        :type resource_schema_id: int
        :param useable: Filter assemblies that can be used by a port (launch, landing, storage are supported, and the assembly is active)
        :type useable: bool
        :param useable_by_port_ids: Filter assemblies that can be used by all of the specified ports (launch, landing, storage are supported, and the assembly is active)
        :type useable_by_port_ids: List[int]
        :param is_partial:
        :type is_partial: bool
        :param status:
        :type status: ImplementationStatusEnum
        :param port_id: Filter assemblies compatible with this port
        :type port_id: int
        :param has_battery_component: Filter resource assembly schemas that have at least one component of battery type. Note that this is based on type, not energy profiles
        :type has_battery_component: bool
        :param supported_movement_domain_type: Filter assembly schemas that are able to operate in the given domain
        :type supported_movement_domain_type: MovementDomainType
        :param search: Space seperated list of search terms
        :type search: str
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_assembly_schemas_serialize(
            main_component_resource_schema_ids=main_component_resource_schema_ids,
            primary_resource_schema_ids=primary_resource_schema_ids,
            secondary_resource_schema_ids=secondary_resource_schema_ids,
            resource_schema_id=resource_schema_id,
            useable=useable,
            useable_by_port_ids=useable_by_port_ids,
            is_partial=is_partial,
            status=status,
            port_id=port_id,
            has_battery_component=has_battery_component,
            supported_movement_domain_type=supported_movement_domain_type,
            search=search,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSchemaResourceAssemblySchemaSchema",
            '401': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_resource_assembly_schemas_with_http_info(
        self,
        main_component_resource_schema_ids: Annotated[Optional[List[Optional[StrictInt]]], Field(description="Filter assemblies that have these resource schemas as main components")] = None,
        primary_resource_schema_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that have these resource schemas as primary components")] = None,
        secondary_resource_schema_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that have these resource schemas as secondary components")] = None,
        resource_schema_id: Annotated[Optional[StrictInt], Field(description="Filter assemblies that use this resource schema in any capacity")] = None,
        useable: Annotated[Optional[StrictBool], Field(description="Filter assemblies that can be used by a port (launch, landing, storage are supported, and the assembly is active)")] = None,
        useable_by_port_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that can be used by all of the specified ports (launch, landing, storage are supported, and the assembly is active)")] = None,
        is_partial: Optional[StrictBool] = None,
        status: Optional[ImplementationStatusEnum] = None,
        port_id: Annotated[Optional[StrictInt], Field(description="Filter assemblies compatible with this port")] = None,
        has_battery_component: Annotated[Optional[StrictBool], Field(description="Filter resource assembly schemas that have at least one component of battery type. Note that this is based on type, not energy profiles")] = None,
        supported_movement_domain_type: Annotated[Optional[MovementDomainType], Field(description="Filter assembly schemas that are able to operate in the given domain")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Space seperated list of search terms")] = None,
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedResponseSchemaResourceAssemblySchemaSchema]:
        """Get Resource Assembly Schemas

        List the resource assembly schemas

        :param main_component_resource_schema_ids: Filter assemblies that have these resource schemas as main components
        :type main_component_resource_schema_ids: List[Optional[int]]
        :param primary_resource_schema_ids: Filter assemblies that have these resource schemas as primary components
        :type primary_resource_schema_ids: List[int]
        :param secondary_resource_schema_ids: Filter assemblies that have these resource schemas as secondary components
        :type secondary_resource_schema_ids: List[int]
        :param resource_schema_id: Filter assemblies that use this resource schema in any capacity
        :type resource_schema_id: int
        :param useable: Filter assemblies that can be used by a port (launch, landing, storage are supported, and the assembly is active)
        :type useable: bool
        :param useable_by_port_ids: Filter assemblies that can be used by all of the specified ports (launch, landing, storage are supported, and the assembly is active)
        :type useable_by_port_ids: List[int]
        :param is_partial:
        :type is_partial: bool
        :param status:
        :type status: ImplementationStatusEnum
        :param port_id: Filter assemblies compatible with this port
        :type port_id: int
        :param has_battery_component: Filter resource assembly schemas that have at least one component of battery type. Note that this is based on type, not energy profiles
        :type has_battery_component: bool
        :param supported_movement_domain_type: Filter assembly schemas that are able to operate in the given domain
        :type supported_movement_domain_type: MovementDomainType
        :param search: Space seperated list of search terms
        :type search: str
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_assembly_schemas_serialize(
            main_component_resource_schema_ids=main_component_resource_schema_ids,
            primary_resource_schema_ids=primary_resource_schema_ids,
            secondary_resource_schema_ids=secondary_resource_schema_ids,
            resource_schema_id=resource_schema_id,
            useable=useable,
            useable_by_port_ids=useable_by_port_ids,
            is_partial=is_partial,
            status=status,
            port_id=port_id,
            has_battery_component=has_battery_component,
            supported_movement_domain_type=supported_movement_domain_type,
            search=search,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSchemaResourceAssemblySchemaSchema",
            '401': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_resource_assembly_schemas_without_preload_content(
        self,
        main_component_resource_schema_ids: Annotated[Optional[List[Optional[StrictInt]]], Field(description="Filter assemblies that have these resource schemas as main components")] = None,
        primary_resource_schema_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that have these resource schemas as primary components")] = None,
        secondary_resource_schema_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that have these resource schemas as secondary components")] = None,
        resource_schema_id: Annotated[Optional[StrictInt], Field(description="Filter assemblies that use this resource schema in any capacity")] = None,
        useable: Annotated[Optional[StrictBool], Field(description="Filter assemblies that can be used by a port (launch, landing, storage are supported, and the assembly is active)")] = None,
        useable_by_port_ids: Annotated[Optional[List[StrictInt]], Field(description="Filter assemblies that can be used by all of the specified ports (launch, landing, storage are supported, and the assembly is active)")] = None,
        is_partial: Optional[StrictBool] = None,
        status: Optional[ImplementationStatusEnum] = None,
        port_id: Annotated[Optional[StrictInt], Field(description="Filter assemblies compatible with this port")] = None,
        has_battery_component: Annotated[Optional[StrictBool], Field(description="Filter resource assembly schemas that have at least one component of battery type. Note that this is based on type, not energy profiles")] = None,
        supported_movement_domain_type: Annotated[Optional[MovementDomainType], Field(description="Filter assembly schemas that are able to operate in the given domain")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Space seperated list of search terms")] = None,
        page: Optional[StrictInt] = None,
        per_page: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Resource Assembly Schemas

        List the resource assembly schemas

        :param main_component_resource_schema_ids: Filter assemblies that have these resource schemas as main components
        :type main_component_resource_schema_ids: List[Optional[int]]
        :param primary_resource_schema_ids: Filter assemblies that have these resource schemas as primary components
        :type primary_resource_schema_ids: List[int]
        :param secondary_resource_schema_ids: Filter assemblies that have these resource schemas as secondary components
        :type secondary_resource_schema_ids: List[int]
        :param resource_schema_id: Filter assemblies that use this resource schema in any capacity
        :type resource_schema_id: int
        :param useable: Filter assemblies that can be used by a port (launch, landing, storage are supported, and the assembly is active)
        :type useable: bool
        :param useable_by_port_ids: Filter assemblies that can be used by all of the specified ports (launch, landing, storage are supported, and the assembly is active)
        :type useable_by_port_ids: List[int]
        :param is_partial:
        :type is_partial: bool
        :param status:
        :type status: ImplementationStatusEnum
        :param port_id: Filter assemblies compatible with this port
        :type port_id: int
        :param has_battery_component: Filter resource assembly schemas that have at least one component of battery type. Note that this is based on type, not energy profiles
        :type has_battery_component: bool
        :param supported_movement_domain_type: Filter assembly schemas that are able to operate in the given domain
        :type supported_movement_domain_type: MovementDomainType
        :param search: Space seperated list of search terms
        :type search: str
        :param page:
        :type page: int
        :param per_page:
        :type per_page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_resource_assembly_schemas_serialize(
            main_component_resource_schema_ids=main_component_resource_schema_ids,
            primary_resource_schema_ids=primary_resource_schema_ids,
            secondary_resource_schema_ids=secondary_resource_schema_ids,
            resource_schema_id=resource_schema_id,
            useable=useable,
            useable_by_port_ids=useable_by_port_ids,
            is_partial=is_partial,
            status=status,
            port_id=port_id,
            has_battery_component=has_battery_component,
            supported_movement_domain_type=supported_movement_domain_type,
            search=search,
            page=page,
            per_page=per_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResponseSchemaResourceAssemblySchemaSchema",
            '401': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_resource_assembly_schemas_serialize(
        self,
        main_component_resource_schema_ids,
        primary_resource_schema_ids,
        secondary_resource_schema_ids,
        resource_schema_id,
        useable,
        useable_by_port_ids,
        is_partial,
        status,
        port_id,
        has_battery_component,
        supported_movement_domain_type,
        search,
        page,
        per_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'main_component_resource_schema_ids': 'multi',
            'primary_resource_schema_ids': 'multi',
            'secondary_resource_schema_ids': 'multi',
            'useable_by_port_ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if main_component_resource_schema_ids is not None:
            
            _query_params.append(('main_component_resource_schema_ids', main_component_resource_schema_ids))
            
        if primary_resource_schema_ids is not None:
            
            _query_params.append(('primary_resource_schema_ids', primary_resource_schema_ids))
            
        if secondary_resource_schema_ids is not None:
            
            _query_params.append(('secondary_resource_schema_ids', secondary_resource_schema_ids))
            
        if resource_schema_id is not None:
            
            _query_params.append(('resource_schema_id', resource_schema_id))
            
        if useable is not None:
            
            _query_params.append(('useable', useable))
            
        if useable_by_port_ids is not None:
            
            _query_params.append(('useable_by_port_ids', useable_by_port_ids))
            
        if is_partial is not None:
            
            _query_params.append(('is_partial', is_partial))
            
        if status is not None:
            
            _query_params.append(('status', status.value))
            
        if port_id is not None:
            
            _query_params.append(('port_id', port_id))
            
        if has_battery_component is not None:
            
            _query_params.append(('has_battery_component', has_battery_component))
            
        if supported_movement_domain_type is not None:
            
            _query_params.append(('supported_movement_domain_type', supported_movement_domain_type.value))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'APIKeyCookie'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/resource-assembly-schemas',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


