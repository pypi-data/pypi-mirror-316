# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from seres_client.models.access_key_status_enum import AccessKeyStatusEnum
from seres_client.models.permission_schema import PermissionSchema
from typing import Optional, Set
from typing_extensions import Self

class AccessKeySchema(BaseModel):
    """
    AccessKeySchema
    """ # noqa: E501
    name: StrictStr
    description: StrictStr
    permission_ids: List[StrictInt]
    id: StrictInt
    created: datetime
    status: AccessKeyStatusEnum
    expires: datetime
    created_by_id: StrictInt
    account_id: StrictInt
    key: StrictStr
    permissions: List[PermissionSchema]
    __properties: ClassVar[List[str]] = ["name", "description", "permission_ids", "id", "created", "status", "expires", "created_by_id", "account_id", "key", "permissions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessKeySchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessKeySchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "permission_ids": obj.get("permission_ids"),
            "id": obj.get("id"),
            "created": obj.get("created"),
            "status": obj.get("status"),
            "expires": obj.get("expires"),
            "created_by_id": obj.get("created_by_id"),
            "account_id": obj.get("account_id"),
            "key": obj.get("key"),
            "permissions": [PermissionSchema.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None
        })
        return _obj


