# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FutureSchema(BaseModel):
    """
    FutureSchema
    """ # noqa: E501
    reference: Annotated[str, Field(strict=True, max_length=100)]
    id: StrictInt
    created: StrictStr
    created_by_id: StrictInt
    committed: StrictBool
    committed_datetime: Optional[Any] = None
    parent_future_id: Optional[StrictInt] = None
    original_parent_future_id: Optional[StrictInt] = None
    account_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["reference", "id", "created", "created_by_id", "committed", "committed_datetime", "parent_future_id", "original_parent_future_id", "account_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FutureSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if committed_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.committed_datetime is None and "committed_datetime" in self.model_fields_set:
            _dict['committed_datetime'] = None

        # set to None if parent_future_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_future_id is None and "parent_future_id" in self.model_fields_set:
            _dict['parent_future_id'] = None

        # set to None if original_parent_future_id (nullable) is None
        # and model_fields_set contains the field
        if self.original_parent_future_id is None and "original_parent_future_id" in self.model_fields_set:
            _dict['original_parent_future_id'] = None

        # set to None if account_id (nullable) is None
        # and model_fields_set contains the field
        if self.account_id is None and "account_id" in self.model_fields_set:
            _dict['account_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FutureSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference": obj.get("reference"),
            "id": obj.get("id"),
            "created": obj.get("created"),
            "created_by_id": obj.get("created_by_id"),
            "committed": obj.get("committed"),
            "committed_datetime": obj.get("committed_datetime"),
            "parent_future_id": obj.get("parent_future_id"),
            "original_parent_future_id": obj.get("original_parent_future_id"),
            "account_id": obj.get("account_id")
        })
        return _obj


