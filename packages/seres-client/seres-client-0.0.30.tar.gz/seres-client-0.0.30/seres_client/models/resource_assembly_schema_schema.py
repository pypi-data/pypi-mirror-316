# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from seres_client.models.implementation_status_enum import ImplementationStatusEnum
from seres_client.models.movement_domain_type import MovementDomainType
from seres_client.models.resource_assembly_schema_component_schema import ResourceAssemblySchemaComponentSchema
from typing import Optional, Set
from typing_extensions import Self

class ResourceAssemblySchemaSchema(BaseModel):
    """
    ResourceAssemblySchemaSchema
    """ # noqa: E501
    reference: Annotated[str, Field(strict=True, max_length=80)]
    is_partial: StrictBool
    id: StrictInt
    status: ImplementationStatusEnum
    components: List[ResourceAssemblySchemaComponentSchema]
    meta_default_configuration_ready: StrictBool
    meta_movement_profiles_ready: StrictBool
    meta_energy_configuration_ready: StrictBool
    movement_domain_types: List[MovementDomainType]
    __properties: ClassVar[List[str]] = ["reference", "is_partial", "id", "status", "components", "meta_default_configuration_ready", "meta_movement_profiles_ready", "meta_energy_configuration_ready", "movement_domain_types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceAssemblySchemaSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        _items = []
        if self.components:
            for _item_components in self.components:
                if _item_components:
                    _items.append(_item_components.to_dict())
            _dict['components'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceAssemblySchemaSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reference": obj.get("reference"),
            "is_partial": obj.get("is_partial"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "components": [ResourceAssemblySchemaComponentSchema.from_dict(_item) for _item in obj["components"]] if obj.get("components") is not None else None,
            "meta_default_configuration_ready": obj.get("meta_default_configuration_ready"),
            "meta_movement_profiles_ready": obj.get("meta_movement_profiles_ready"),
            "meta_energy_configuration_ready": obj.get("meta_energy_configuration_ready"),
            "movement_domain_types": obj.get("movement_domain_types")
        })
        return _obj


