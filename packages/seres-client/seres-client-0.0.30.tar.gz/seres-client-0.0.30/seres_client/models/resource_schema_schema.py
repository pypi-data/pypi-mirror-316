# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from seres_client.models.implementation_status_enum import ImplementationStatusEnum
from seres_client.models.resource_schema_action_schema import ResourceSchemaActionSchema
from seres_client.models.resource_schema_energy_profile_schema import ResourceSchemaEnergyProfileSchema
from seres_client.models.resource_type_enum import ResourceTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class ResourceSchemaSchema(BaseModel):
    """
    ResourceSchemaSchema
    """ # noqa: E501
    model: Annotated[str, Field(strict=True, max_length=80)]
    resource_type: ResourceTypeEnum
    id: StrictInt
    created: StrictStr
    status: ImplementationStatusEnum
    decommission_datetime: Optional[Any] = None
    actions: List[ResourceSchemaActionSchema]
    has_preview: StrictBool
    energy_profile: Optional[ResourceSchemaEnergyProfileSchema] = None
    __properties: ClassVar[List[str]] = ["model", "resource_type", "id", "created", "status", "decommission_datetime", "actions", "has_preview", "energy_profile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceSchemaSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of energy_profile
        if self.energy_profile:
            _dict['energy_profile'] = self.energy_profile.to_dict()
        # set to None if decommission_datetime (nullable) is None
        # and model_fields_set contains the field
        if self.decommission_datetime is None and "decommission_datetime" in self.model_fields_set:
            _dict['decommission_datetime'] = None

        # set to None if energy_profile (nullable) is None
        # and model_fields_set contains the field
        if self.energy_profile is None and "energy_profile" in self.model_fields_set:
            _dict['energy_profile'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceSchemaSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": obj.get("model"),
            "resource_type": obj.get("resource_type"),
            "id": obj.get("id"),
            "created": obj.get("created"),
            "status": obj.get("status"),
            "decommission_datetime": obj.get("decommission_datetime"),
            "actions": [ResourceSchemaActionSchema.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "has_preview": obj.get("has_preview"),
            "energy_profile": ResourceSchemaEnergyProfileSchema.from_dict(obj["energy_profile"]) if obj.get("energy_profile") is not None else None
        })
        return _obj


