# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MissionPlanLegCreationSchema(BaseModel):
    """
    MissionPlanLegCreationSchema
    """ # noqa: E501
    resource_assembly_schema_id: StrictInt
    critical: Optional[StrictBool] = False
    starting_datetime: datetime
    is_launch_leg: Optional[StrictBool] = False
    is_landing_leg: Optional[StrictBool] = False
    origin_waypoint_id: StrictInt
    mission_plan_id: StrictInt
    __properties: ClassVar[List[str]] = ["resource_assembly_schema_id", "critical", "starting_datetime", "is_launch_leg", "is_landing_leg", "origin_waypoint_id", "mission_plan_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MissionPlanLegCreationSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MissionPlanLegCreationSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource_assembly_schema_id": obj.get("resource_assembly_schema_id"),
            "critical": obj.get("critical") if obj.get("critical") is not None else False,
            "starting_datetime": obj.get("starting_datetime"),
            "is_launch_leg": obj.get("is_launch_leg") if obj.get("is_launch_leg") is not None else False,
            "is_landing_leg": obj.get("is_landing_leg") if obj.get("is_landing_leg") is not None else False,
            "origin_waypoint_id": obj.get("origin_waypoint_id"),
            "mission_plan_id": obj.get("mission_plan_id")
        })
        return _obj


