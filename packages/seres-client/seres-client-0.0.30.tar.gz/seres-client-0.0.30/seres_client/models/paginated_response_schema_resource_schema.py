# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from seres_client.models.resource_schema import ResourceSchema
from typing import Optional, Set
from typing_extensions import Self

class PaginatedResponseSchemaResourceSchema(BaseModel):
    """
    PaginatedResponseSchemaResourceSchema
    """ # noqa: E501
    items: List[ResourceSchema]
    has_next: StrictBool
    has_prev: StrictBool
    next_num: Optional[StrictInt] = None
    prev_num: Optional[StrictInt] = None
    page: StrictInt
    pages: StrictInt
    total: StrictInt
    per_page: StrictInt
    __properties: ClassVar[List[str]] = ["items", "has_next", "has_prev", "next_num", "prev_num", "page", "pages", "total", "per_page"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaginatedResponseSchemaResourceSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # set to None if next_num (nullable) is None
        # and model_fields_set contains the field
        if self.next_num is None and "next_num" in self.model_fields_set:
            _dict['next_num'] = None

        # set to None if prev_num (nullable) is None
        # and model_fields_set contains the field
        if self.prev_num is None and "prev_num" in self.model_fields_set:
            _dict['prev_num'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaginatedResponseSchemaResourceSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": [ResourceSchema.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "has_next": obj.get("has_next"),
            "has_prev": obj.get("has_prev"),
            "next_num": obj.get("next_num"),
            "prev_num": obj.get("prev_num"),
            "page": obj.get("page"),
            "pages": obj.get("pages"),
            "total": obj.get("total"),
            "per_page": obj.get("per_page")
        })
        return _obj


