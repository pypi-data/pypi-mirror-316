# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from seres_client.models.configuration_enum import ConfigurationEnum
from seres_client.models.resource_type_enum import ResourceTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class ResourceAssemblySchemaComponentSchema(BaseModel):
    """
    ResourceAssemblySchemaComponentSchema
    """ # noqa: E501
    resource_assembly_schema_id: StrictInt
    parent_resource_assembly_schema_component_id: Optional[StrictInt] = None
    resource_schema_id: StrictInt
    configuration: ConfigurationEnum
    position_reference: Optional[StrictStr] = None
    is_main: StrictBool
    id: StrictInt
    meta_energy_bank_consumer_link_needs_defining: StrictBool
    meta_energy_bank_component_link_could_need_defining: StrictBool
    resource_schema_type: ResourceTypeEnum
    __properties: ClassVar[List[str]] = ["resource_assembly_schema_id", "parent_resource_assembly_schema_component_id", "resource_schema_id", "configuration", "position_reference", "is_main", "id", "meta_energy_bank_consumer_link_needs_defining", "meta_energy_bank_component_link_could_need_defining", "resource_schema_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceAssemblySchemaComponentSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if parent_resource_assembly_schema_component_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_resource_assembly_schema_component_id is None and "parent_resource_assembly_schema_component_id" in self.model_fields_set:
            _dict['parent_resource_assembly_schema_component_id'] = None

        # set to None if position_reference (nullable) is None
        # and model_fields_set contains the field
        if self.position_reference is None and "position_reference" in self.model_fields_set:
            _dict['position_reference'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceAssemblySchemaComponentSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource_assembly_schema_id": obj.get("resource_assembly_schema_id"),
            "parent_resource_assembly_schema_component_id": obj.get("parent_resource_assembly_schema_component_id"),
            "resource_schema_id": obj.get("resource_schema_id"),
            "configuration": obj.get("configuration"),
            "position_reference": obj.get("position_reference"),
            "is_main": obj.get("is_main"),
            "id": obj.get("id"),
            "meta_energy_bank_consumer_link_needs_defining": obj.get("meta_energy_bank_consumer_link_needs_defining"),
            "meta_energy_bank_component_link_could_need_defining": obj.get("meta_energy_bank_component_link_could_need_defining"),
            "resource_schema_type": obj.get("resource_schema_type")
        })
        return _obj


