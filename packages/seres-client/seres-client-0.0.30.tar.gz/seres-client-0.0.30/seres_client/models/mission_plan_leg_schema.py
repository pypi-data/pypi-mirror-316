# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from seres_client.models.mission_plan_leg_resource_schema import MissionPlanLegResourceSchema
from typing import Optional, Set
from typing_extensions import Self

class MissionPlanLegSchema(BaseModel):
    """
    MissionPlanLegSchema
    """ # noqa: E501
    resource_assembly_schema_id: StrictInt
    critical: Optional[StrictBool] = False
    starting_datetime: StrictStr
    is_launch_leg: Optional[StrictBool] = False
    is_landing_leg: Optional[StrictBool] = False
    origin_waypoint_id: StrictInt
    mission_plan_id: StrictInt
    generated: Optional[StrictBool] = False
    id: StrictInt
    future_id: StrictInt
    created: StrictStr
    cancelled: StrictBool
    created_by_id: StrictInt
    leg_resources: List[MissionPlanLegResourceSchema]
    __properties: ClassVar[List[str]] = ["resource_assembly_schema_id", "critical", "starting_datetime", "is_launch_leg", "is_landing_leg", "origin_waypoint_id", "mission_plan_id", "generated", "id", "future_id", "created", "cancelled", "created_by_id", "leg_resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MissionPlanLegSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in leg_resources (list)
        _items = []
        if self.leg_resources:
            for _item_leg_resources in self.leg_resources:
                if _item_leg_resources:
                    _items.append(_item_leg_resources.to_dict())
            _dict['leg_resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MissionPlanLegSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource_assembly_schema_id": obj.get("resource_assembly_schema_id"),
            "critical": obj.get("critical") if obj.get("critical") is not None else False,
            "starting_datetime": obj.get("starting_datetime"),
            "is_launch_leg": obj.get("is_launch_leg") if obj.get("is_launch_leg") is not None else False,
            "is_landing_leg": obj.get("is_landing_leg") if obj.get("is_landing_leg") is not None else False,
            "origin_waypoint_id": obj.get("origin_waypoint_id"),
            "mission_plan_id": obj.get("mission_plan_id"),
            "generated": obj.get("generated") if obj.get("generated") is not None else False,
            "id": obj.get("id"),
            "future_id": obj.get("future_id"),
            "created": obj.get("created"),
            "cancelled": obj.get("cancelled"),
            "created_by_id": obj.get("created_by_id"),
            "leg_resources": [MissionPlanLegResourceSchema.from_dict(_item) for _item in obj["leg_resources"]] if obj.get("leg_resources") is not None else None
        })
        return _obj


