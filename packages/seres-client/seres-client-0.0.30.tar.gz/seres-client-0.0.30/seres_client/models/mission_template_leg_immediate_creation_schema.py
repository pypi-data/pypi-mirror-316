# coding: utf-8

"""
    Secore API

    API for the Seres core platform

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from seres_client.models.average_speed import AverageSpeed
from seres_client.models.movement_domain_type import MovementDomainType
from typing import Optional, Set
from typing_extensions import Self

class MissionTemplateLegImmediateCreationSchema(BaseModel):
    """
    MissionTemplateLegImmediateCreationSchema
    """ # noqa: E501
    meta_order: StrictInt
    critical: Optional[StrictBool] = Field(default=False, description="Critical legs are uninterruptable and must be performed exactly at the specified time")
    average_speed: Optional[AverageSpeed] = None
    duration_seconds: Optional[StrictInt] = None
    movement_domain_type: MovementDomainType
    resource_schema_action_schema_ids: Optional[List[StrictInt]] = None
    origin_waypoint_temporary_id: StrictInt
    generated: Optional[StrictBool] = Field(default=False, description="The leg was automatically generated")
    __properties: ClassVar[List[str]] = ["meta_order", "critical", "average_speed", "duration_seconds", "movement_domain_type", "resource_schema_action_schema_ids", "origin_waypoint_temporary_id", "generated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MissionTemplateLegImmediateCreationSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of average_speed
        if self.average_speed:
            _dict['average_speed'] = self.average_speed.to_dict()
        # set to None if average_speed (nullable) is None
        # and model_fields_set contains the field
        if self.average_speed is None and "average_speed" in self.model_fields_set:
            _dict['average_speed'] = None

        # set to None if duration_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.duration_seconds is None and "duration_seconds" in self.model_fields_set:
            _dict['duration_seconds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MissionTemplateLegImmediateCreationSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meta_order": obj.get("meta_order"),
            "critical": obj.get("critical") if obj.get("critical") is not None else False,
            "average_speed": AverageSpeed.from_dict(obj["average_speed"]) if obj.get("average_speed") is not None else None,
            "duration_seconds": obj.get("duration_seconds"),
            "movement_domain_type": obj.get("movement_domain_type"),
            "resource_schema_action_schema_ids": obj.get("resource_schema_action_schema_ids"),
            "origin_waypoint_temporary_id": obj.get("origin_waypoint_temporary_id"),
            "generated": obj.get("generated") if obj.get("generated") is not None else False
        })
        return _obj


