"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from ascend_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class AccountEquityAmountTypedDict(TypedDict):
    r"""The account_equity in USD returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class AccountEquityAmount(BaseModel):
    r"""The account_equity in USD returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BuyingPowerAmountTypedDict(TypedDict):
    r"""The buying power in USD returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BuyingPowerAmount(BaseModel):
    r"""The buying power in USD returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class PositionMarketValueAmountTypedDict(TypedDict):
    r"""The position_market_value in USD returned from the request."""

    value: NotRequired[str]
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class PositionMarketValueAmount(BaseModel):
    r"""The position_market_value in USD returned from the request."""

    value: Optional[str] = None
    r"""The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details"""


class BuyingPowerTypedDict(TypedDict):
    r"""Response for GetBuyingPower"""

    account_equity_amount: NotRequired[Nullable[AccountEquityAmountTypedDict]]
    r"""The account_equity in USD returned from the request."""
    account_id: NotRequired[str]
    r"""The account ID returned from the request."""
    buying_power_amount: NotRequired[Nullable[BuyingPowerAmountTypedDict]]
    r"""The buying power in USD returned from the request."""
    name: NotRequired[str]
    r"""The service generated name of the BuyingPower Format: accounts/{account_id}/buyingPower"""
    position_market_value_amount: NotRequired[
        Nullable[PositionMarketValueAmountTypedDict]
    ]
    r"""The position_market_value in USD returned from the request."""


class BuyingPower(BaseModel):
    r"""Response for GetBuyingPower"""

    account_equity_amount: OptionalNullable[AccountEquityAmount] = UNSET
    r"""The account_equity in USD returned from the request."""

    account_id: Optional[str] = None
    r"""The account ID returned from the request."""

    buying_power_amount: OptionalNullable[BuyingPowerAmount] = UNSET
    r"""The buying power in USD returned from the request."""

    name: Optional[str] = None
    r"""The service generated name of the BuyingPower Format: accounts/{account_id}/buyingPower"""

    position_market_value_amount: OptionalNullable[PositionMarketValueAmount] = UNSET
    r"""The position_market_value in USD returned from the request."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "account_equity_amount",
            "account_id",
            "buying_power_amount",
            "name",
            "position_market_value_amount",
        ]
        nullable_fields = [
            "account_equity_amount",
            "buying_power_amount",
            "position_market_value_amount",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
