"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from freeclimb.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from freeclimb.exceptions import ApiAttributeError



def lazy_import():
    from freeclimb.model.sms_ten_dlc_partner_campaign_brand import SMSTenDLCPartnerCampaignBrand
    globals()['SMSTenDLCPartnerCampaignBrand'] = SMSTenDLCPartnerCampaignBrand


class SMSTenDLCPartnerCampaign(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('status',): {
            'ACTIVE': "ACTIVE",
            'EXPIRED': "EXPIRED",
        },
    }

    validations = {
        ('brand_id',): {
            'max_length': 8,
        },
        ('usecase',): {
            'max_length': 20,
        },
        ('description',): {
            'max_length': 4096,
        },
        ('sample1',): {
            'max_length': 1024,
        },
        ('sample2',): {
            'max_length': 1024,
        },
        ('sample3',): {
            'max_length': 1024,
        },
        ('sample4',): {
            'max_length': 1024,
        },
        ('sample5',): {
            'max_length': 1024,
        },
        ('message_flow',): {
            'max_length': 2048,
        },
        ('help_message',): {
            'max_length': 255,
        },
        ('optin_keywords',): {
            'max_length': 255,
        },
        ('optout_keywords',): {
            'max_length': 255,
        },
        ('help_keywords',): {
            'max_length': 255,
        },
        ('optin_message',): {
            'max_length': 255,
        },
        ('optout_message',): {
            'max_length': 255,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'campaign_id': (str,),  # noqa: E501
            'brand_id': (str,),  # noqa: E501
            'usecase': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'account_id': (str, none_type,),  # noqa: E501
             'status': (str, str,),
            'status': (str,),  # noqa: E501
            'create_date': (datetime,),  # noqa: E501
            'embedded_link': (bool,),  # noqa: E501
            'embedded_phone': (bool,),  # noqa: E501
            'affiliate_marketing': (bool,),  # noqa: E501
            'number_pool': (bool,),  # noqa: E501
            'age_gated': (bool,),  # noqa: E501
            'direct_lending': (bool,),  # noqa: E501
            'subscriber_optin': (bool,),  # noqa: E501
            'subscriber_optout': (bool,),  # noqa: E501
            'subscriber_help': (bool,),  # noqa: E501
            'sample1': (str,),  # noqa: E501
            'sample2': (str, none_type,),  # noqa: E501
            'sample3': (str, none_type,),  # noqa: E501
            'sample4': (str, none_type,),  # noqa: E501
            'sample5': (str, none_type,),  # noqa: E501
            'message_flow': (str, none_type,),  # noqa: E501
            'help_message': (str, none_type,),  # noqa: E501
            'optin_keywords': (str,),  # noqa: E501
            'optout_keywords': (str,),  # noqa: E501
            'help_keywords': (str,),  # noqa: E501
            'optin_message': (str,),  # noqa: E501
            'optout_message': (str,),  # noqa: E501
            'brand': (SMSTenDLCPartnerCampaignBrand,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'campaign_id': 'campaignId',  # noqa: E501
        'brand_id': 'brandId',  # noqa: E501
        'usecase': 'usecase',  # noqa: E501
        'description': 'description',  # noqa: E501
        'account_id': 'accountId',  # noqa: E501
        'status': 'status',  # noqa: E501
        'create_date': 'createDate',  # noqa: E501
        'embedded_link': 'embeddedLink',  # noqa: E501
        'embedded_phone': 'embeddedPhone',  # noqa: E501
        'affiliate_marketing': 'affiliateMarketing',  # noqa: E501
        'number_pool': 'numberPool',  # noqa: E501
        'age_gated': 'ageGated',  # noqa: E501
        'direct_lending': 'directLending',  # noqa: E501
        'subscriber_optin': 'subscriberOptin',  # noqa: E501
        'subscriber_optout': 'subscriberOptout',  # noqa: E501
        'subscriber_help': 'subscriberHelp',  # noqa: E501
        'sample1': 'sample1',  # noqa: E501
        'sample2': 'sample2',  # noqa: E501
        'sample3': 'sample3',  # noqa: E501
        'sample4': 'sample4',  # noqa: E501
        'sample5': 'sample5',  # noqa: E501
        'message_flow': 'messageFlow',  # noqa: E501
        'help_message': 'helpMessage',  # noqa: E501
        'optin_keywords': 'optinKeywords',  # noqa: E501
        'optout_keywords': 'optoutKeywords',  # noqa: E501
        'help_keywords': 'helpKeywords',  # noqa: E501
        'optin_message': 'optinMessage',  # noqa: E501
        'optout_message': 'optoutMessage',  # noqa: E501
        'brand': 'brand',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, campaign_id, brand_id, usecase, description, *args, **kwargs):  # noqa: E501
        """SMSTenDLCPartnerCampaign - a model defined in OpenAPI

        Args:
            campaign_id (str): Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.
            brand_id (str): Alphanumeric identifier of the brand associated with this campaign.
            usecase (str): Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
            description (str): Summary description of this campaign.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_id (str, none_type): ID of the account that created this Queue.. [optional]  # noqa: E501
            status (str): Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. . [optional]  # noqa: E501
            create_date (datetime): Unix timestamp when campaign was created.. [optional]  # noqa: E501
            embedded_link (bool): Does message generated by the campaign include URL link in SMS?. [optional] if omitted the server will use the default value of False  # noqa: E501
            embedded_phone (bool): Does message generated by the campaign include phone number in SMS?. [optional] if omitted the server will use the default value of False  # noqa: E501
            affiliate_marketing (bool): Does message content controlled by affiliate marketing other than the brand?. [optional]  # noqa: E501
            number_pool (bool): Does campaign utilize pool of phone nubers?. [optional] if omitted the server will use the default value of False  # noqa: E501
            age_gated (bool): Age gated content in campaign.. [optional]  # noqa: E501
            direct_lending (bool): [optional]  # noqa: E501
            subscriber_optin (bool): Does campaign require subscriber to opt-in before SMS is sent to subscriber?. [optional] if omitted the server will use the default value of False  # noqa: E501
            subscriber_optout (bool): Does campaign support subscriber opt-out keyword(s)?. [optional] if omitted the server will use the default value of False  # noqa: E501
            subscriber_help (bool): Does campaign responds to help keyword(s)?. [optional] if omitted the server will use the default value of False  # noqa: E501
            sample1 (str): Message sample. Some campaign tiers require 1 or more message samples.. [optional]  # noqa: E501
            sample2 (str, none_type): Message sample. Some campaign tiers require 2 or more message samples.. [optional]  # noqa: E501
            sample3 (str, none_type): Message sample. Some campaign tiers require 3 or more message samples.. [optional]  # noqa: E501
            sample4 (str, none_type): Message sample. Some campaign tiers require 4 or more message samples.. [optional]  # noqa: E501
            sample5 (str, none_type): Message sample. Some campaign tiers require 5 or more message samples.. [optional]  # noqa: E501
            message_flow (str, none_type): Message flow description.. [optional]  # noqa: E501
            help_message (str, none_type): Help message of the campaign.. [optional]  # noqa: E501
            optin_keywords (str): Subscriber opt-in keywords. Multiple keywords are comma separated without space.. [optional]  # noqa: E501
            optout_keywords (str): Subscriber opt-out keywords. Multiple keywords are comma separated without space.. [optional]  # noqa: E501
            help_keywords (str): Subscriber help keywords. Multiple keywords are comma separated without space.. [optional]  # noqa: E501
            optin_message (str): Subscriber opt-in message.. [optional]  # noqa: E501
            optout_message (str): Subscriber opt-out message.. [optional]  # noqa: E501
            brand (SMSTenDLCPartnerCampaignBrand): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.campaign_id = campaign_id
        self.brand_id = brand_id
        self.usecase = usecase
        self.description = description
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, campaign_id, brand_id, usecase, description, *args, **kwargs):  # noqa: E501
        """SMSTenDLCPartnerCampaign - a model defined in OpenAPI

        Args:
            campaign_id (str): Alphanumeric identifier assigned by the registry for a campaign. This identifier is required by the NetNumber OSR SMS enabling process of 10DLC.
            brand_id (str): Alphanumeric identifier of the brand associated with this campaign.
            usecase (str): Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase` operation to retrieve usecases available for given brand.
            description (str): Summary description of this campaign.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_id (str, none_type): ID of the account that created this Queue.. [optional]  # noqa: E501
            status (str): Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created campaign defaults to ACTIVE status. . [optional]  # noqa: E501
            create_date (datetime): Unix timestamp when campaign was created.. [optional]  # noqa: E501
            embedded_link (bool): Does message generated by the campaign include URL link in SMS?. [optional] if omitted the server will use the default value of False  # noqa: E501
            embedded_phone (bool): Does message generated by the campaign include phone number in SMS?. [optional] if omitted the server will use the default value of False  # noqa: E501
            affiliate_marketing (bool): Does message content controlled by affiliate marketing other than the brand?. [optional]  # noqa: E501
            number_pool (bool): Does campaign utilize pool of phone nubers?. [optional] if omitted the server will use the default value of False  # noqa: E501
            age_gated (bool): Age gated content in campaign.. [optional]  # noqa: E501
            direct_lending (bool): [optional]  # noqa: E501
            subscriber_optin (bool): Does campaign require subscriber to opt-in before SMS is sent to subscriber?. [optional] if omitted the server will use the default value of False  # noqa: E501
            subscriber_optout (bool): Does campaign support subscriber opt-out keyword(s)?. [optional] if omitted the server will use the default value of False  # noqa: E501
            subscriber_help (bool): Does campaign responds to help keyword(s)?. [optional] if omitted the server will use the default value of False  # noqa: E501
            sample1 (str): Message sample. Some campaign tiers require 1 or more message samples.. [optional]  # noqa: E501
            sample2 (str, none_type): Message sample. Some campaign tiers require 2 or more message samples.. [optional]  # noqa: E501
            sample3 (str, none_type): Message sample. Some campaign tiers require 3 or more message samples.. [optional]  # noqa: E501
            sample4 (str, none_type): Message sample. Some campaign tiers require 4 or more message samples.. [optional]  # noqa: E501
            sample5 (str, none_type): Message sample. Some campaign tiers require 5 or more message samples.. [optional]  # noqa: E501
            message_flow (str, none_type): Message flow description.. [optional]  # noqa: E501
            help_message (str, none_type): Help message of the campaign.. [optional]  # noqa: E501
            optin_keywords (str): Subscriber opt-in keywords. Multiple keywords are comma separated without space.. [optional]  # noqa: E501
            optout_keywords (str): Subscriber opt-out keywords. Multiple keywords are comma separated without space.. [optional]  # noqa: E501
            help_keywords (str): Subscriber help keywords. Multiple keywords are comma separated without space.. [optional]  # noqa: E501
            optin_message (str): Subscriber opt-in message.. [optional]  # noqa: E501
            optout_message (str): Subscriber opt-out message.. [optional]  # noqa: E501
            brand (SMSTenDLCPartnerCampaignBrand): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.campaign_id = campaign_id
        self.brand_id = brand_id
        self.usecase = usecase
        self.description = description
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")


