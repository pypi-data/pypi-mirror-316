"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from freeclimb.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from freeclimb.exceptions import ApiAttributeError




class SMSTenDLCBrand(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('entity_type',): {
            'PRIVATE_PROFIT': "PRIVATE_PROFIT",
            'PUBLIC_PROFIT': "PUBLIC_PROFIT",
            'NON_PROFIT': "NON_PROFIT",
            'GOVERNMENT': "GOVERNMENT",
            'SOLE_PROPRIETOR': "SOLE_PROPRIETOR",
        },
        ('brand_relationship',): {
            'BASIC_ACCOUNT': "BASIC_ACCOUNT",
            'SMALL_ACCOUNT': "SMALL_ACCOUNT",
            'MEDIUM_ACCOUNT': "MEDIUM_ACCOUNT",
            'LARGE_ACCOUNT': "LARGE_ACCOUNT",
            'KEY_ACCOUNT': "KEY_ACCOUNT",
        },
        ('identity_status',): {
            'SELF_DECLARED': "SELF_DECLARED",
            'UNVERIFIED': "UNVERIFIED",
            'VERIFIED': "VERIFIED",
            'VETTED_VERIFIED': "VETTED_VERIFIED",
        },
        ('stock_exchange',): {
            'NONE': "NONE",
            'NASDAQ': "NASDAQ",
            'NYSE': "NYSE",
            'AMEX': "AMEX",
            'AMX': "AMX",
            'ASX': "ASX",
            'B3': "B3",
            'BME': "BME",
            'BSE': "BSE",
            'FRA': "FRA",
            'ICEX': "ICEX",
            'JPX': "JPX",
            'JSE': "JSE",
            'KRX': "KRX",
            'LON': "LON",
            'NSE': "NSE",
            'OMX': "OMX",
            'SEHK': "SEHK",
            'SGX': "SGX",
            'SSE': "SSE",
            'STO': "STO",
            'SWX': "SWX",
            'SZSE': "SZSE",
            'TSX': "TSX",
            'TWSE': "TWSE",
            'VSE': "VSE",
            'OTHER': "OTHER",
        },
        ('alt_business_id_type',): {
            'NONE': "NONE",
            'DUNS': "DUNS",
            'GIIN': "GIIN",
            'LEI': "LEI",
        },
    }

    validations = {
        ('entity_type',): {
            'max_length': 20,
        },
        ('display_name',): {
            'max_length': 255,
        },
        ('phone',): {
            'max_length': 20,
        },
        ('country',): {
            'max_length': 2,
        },
        ('email',): {
            'max_length': 100,
        },
        ('vertical',): {
            'max_length': 50,
        },
        ('first_name',): {
            'max_length': 100,
        },
        ('last_name',): {
            'max_length': 100,
        },
        ('company_name',): {
            'max_length': 255,
        },
        ('ein',): {
            'max_length': 21,
        },
        ('ein_issuing_country',): {
            'max_length': 2,
        },
        ('street',): {
            'max_length': 100,
        },
        ('city',): {
            'max_length': 100,
        },
        ('state',): {
            'max_length': 20,
        },
        ('postal_code',): {
            'max_length': 10,
        },
        ('stock_symbol',): {
            'max_length': 10,
        },
        ('ip_address',): {
            'max_length': 50,
        },
        ('website',): {
            'max_length': 100,
        },
        ('alt_business_id',): {
            'max_length': 50,
        },
        ('reference_id',): {
            'max_length': 50,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
             'entity_type': (str, str,),
            'entity_type': (str,),  # noqa: E501
            'display_name': (str,),  # noqa: E501
            'phone': (str,),  # noqa: E501
            'country': (str,),  # noqa: E501
            'email': (str,),  # noqa: E501
             'brand_relationship': (str, str,),
            'brand_relationship': (str,),  # noqa: E501
            'vertical': (str,),  # noqa: E501
            'mock': (bool,),  # noqa: E501
             'identity_status': (str, str,),
            'identity_status': (str,),  # noqa: E501
            'account_id': (str, none_type,),  # noqa: E501
            'csp_id': (str,),  # noqa: E501
            'brand_id': (str,),  # noqa: E501
            'first_name': (str,),  # noqa: E501
            'last_name': (str,),  # noqa: E501
            'company_name': (str,),  # noqa: E501
            'ein': (str,),  # noqa: E501
            'ein_issuing_country': (str,),  # noqa: E501
            'street': (str,),  # noqa: E501
            'city': (str,),  # noqa: E501
            'state': (str,),  # noqa: E501
            'postal_code': (str,),  # noqa: E501
            'stock_symbol': (str,),  # noqa: E501
             'stock_exchange': (str, str,),
            'stock_exchange': (str,),  # noqa: E501
            'ip_address': (str,),  # noqa: E501
            'website': (str,),  # noqa: E501
            'alt_business_id': (str,),  # noqa: E501
             'alt_business_id_type': (str, str,),
            'alt_business_id_type': (str,),  # noqa: E501
            'universal_ein': (str,),  # noqa: E501
            'reference_id': (str,),  # noqa: E501
            'optional_attributes': ({str: ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)},),  # noqa: E501
            'create_date': (datetime,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'entity_type': 'entityType',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'phone': 'phone',  # noqa: E501
        'country': 'country',  # noqa: E501
        'email': 'email',  # noqa: E501
        'brand_relationship': 'brandRelationship',  # noqa: E501
        'vertical': 'vertical',  # noqa: E501
        'mock': 'mock',  # noqa: E501
        'identity_status': 'identityStatus',  # noqa: E501
        'account_id': 'accountId',  # noqa: E501
        'csp_id': 'cspId',  # noqa: E501
        'brand_id': 'brandId',  # noqa: E501
        'first_name': 'firstName',  # noqa: E501
        'last_name': 'lastName',  # noqa: E501
        'company_name': 'companyName',  # noqa: E501
        'ein': 'ein',  # noqa: E501
        'ein_issuing_country': 'einIssuingCountry',  # noqa: E501
        'street': 'street',  # noqa: E501
        'city': 'city',  # noqa: E501
        'state': 'state',  # noqa: E501
        'postal_code': 'postalCode',  # noqa: E501
        'stock_symbol': 'stockSymbol',  # noqa: E501
        'stock_exchange': 'stockExchange',  # noqa: E501
        'ip_address': 'ipAddress',  # noqa: E501
        'website': 'website',  # noqa: E501
        'alt_business_id': 'altBusinessId',  # noqa: E501
        'alt_business_id_type': 'altBusinessIdType',  # noqa: E501
        'universal_ein': 'universalEin',  # noqa: E501
        'reference_id': 'referenceId',  # noqa: E501
        'optional_attributes': 'optionalAttributes',  # noqa: E501
        'create_date': 'createDate',  # noqa: E501
    }

    read_only_vars = {
        'csp_id',  # noqa: E501
        'brand_id',  # noqa: E501
        'universal_ein',  # noqa: E501
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, entity_type, display_name, phone, country, email, brand_relationship, vertical, mock, identity_status, *args, **kwargs):  # noqa: E501
        """SMSTenDLCBrand - a model defined in OpenAPI

        Args:
            entity_type (str): Entity type behind the brand. This is the form of business establishment.
            display_name (str): Display or marketing name of the brand.
            phone (str): Valid phone number in e.164 international format.
            country (str): ISO2 2 characters country code. Example: US - United States
            email (str): Valid email address of brand support contact.
            brand_relationship (str): Brand relationship to the CSP
            vertical (str): Vertical or industry segment of the brand.
            mock (bool): Test brand.
            identity_status (str): TCR assessment of the brand identification status.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_id (str, none_type): ID of the account that created this Queue.. [optional]  # noqa: E501
            csp_id (str): Unique identifier assigned to the csp by the registry.. [optional]  # noqa: E501
            brand_id (str): Unique identifier assigned to the brand by the registry.. [optional]  # noqa: E501
            first_name (str): First or given name. . [optional]  # noqa: E501
            last_name (str): Last or Surname.. [optional]  # noqa: E501
            company_name (str): (Required for Non-profit/private/public) Legal company name.. [optional]  # noqa: E501
            ein (str): (Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.. [optional]  # noqa: E501
            ein_issuing_country (str): ISO2 2 characters country code. Example: US - United States. [optional]  # noqa: E501
            street (str): Street number and name.. [optional]  # noqa: E501
            city (str): City name. [optional]  # noqa: E501
            state (str): State. Must be 2 letters code for United States.. [optional]  # noqa: E501
            postal_code (str): Postal codes. Use 5 digit zipcode for United States. [optional]  # noqa: E501
            stock_symbol (str): (Required for public company) stock symbol.. [optional]  # noqa: E501
            stock_exchange (str): (Required for public company) stock exchange.. [optional]  # noqa: E501
            ip_address (str): IP address of the browser requesting to create brand identity.. [optional]  # noqa: E501
            website (str): Brand website URL.. [optional]  # noqa: E501
            alt_business_id (str): Alternate business identifier such as DUNS, LEI, or GIIN. [optional]  # noqa: E501
            alt_business_id_type (str): The type of the Alternative business identifier. [optional]  # noqa: E501
            universal_ein (str): Universal EIN of Brand, Read Only.. [optional]  # noqa: E501
            reference_id (str): Caller supplied brand reference ID. If supplied, the value must be unique across all submitted brands. Can be used to prevent duplicate brand registrations.. [optional]  # noqa: E501
            optional_attributes ({str: ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)}): Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names.. [optional]  # noqa: E501
            create_date (datetime): Unix timestamp when brand was created.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.entity_type = entity_type
        self.display_name = display_name
        self.phone = phone
        self.country = country
        self.email = email
        self.brand_relationship = brand_relationship
        self.vertical = vertical
        self.mock = mock
        self.identity_status = identity_status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, entity_type, display_name, phone, country, email, brand_relationship, vertical, mock, identity_status, *args, **kwargs):  # noqa: E501
        """SMSTenDLCBrand - a model defined in OpenAPI

        Args:
            entity_type (str): Entity type behind the brand. This is the form of business establishment.
            display_name (str): Display or marketing name of the brand.
            phone (str): Valid phone number in e.164 international format.
            country (str): ISO2 2 characters country code. Example: US - United States
            email (str): Valid email address of brand support contact.
            brand_relationship (str): Brand relationship to the CSP
            vertical (str): Vertical or industry segment of the brand.
            mock (bool): Test brand.
            identity_status (str): TCR assessment of the brand identification status.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            account_id (str, none_type): ID of the account that created this Queue.. [optional]  # noqa: E501
            csp_id (str): Unique identifier assigned to the csp by the registry.. [optional]  # noqa: E501
            brand_id (str): Unique identifier assigned to the brand by the registry.. [optional]  # noqa: E501
            first_name (str): First or given name. . [optional]  # noqa: E501
            last_name (str): Last or Surname.. [optional]  # noqa: E501
            company_name (str): (Required for Non-profit/private/public) Legal company name.. [optional]  # noqa: E501
            ein (str): (Required for Non-profit) Government assigned corporate tax ID. EIN is 9-digits in U.S.. [optional]  # noqa: E501
            ein_issuing_country (str): ISO2 2 characters country code. Example: US - United States. [optional]  # noqa: E501
            street (str): Street number and name.. [optional]  # noqa: E501
            city (str): City name. [optional]  # noqa: E501
            state (str): State. Must be 2 letters code for United States.. [optional]  # noqa: E501
            postal_code (str): Postal codes. Use 5 digit zipcode for United States. [optional]  # noqa: E501
            stock_symbol (str): (Required for public company) stock symbol.. [optional]  # noqa: E501
            stock_exchange (str): (Required for public company) stock exchange.. [optional]  # noqa: E501
            ip_address (str): IP address of the browser requesting to create brand identity.. [optional]  # noqa: E501
            website (str): Brand website URL.. [optional]  # noqa: E501
            alt_business_id (str): Alternate business identifier such as DUNS, LEI, or GIIN. [optional]  # noqa: E501
            alt_business_id_type (str): The type of the Alternative business identifier. [optional]  # noqa: E501
            universal_ein (str): Universal EIN of Brand, Read Only.. [optional]  # noqa: E501
            reference_id (str): Caller supplied brand reference ID. If supplied, the value must be unique across all submitted brands. Can be used to prevent duplicate brand registrations.. [optional]  # noqa: E501
            optional_attributes ({str: ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)}): Optional brand attributes. Please refer to GET /enum/optionalAttributeNames for dictionary of optional attribute names.. [optional]  # noqa: E501
            create_date (datetime): Unix timestamp when brand was created.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.entity_type = entity_type
        self.display_name = display_name
        self.phone = phone
        self.country = country
        self.email = email
        self.brand_relationship = brand_relationship
        self.vertical = vertical
        self.mock = mock
        self.identity_status = identity_status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")


