"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest
from datetime import datetime, date
import pytest

import freeclimb
from freeclimb.model.message_result_all_of import MessageResultAllOf
from freeclimb.model.message_status import MessageStatus
from freeclimb.model.mutable_resource_model import MutableResourceModel
globals()['MessageResultAllOf'] = MessageResultAllOf
globals()['MessageStatus'] = MessageStatus
globals()['MutableResourceModel'] = MutableResourceModel

from freeclimb.model.message_result import MessageResult  # noqa: E501

class TestMessageResult(unittest.TestCase):
    """MessageResult unit test stubs"""

    def setUp(self):
        self.model = MessageResult(
        )
    
    def test_uri(self):
        """Test MessageResult.uri"""
        self.model.uri = "TEST_STRING"
        assert self.model.get("uri") == "TEST_STRING"

    def test_date_created(self):
        """Test MessageResult.date_created"""
        self.model.date_created = "TEST_STRING"
        assert self.model.get("date_created") == "TEST_STRING"

    def test_date_updated(self):
        """Test MessageResult.date_updated"""
        self.model.date_updated = "TEST_STRING"
        assert self.model.get("date_updated") == "TEST_STRING"

    def test_revision(self):
        """Test MessageResult.revision"""
        self.model.revision = 1
        assert self.model.get("revision") == 1

    def test_account_id(self):
        """Test MessageResult.account_id"""
        self.model.account_id = "TEST_STRING"
        assert self.model.get("account_id") == "TEST_STRING"

    def test_message_id(self):
        """Test MessageResult.message_id"""
        self.model.message_id = "TEST_STRING"
        assert self.model.get("message_id") == "TEST_STRING"

    def test_status(self):
        """Test MessageResult.status"""
        self.model.status = MessageStatus.NEW
        assert self.model.get("status") == MessageStatus.NEW
        self.model.status = MessageStatus.QUEUED
        assert self.model.get("status") == MessageStatus.QUEUED
        self.model.status = MessageStatus.REJECTED
        assert self.model.get("status") == MessageStatus.REJECTED
        self.model.status = MessageStatus.SENDING
        assert self.model.get("status") == MessageStatus.SENDING
        self.model.status = MessageStatus.SENT
        assert self.model.get("status") == MessageStatus.SENT
        self.model.status = MessageStatus.FAILED
        assert self.model.get("status") == MessageStatus.FAILED
        self.model.status = MessageStatus.RECEIVED
        assert self.model.get("status") == MessageStatus.RECEIVED
        self.model.status = MessageStatus.UNDELIVERED
        assert self.model.get("status") == MessageStatus.UNDELIVERED
        self.model.status = MessageStatus.EXPIRED
        assert self.model.get("status") == MessageStatus.EXPIRED
        self.model.status = MessageStatus.DELETED
        assert self.model.get("status") == MessageStatus.DELETED
        self.model.status = MessageStatus.UNKNOWN
        assert self.model.get("status") == MessageStatus.UNKNOWN

    def test__from(self):
        """Test MessageResult._from"""
        self.model._from = "TEST_STRING"
        assert self.model.get("_from") == "TEST_STRING"

    def test_to(self):
        """Test MessageResult.to"""
        self.model.to = "TEST_STRING"
        assert self.model.get("to") == "TEST_STRING"

    def test_text(self):
        """Test MessageResult.text"""
        self.model.text = "TEST_STRING"
        assert self.model.get("text") == "TEST_STRING"

    def test_direction(self):
        """Test MessageResult.direction"""
        self.model.direction = "TEST_STRING"
        assert self.model.get("direction") == "TEST_STRING"

    def test_notification_url(self):
        """Test MessageResult.notification_url"""
        self.model.notification_url = "TEST_STRING"
        assert self.model.get("notification_url") == "TEST_STRING"

    def test_brand_id(self):
        """Test MessageResult.brand_id"""
        self.model.brand_id = "TEST_STRING"
        assert self.model.get("brand_id") == "TEST_STRING"

    def test_campaign_id(self):
        """Test MessageResult.campaign_id"""
        self.model.campaign_id = "TEST_STRING"
        assert self.model.get("campaign_id") == "TEST_STRING"

    def test_segment_count(self):
        """Test MessageResult.segment_count"""
        
        
        self.model.segment_count = float(1) 
        assert self.model.get("segment_count") == float(1)
        

    def test_media_urls(self):
        """Test MessageResult.media_urls"""
        testList = []
        self.model.media_urls = testList
        assert self.model.get("media_urls") == testList


if __name__ == '__main__':
    unittest.main()