"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest
from datetime import datetime, date
import pytest

import freeclimb

from freeclimb.model.conference_status import ConferenceStatus  # noqa: E501

class TestConferenceStatus(unittest.TestCase):
    """ConferenceStatus unit test stubs"""

    
    def test_EMPTY_should_serialize_to_enum(self):
        expected = ConferenceStatus.EMPTY
        calculated = ConferenceStatus['EMPTY']
        assert expected == calculated

    def test_EMPTY_should_deserialize_to_string(self):
        test = ConferenceStatus.EMPTY
        expected = "empty"
        calculated = test.value
        assert expected == calculated

    def test_POPULATED_should_serialize_to_enum(self):
        expected = ConferenceStatus.POPULATED
        calculated = ConferenceStatus['POPULATED']
        assert expected == calculated

    def test_POPULATED_should_deserialize_to_string(self):
        test = ConferenceStatus.POPULATED
        expected = "populated"
        calculated = test.value
        assert expected == calculated

    def test_IN_PROGRESS_should_serialize_to_enum(self):
        expected = ConferenceStatus.IN_PROGRESS
        calculated = ConferenceStatus['IN_PROGRESS']
        assert expected == calculated

    def test_IN_PROGRESS_should_deserialize_to_string(self):
        test = ConferenceStatus.IN_PROGRESS
        expected = "inProgress"
        calculated = test.value
        assert expected == calculated

    def test_TERMINATED_should_serialize_to_enum(self):
        expected = ConferenceStatus.TERMINATED
        calculated = ConferenceStatus['TERMINATED']
        assert expected == calculated

    def test_TERMINATED_should_deserialize_to_string(self):
        test = ConferenceStatus.TERMINATED
        expected = "terminated"
        calculated = test.value
        assert expected == calculated

    
if __name__ == '__main__':
    unittest.main()