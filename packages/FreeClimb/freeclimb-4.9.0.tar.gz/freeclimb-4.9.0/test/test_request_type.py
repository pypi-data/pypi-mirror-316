"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest
from datetime import datetime, date
import pytest

import freeclimb

from freeclimb.model.request_type import RequestType  # noqa: E501

class TestRequestType(unittest.TestCase):
    """RequestType unit test stubs"""

    
    def test_INBOUND_CALL_should_serialize_to_enum(self):
        expected = RequestType.INBOUND_CALL
        calculated = RequestType['INBOUND_CALL']
        assert expected == calculated

    def test_INBOUND_CALL_should_deserialize_to_string(self):
        test = RequestType.INBOUND_CALL
        expected = "inboundCall"
        calculated = test.value
        assert expected == calculated

    def test_RECORD_should_serialize_to_enum(self):
        expected = RequestType.RECORD
        calculated = RequestType['RECORD']
        assert expected == calculated

    def test_RECORD_should_deserialize_to_string(self):
        test = RequestType.RECORD
        expected = "record"
        calculated = test.value
        assert expected == calculated

    def test_GET_DIGITS_should_serialize_to_enum(self):
        expected = RequestType.GET_DIGITS
        calculated = RequestType['GET_DIGITS']
        assert expected == calculated

    def test_GET_DIGITS_should_deserialize_to_string(self):
        test = RequestType.GET_DIGITS
        expected = "getDigits"
        calculated = test.value
        assert expected == calculated

    def test_GET_SPEECH_should_serialize_to_enum(self):
        expected = RequestType.GET_SPEECH
        calculated = RequestType['GET_SPEECH']
        assert expected == calculated

    def test_GET_SPEECH_should_deserialize_to_string(self):
        test = RequestType.GET_SPEECH
        expected = "getSpeech"
        calculated = test.value
        assert expected == calculated

    def test_REDIRECT_should_serialize_to_enum(self):
        expected = RequestType.REDIRECT
        calculated = RequestType['REDIRECT']
        assert expected == calculated

    def test_REDIRECT_should_deserialize_to_string(self):
        test = RequestType.REDIRECT
        expected = "redirect"
        calculated = test.value
        assert expected == calculated

    def test_PAUSE_should_serialize_to_enum(self):
        expected = RequestType.PAUSE
        calculated = RequestType['PAUSE']
        assert expected == calculated

    def test_PAUSE_should_deserialize_to_string(self):
        test = RequestType.PAUSE
        expected = "pause"
        calculated = test.value
        assert expected == calculated

    def test_OUT_DIAL_START_should_serialize_to_enum(self):
        expected = RequestType.OUT_DIAL_START
        calculated = RequestType['OUT_DIAL_START']
        assert expected == calculated

    def test_OUT_DIAL_START_should_deserialize_to_string(self):
        test = RequestType.OUT_DIAL_START
        expected = "outDialStart"
        calculated = test.value
        assert expected == calculated

    def test_OUT_DIAL_CONNECT_should_serialize_to_enum(self):
        expected = RequestType.OUT_DIAL_CONNECT
        calculated = RequestType['OUT_DIAL_CONNECT']
        assert expected == calculated

    def test_OUT_DIAL_CONNECT_should_deserialize_to_string(self):
        test = RequestType.OUT_DIAL_CONNECT
        expected = "outDialConnect"
        calculated = test.value
        assert expected == calculated

    def test_OUT_DIAL_API_CONNECT_should_serialize_to_enum(self):
        expected = RequestType.OUT_DIAL_API_CONNECT
        calculated = RequestType['OUT_DIAL_API_CONNECT']
        assert expected == calculated

    def test_OUT_DIAL_API_CONNECT_should_deserialize_to_string(self):
        test = RequestType.OUT_DIAL_API_CONNECT
        expected = "outDialApiConnect"
        calculated = test.value
        assert expected == calculated

    def test_MACHINE_DETECTED_should_serialize_to_enum(self):
        expected = RequestType.MACHINE_DETECTED
        calculated = RequestType['MACHINE_DETECTED']
        assert expected == calculated

    def test_MACHINE_DETECTED_should_deserialize_to_string(self):
        test = RequestType.MACHINE_DETECTED
        expected = "machineDetected"
        calculated = test.value
        assert expected == calculated

    def test_DEQUEUE_should_serialize_to_enum(self):
        expected = RequestType.DEQUEUE
        calculated = RequestType['DEQUEUE']
        assert expected == calculated

    def test_DEQUEUE_should_deserialize_to_string(self):
        test = RequestType.DEQUEUE
        expected = "dequeue"
        calculated = test.value
        assert expected == calculated

    def test_QUEUE_WAIT_should_serialize_to_enum(self):
        expected = RequestType.QUEUE_WAIT
        calculated = RequestType['QUEUE_WAIT']
        assert expected == calculated

    def test_QUEUE_WAIT_should_deserialize_to_string(self):
        test = RequestType.QUEUE_WAIT
        expected = "queueWait"
        calculated = test.value
        assert expected == calculated

    def test_ADD_TO_QUEUE_NOTIFICATION_should_serialize_to_enum(self):
        expected = RequestType.ADD_TO_QUEUE_NOTIFICATION
        calculated = RequestType['ADD_TO_QUEUE_NOTIFICATION']
        assert expected == calculated

    def test_ADD_TO_QUEUE_NOTIFICATION_should_deserialize_to_string(self):
        test = RequestType.ADD_TO_QUEUE_NOTIFICATION
        expected = "addToQueueNotification"
        calculated = test.value
        assert expected == calculated

    def test_REMOVE_FROM_QUEUE_NOTIFICATION_should_serialize_to_enum(self):
        expected = RequestType.REMOVE_FROM_QUEUE_NOTIFICATION
        calculated = RequestType['REMOVE_FROM_QUEUE_NOTIFICATION']
        assert expected == calculated

    def test_REMOVE_FROM_QUEUE_NOTIFICATION_should_deserialize_to_string(self):
        test = RequestType.REMOVE_FROM_QUEUE_NOTIFICATION
        expected = "removeFromQueueNotification"
        calculated = test.value
        assert expected == calculated

    def test_CALL_STATUS_should_serialize_to_enum(self):
        expected = RequestType.CALL_STATUS
        calculated = RequestType['CALL_STATUS']
        assert expected == calculated

    def test_CALL_STATUS_should_deserialize_to_string(self):
        test = RequestType.CALL_STATUS
        expected = "callStatus"
        calculated = test.value
        assert expected == calculated

    def test_CREATE_CONFERENCE_should_serialize_to_enum(self):
        expected = RequestType.CREATE_CONFERENCE
        calculated = RequestType['CREATE_CONFERENCE']
        assert expected == calculated

    def test_CREATE_CONFERENCE_should_deserialize_to_string(self):
        test = RequestType.CREATE_CONFERENCE
        expected = "createConference"
        calculated = test.value
        assert expected == calculated

    def test_CONFERENCE_STATUS_should_serialize_to_enum(self):
        expected = RequestType.CONFERENCE_STATUS
        calculated = RequestType['CONFERENCE_STATUS']
        assert expected == calculated

    def test_CONFERENCE_STATUS_should_deserialize_to_string(self):
        test = RequestType.CONFERENCE_STATUS
        expected = "conferenceStatus"
        calculated = test.value
        assert expected == calculated

    def test_LEAVE_CONFERENCE_should_serialize_to_enum(self):
        expected = RequestType.LEAVE_CONFERENCE
        calculated = RequestType['LEAVE_CONFERENCE']
        assert expected == calculated

    def test_LEAVE_CONFERENCE_should_deserialize_to_string(self):
        test = RequestType.LEAVE_CONFERENCE
        expected = "leaveConference"
        calculated = test.value
        assert expected == calculated

    def test_ADD_TO_CONFERENCE_NOTIFICATION_should_serialize_to_enum(self):
        expected = RequestType.ADD_TO_CONFERENCE_NOTIFICATION
        calculated = RequestType['ADD_TO_CONFERENCE_NOTIFICATION']
        assert expected == calculated

    def test_ADD_TO_CONFERENCE_NOTIFICATION_should_deserialize_to_string(self):
        test = RequestType.ADD_TO_CONFERENCE_NOTIFICATION
        expected = "addToConferenceNotification"
        calculated = test.value
        assert expected == calculated

    def test_CONFERENCE_RECORDING_STATUS_should_serialize_to_enum(self):
        expected = RequestType.CONFERENCE_RECORDING_STATUS
        calculated = RequestType['CONFERENCE_RECORDING_STATUS']
        assert expected == calculated

    def test_CONFERENCE_RECORDING_STATUS_should_deserialize_to_string(self):
        test = RequestType.CONFERENCE_RECORDING_STATUS
        expected = "conferenceRecordingStatus"
        calculated = test.value
        assert expected == calculated

    def test_CONFERENCE_CALL_CONTROL_should_serialize_to_enum(self):
        expected = RequestType.CONFERENCE_CALL_CONTROL
        calculated = RequestType['CONFERENCE_CALL_CONTROL']
        assert expected == calculated

    def test_CONFERENCE_CALL_CONTROL_should_deserialize_to_string(self):
        test = RequestType.CONFERENCE_CALL_CONTROL
        expected = "conferenceCallControl"
        calculated = test.value
        assert expected == calculated

    def test_MESSAGE_DELIVERY_should_serialize_to_enum(self):
        expected = RequestType.MESSAGE_DELIVERY
        calculated = RequestType['MESSAGE_DELIVERY']
        assert expected == calculated

    def test_MESSAGE_DELIVERY_should_deserialize_to_string(self):
        test = RequestType.MESSAGE_DELIVERY
        expected = "messageDelivery"
        calculated = test.value
        assert expected == calculated

    def test_MESSAGE_STATUS_should_serialize_to_enum(self):
        expected = RequestType.MESSAGE_STATUS
        calculated = RequestType['MESSAGE_STATUS']
        assert expected == calculated

    def test_MESSAGE_STATUS_should_deserialize_to_string(self):
        test = RequestType.MESSAGE_STATUS
        expected = "messageStatus"
        calculated = test.value
        assert expected == calculated

    
if __name__ == '__main__':
    unittest.main()