"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest
from datetime import datetime, date
import pytest

import freeclimb

from freeclimb.model.get_speech_reason import GetSpeechReason  # noqa: E501

class TestGetSpeechReason(unittest.TestCase):
    """GetSpeechReason unit test stubs"""

    
    def test_ERROR_should_serialize_to_enum(self):
        expected = GetSpeechReason.ERROR
        calculated = GetSpeechReason['ERROR']
        assert expected == calculated

    def test_ERROR_should_deserialize_to_string(self):
        test = GetSpeechReason.ERROR
        expected = "error"
        calculated = test.value
        assert expected == calculated

    def test_HANGUP_should_serialize_to_enum(self):
        expected = GetSpeechReason.HANGUP
        calculated = GetSpeechReason['HANGUP']
        assert expected == calculated

    def test_HANGUP_should_deserialize_to_string(self):
        test = GetSpeechReason.HANGUP
        expected = "hangup"
        calculated = test.value
        assert expected == calculated

    def test_DIGIT_should_serialize_to_enum(self):
        expected = GetSpeechReason.DIGIT
        calculated = GetSpeechReason['DIGIT']
        assert expected == calculated

    def test_DIGIT_should_deserialize_to_string(self):
        test = GetSpeechReason.DIGIT
        expected = "digit"
        calculated = test.value
        assert expected == calculated

    def test_NO_INPUT_should_serialize_to_enum(self):
        expected = GetSpeechReason.NO_INPUT
        calculated = GetSpeechReason['NO_INPUT']
        assert expected == calculated

    def test_NO_INPUT_should_deserialize_to_string(self):
        test = GetSpeechReason.NO_INPUT
        expected = "noInput"
        calculated = test.value
        assert expected == calculated

    def test_NO_MATCH_should_serialize_to_enum(self):
        expected = GetSpeechReason.NO_MATCH
        calculated = GetSpeechReason['NO_MATCH']
        assert expected == calculated

    def test_NO_MATCH_should_deserialize_to_string(self):
        test = GetSpeechReason.NO_MATCH
        expected = "noMatch"
        calculated = test.value
        assert expected == calculated

    def test_RECOGNITION_should_serialize_to_enum(self):
        expected = GetSpeechReason.RECOGNITION
        calculated = GetSpeechReason['RECOGNITION']
        assert expected == calculated

    def test_RECOGNITION_should_deserialize_to_string(self):
        test = GetSpeechReason.RECOGNITION
        expected = "recognition"
        calculated = test.value
        assert expected == calculated

    
if __name__ == '__main__':
    unittest.main()