"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest
from datetime import datetime, date
import pytest

import freeclimb

from freeclimb.model.language import Language  # noqa: E501

class TestLanguage(unittest.TestCase):
    """Language unit test stubs"""

    
    def test_CATALAN_should_serialize_to_enum(self):
        expected = Language.CATALAN
        calculated = Language['CATALAN']
        assert expected == calculated

    def test_CATALAN_should_deserialize_to_string(self):
        test = Language.CATALAN
        expected = "ca-ES"
        calculated = test.value
        assert expected == calculated

    def test_DANISH_should_serialize_to_enum(self):
        expected = Language.DANISH
        calculated = Language['DANISH']
        assert expected == calculated

    def test_DANISH_should_deserialize_to_string(self):
        test = Language.DANISH
        expected = "da-DK"
        calculated = test.value
        assert expected == calculated

    def test_GERMAN_should_serialize_to_enum(self):
        expected = Language.GERMAN
        calculated = Language['GERMAN']
        assert expected == calculated

    def test_GERMAN_should_deserialize_to_string(self):
        test = Language.GERMAN
        expected = "de-DE"
        calculated = test.value
        assert expected == calculated

    def test_ENGLISH_AU_should_serialize_to_enum(self):
        expected = Language.ENGLISH_AU
        calculated = Language['ENGLISH_AU']
        assert expected == calculated

    def test_ENGLISH_AU_should_deserialize_to_string(self):
        test = Language.ENGLISH_AU
        expected = "en-AU"
        calculated = test.value
        assert expected == calculated

    def test_ENGLISH_CA_should_serialize_to_enum(self):
        expected = Language.ENGLISH_CA
        calculated = Language['ENGLISH_CA']
        assert expected == calculated

    def test_ENGLISH_CA_should_deserialize_to_string(self):
        test = Language.ENGLISH_CA
        expected = "en-CA"
        calculated = test.value
        assert expected == calculated

    def test_ENGLISH_UK_should_serialize_to_enum(self):
        expected = Language.ENGLISH_UK
        calculated = Language['ENGLISH_UK']
        assert expected == calculated

    def test_ENGLISH_UK_should_deserialize_to_string(self):
        test = Language.ENGLISH_UK
        expected = "en-GB"
        calculated = test.value
        assert expected == calculated

    def test_ENGLISH_IN_should_serialize_to_enum(self):
        expected = Language.ENGLISH_IN
        calculated = Language['ENGLISH_IN']
        assert expected == calculated

    def test_ENGLISH_IN_should_deserialize_to_string(self):
        test = Language.ENGLISH_IN
        expected = "en-IN"
        calculated = test.value
        assert expected == calculated

    def test_ENGLISH_US_should_serialize_to_enum(self):
        expected = Language.ENGLISH_US
        calculated = Language['ENGLISH_US']
        assert expected == calculated

    def test_ENGLISH_US_should_deserialize_to_string(self):
        test = Language.ENGLISH_US
        expected = "en-US"
        calculated = test.value
        assert expected == calculated

    def test_ENGLISH_ES_should_serialize_to_enum(self):
        expected = Language.ENGLISH_ES
        calculated = Language['ENGLISH_ES']
        assert expected == calculated

    def test_ENGLISH_ES_should_deserialize_to_string(self):
        test = Language.ENGLISH_ES
        expected = "es-ES"
        calculated = test.value
        assert expected == calculated

    def test_ENGLISH_MX_should_serialize_to_enum(self):
        expected = Language.ENGLISH_MX
        calculated = Language['ENGLISH_MX']
        assert expected == calculated

    def test_ENGLISH_MX_should_deserialize_to_string(self):
        test = Language.ENGLISH_MX
        expected = "es-MX"
        calculated = test.value
        assert expected == calculated

    def test_FINNISH_should_serialize_to_enum(self):
        expected = Language.FINNISH
        calculated = Language['FINNISH']
        assert expected == calculated

    def test_FINNISH_should_deserialize_to_string(self):
        test = Language.FINNISH
        expected = "fi-FI"
        calculated = test.value
        assert expected == calculated

    def test_FRENCH_CA_should_serialize_to_enum(self):
        expected = Language.FRENCH_CA
        calculated = Language['FRENCH_CA']
        assert expected == calculated

    def test_FRENCH_CA_should_deserialize_to_string(self):
        test = Language.FRENCH_CA
        expected = "fr-CA"
        calculated = test.value
        assert expected == calculated

    def test_FRENCH_FR_should_serialize_to_enum(self):
        expected = Language.FRENCH_FR
        calculated = Language['FRENCH_FR']
        assert expected == calculated

    def test_FRENCH_FR_should_deserialize_to_string(self):
        test = Language.FRENCH_FR
        expected = "fr-FR"
        calculated = test.value
        assert expected == calculated

    def test_ITALIAN_should_serialize_to_enum(self):
        expected = Language.ITALIAN
        calculated = Language['ITALIAN']
        assert expected == calculated

    def test_ITALIAN_should_deserialize_to_string(self):
        test = Language.ITALIAN
        expected = "it-IT"
        calculated = test.value
        assert expected == calculated

    def test_JAPANESE_should_serialize_to_enum(self):
        expected = Language.JAPANESE
        calculated = Language['JAPANESE']
        assert expected == calculated

    def test_JAPANESE_should_deserialize_to_string(self):
        test = Language.JAPANESE
        expected = "ja-JP"
        calculated = test.value
        assert expected == calculated

    def test_KOREAN_should_serialize_to_enum(self):
        expected = Language.KOREAN
        calculated = Language['KOREAN']
        assert expected == calculated

    def test_KOREAN_should_deserialize_to_string(self):
        test = Language.KOREAN
        expected = "ko-KR"
        calculated = test.value
        assert expected == calculated

    def test_NORWEGIAN_should_serialize_to_enum(self):
        expected = Language.NORWEGIAN
        calculated = Language['NORWEGIAN']
        assert expected == calculated

    def test_NORWEGIAN_should_deserialize_to_string(self):
        test = Language.NORWEGIAN
        expected = "nb-NO"
        calculated = test.value
        assert expected == calculated

    def test_DUTCH_should_serialize_to_enum(self):
        expected = Language.DUTCH
        calculated = Language['DUTCH']
        assert expected == calculated

    def test_DUTCH_should_deserialize_to_string(self):
        test = Language.DUTCH
        expected = "nl-NL"
        calculated = test.value
        assert expected == calculated

    def test_POLISH_should_serialize_to_enum(self):
        expected = Language.POLISH
        calculated = Language['POLISH']
        assert expected == calculated

    def test_POLISH_should_deserialize_to_string(self):
        test = Language.POLISH
        expected = "pl-PL"
        calculated = test.value
        assert expected == calculated

    def test_PORTUGESE_BR_should_serialize_to_enum(self):
        expected = Language.PORTUGESE_BR
        calculated = Language['PORTUGESE_BR']
        assert expected == calculated

    def test_PORTUGESE_BR_should_deserialize_to_string(self):
        test = Language.PORTUGESE_BR
        expected = "pt-BR"
        calculated = test.value
        assert expected == calculated

    def test_PORTUGESE_PT_should_serialize_to_enum(self):
        expected = Language.PORTUGESE_PT
        calculated = Language['PORTUGESE_PT']
        assert expected == calculated

    def test_PORTUGESE_PT_should_deserialize_to_string(self):
        test = Language.PORTUGESE_PT
        expected = "pt-PT"
        calculated = test.value
        assert expected == calculated

    def test_RUSSIAN_should_serialize_to_enum(self):
        expected = Language.RUSSIAN
        calculated = Language['RUSSIAN']
        assert expected == calculated

    def test_RUSSIAN_should_deserialize_to_string(self):
        test = Language.RUSSIAN
        expected = "ru-RU"
        calculated = test.value
        assert expected == calculated

    def test_SWEDISH_should_serialize_to_enum(self):
        expected = Language.SWEDISH
        calculated = Language['SWEDISH']
        assert expected == calculated

    def test_SWEDISH_should_deserialize_to_string(self):
        test = Language.SWEDISH
        expected = "sv-SE"
        calculated = test.value
        assert expected == calculated

    def test_CHINESE_CN_should_serialize_to_enum(self):
        expected = Language.CHINESE_CN
        calculated = Language['CHINESE_CN']
        assert expected == calculated

    def test_CHINESE_CN_should_deserialize_to_string(self):
        test = Language.CHINESE_CN
        expected = "zh-CN"
        calculated = test.value
        assert expected == calculated

    def test_CHINESE_HK_should_serialize_to_enum(self):
        expected = Language.CHINESE_HK
        calculated = Language['CHINESE_HK']
        assert expected == calculated

    def test_CHINESE_HK_should_deserialize_to_string(self):
        test = Language.CHINESE_HK
        expected = "zh-HK"
        calculated = test.value
        assert expected == calculated

    def test_CHINESE_TW_should_serialize_to_enum(self):
        expected = Language.CHINESE_TW
        calculated = Language['CHINESE_TW']
        assert expected == calculated

    def test_CHINESE_TW_should_deserialize_to_string(self):
        test = Language.CHINESE_TW
        expected = "zh-TW"
        calculated = test.value
        assert expected == calculated

    
if __name__ == '__main__':
    unittest.main()