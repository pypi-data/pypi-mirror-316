"use strict";(self.webpackChunk_jupyter_suggestions_rtc=self.webpackChunk_jupyter_suggestions_rtc||[]).push([[175],{175:(e,o,t)=>{t.r(o),t.d(o,{default:()=>u});var s=t(966),i=t(228),a=t(352),r=t(597),n=t(262),l=t(602),d=t(990);class c extends s.BaseSuggestionsManager{constructor(e){super(e),this.sourceLiveUpdate=!0,this.name="RTC Suggestion Manager",this._allSharedNotebook=new Map,this._tracker=e.tracker,this._tracker,this._forkManager=e.forkManager,this._drive=e.drive,this._serverUrl=r.URLExt.join(this._drive.serverSettings.wsUrl,"api/collaboration/room"),this._forkManager.forkAdded.connect(this._handleForkAdded,this),this._forkManager.forkDeleted.connect(this._handleForkDeleted,this)}dispose(){this._isDisposed||(this._forkManager.forkAdded.disconnect(this._handleForkAdded),this._forkManager.forkDeleted.disconnect(this._handleForkDeleted),super.dispose())}async getAllSuggestions(e){var o,t,s;const i=e.context.localPath;let r=e.context.model.sharedModel.getState("document_id"),n="json",l="notebook";if(r)[n,l]=r.split(":");else{const e=await(0,a.requestDocSession)(n,l,i);r=`${n}:${l}:${e.fileId}`,this._serverSession=e.sessionId}if(!this._serverSession){const e=await(0,a.requestDocSession)(n,l,i);this._serverSession=e.sessionId}if(this._suggestionsMap.has(i))return this._suggestionsMap.get(i);{const a=await this._forkManager.getAllForks(r),n=new Map,l=null!==(t=null===(o=e.content.model)||void 0===o?void 0:o.cells)&&void 0!==t?t:[],d={};for(const e of l)d[e.id]=e;for(const[e,o]of Object.entries(a)){const t=JSON.parse(null!==(s=o.description)&&void 0!==s?s:"{}"),i=t.cellId;if(!i||!d[i])continue;const a=t.metadata,l={cellModel:await this._cellModelFactory({rootDocId:r,forkRoomId:e,cellId:i,mimeType:d[i].mimeType,forkMeta:t}),originalCellId:i,metadata:null!=a?a:{},type:t.suggestionType};n.has(i)?n.get(i)[e]=l:n.set(i,{[e]:l})}return this._suggestionsMap.set(i,n),n}}async getSuggestion(e){const{notebookPath:o,cellId:t,suggestionId:s}=e;if(this._suggestionsMap.has(o)){const e=this._suggestionsMap.get(o);if(e&&e.has(t))return e.get(t)[s]}}async addSuggestion(e){var o;const{notebook:t,cell:s,author:i,type:a}=e,r=t.context.localPath,n=s.model.id,l=t.context.model.sharedModel.getState("document_id"),d={cellId:n,path:r,mimeType:s.model.mimeType,suggestionType:a,metadata:{author:i}},c=await this._forkManager.createFork({rootId:l,synchronize:!0,description:JSON.stringify(d)});return null!==(o=null==c?void 0:c.fork_roomid)&&void 0!==o?o:""}async acceptSuggestion(e){const{suggestionId:o,cellId:t,notebook:i}=e,a=i.context.localPath,r=await this.getSuggestion({notebookPath:a,cellId:t,suggestionId:o});if(!r)return!1;if(r.type===s.SuggestionType.delete){const e=this._allSharedNotebook.get(o),i=await(0,s.deleteCellById)({sharedModel:e,cellId:t});if(!i)return i}try{return this._removeSharedNotebook(o),await this._forkManager.deleteFork({forkId:o,merge:!0}),!0}catch(e){return console.error(e),!1}}async deleteSuggestion(e){const{suggestionId:o}=e;setTimeout((()=>{if(this._allSharedNotebook.has(o)){this._removeSharedNotebook(o);try{this._forkManager.deleteFork({forkId:o,merge:!1})}catch(e){}}}),0)}async updateSuggestion(e){}_removeSharedNotebook(e){const o=this._allSharedNotebook.get(e);o&&(l.Signal.clearData(o),o.dispose()),this._allSharedNotebook.delete(e)}_handleForkDeleted(e,o){var t;const s=o.fork_info,i=JSON.parse(null!==(t=s.description)&&void 0!==t?t:"{}"),{cellId:a,path:r}=i,n=o.fork_roomid;if(r&&a&&this._suggestionsMap.has(r)){const e=this._suggestionsMap.get(r);e&&e.has(a)&&(delete e.get(a)[n],this._suggestionChanged.emit({notebookPath:r,cellId:a,suggestionId:n,operator:"deleted"}))}}async _handleForkNotebookChanged(e,o,t){var i,a;const{forkCellMimeType:r,forkCellId:n,forkRoomId:l,notebookPath:d}=t,c=(0,s.detectCellChangedEvent)(o);if(c){const{event:o}=c;if("moved"===o){const o=null!==(i=c.movedCells)&&void 0!==i?i:[],t={};[...null!==(a=e.cells)&&void 0!==a?a:[]].forEach((e=>{t[e.id]=e}));for(const e of o)if(e.id===n){const o=(0,s.cellModelFromYCell)({yCell:e,mimeType:r});o&&this._suggestionChanged.emit({operator:"modified",cellId:n,notebookPath:d,suggestionId:l,modifiedData:{cellModel:o}})}}}}async _handleForkAdded(e,o){var t;const s=o.fork_info,i=JSON.parse(null!==(t=s.description)&&void 0!==t?t:"{}"),{cellId:a,path:r,mimeType:n,metadata:l,suggestionType:d}=i,c=s.root_roomid,g=o.fork_roomid;if(!r||!a)return;this._suggestionsMap.has(r)||this._suggestionsMap.set(r,new Map);const h=this._suggestionsMap.get(r);h.has(a)||h.set(a,{});const u=h.get(a);if(u[g])return;const k={originalCellId:a,cellModel:await this._cellModelFactory({rootDocId:c,forkRoomId:g,cellId:a,mimeType:null!=n?n:"text/plain",forkMeta:i}),metadata:null!=l?l:{},type:d};u[g]=k,this._suggestionChanged.emit({notebookPath:r,cellId:a,suggestionId:g,operator:"added"})}async _cellModelFactory(e){const{rootDocId:o,forkRoomId:t,cellId:i,mimeType:a,forkMeta:r}=e,[l,c]=o.split(":"),g=this._drive.sharedModelFactory.documentFactories.get(c),h=new n.PromiseDelegate;if(g){const e=g({path:t,format:l,contentType:c,collaborative:!0});this._allSharedNotebook.set(t,e);const o=(e,o)=>this._handleForkNotebookChanged(e,o,{forkCellMimeType:a,forkCellId:i,forkRoomId:t,notebookPath:r.path,suggestionType:r.suggestionType});e.changed.connect(o),e.disposed.connect((()=>{e.changed.disconnect(o)})),new d.WebsocketProvider(this._serverUrl,t,e.ydoc,{disableBc:!0,params:{sessionId:this._serverSession},awareness:e.awareness}).on("sync",(o=>{if(o){const o=e.cells.filter((e=>e.getId()===i));if(o[0]){const e=o[0],t=(0,s.cellModelFromYCell)({yCell:e,mimeType:a});t?h.resolve(t):h.reject("Invalid cell type")}else h.resolve(null)}}))}else h.reject("Missing factory");return h.promise}}var g=t(717);const h="@jupyter/suggestions-rtc",u=[{id:`${h}:manager`,description:"jupyter_suggestions with jupyter_collaboration backend",autoStart:!0,requires:[i.INotebookTracker],optional:[g.ICollaborativeDrive,s.ISuggestionsManagerRegistryToken,a.IForkManagerToken],activate:(e,o,t,s,i)=>{if(console.log(`${h}:manager is activated`),s&&i&&t){const e=new c({tracker:o,forkManager:i,drive:t});s.register({id:"RTC Suggestion Manager",manager:e})||console.log("Failed to register the RTC suggestion manager")}}}]}}]);