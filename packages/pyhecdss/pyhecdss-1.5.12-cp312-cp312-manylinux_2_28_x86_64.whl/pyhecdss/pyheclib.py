# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyheclib
else:
    import _pyheclib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_intp():
    return _pyheclib.new_intp()

def copy_intp(value):
    return _pyheclib.copy_intp(value)

def delete_intp(obj):
    return _pyheclib.delete_intp(obj)

def intp_assign(obj, value):
    return _pyheclib.intp_assign(obj, value)

def intp_value(obj):
    return _pyheclib.intp_value(obj)

def new_doublep():
    return _pyheclib.new_doublep()

def copy_doublep(value):
    return _pyheclib.copy_doublep(value)

def delete_doublep(obj):
    return _pyheclib.delete_doublep(obj)

def doublep_assign(obj, value):
    return _pyheclib.doublep_assign(obj, value)

def doublep_value(obj):
    return _pyheclib.doublep_value(obj)
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pyheclib.intArray_swiginit(self, _pyheclib.new_intArray(nelements))
    __swig_destroy__ = _pyheclib.delete_intArray

    def __getitem__(self, index):
        return _pyheclib.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyheclib.intArray___setitem__(self, index, value)

    def cast(self):
        return _pyheclib.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pyheclib.intArray_frompointer(t)

# Register intArray in _pyheclib:
_pyheclib.intArray_swigregister(intArray)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _pyheclib.doubleArray_swiginit(self, _pyheclib.new_doubleArray(nelements))
    __swig_destroy__ = _pyheclib.delete_doubleArray

    def __getitem__(self, index):
        return _pyheclib.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _pyheclib.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _pyheclib.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _pyheclib.doubleArray_frompointer(t)

# Register doubleArray in _pyheclib:
_pyheclib.doubleArray_swigregister(doubleArray)

def zcat_(ifltab, icunit, icdunt, inunit, cinstr, labrev, ldosrt, lcdcat, norecs, _cinstr_len):
    return _pyheclib.zcat_(ifltab, icunit, icdunt, inunit, cinstr, labrev, ldosrt, lcdcat, norecs, _cinstr_len)

def fortranclose_(INPUT):
    return _pyheclib.fortranclose_(INPUT)

def fortranflush_(INPUT):
    return _pyheclib.fortranflush_(INPUT)

def fortranopen_(INPUT, filename, _filename_len):
    return _pyheclib.fortranopen_(INPUT, filename, _filename_len)

def zclose_(ifltab):
    return _pyheclib.zclose_(ifltab)

def hec_datjul(cdate):
    return _pyheclib.hec_datjul(cdate)

def hec_zfver(cfname):
    return _pyheclib.hec_zfver(cfname)

def hec_zinqir(ifltab, cflg, calpha, inumb):
    return _pyheclib.hec_zinqir(ifltab, cflg, calpha, inumb)

def hec_zset(cflg, cstr, numb):
    return _pyheclib.hec_zset(cflg, cstr, numb)

def hec_zgintl(intl, chintl, _chintl_len, istat):
    return _pyheclib.hec_zgintl(intl, chintl, _chintl_len, istat)

def hec_zopen(ifltab, cfname):
    return _pyheclib.hec_zopen(ifltab, cfname)

def hec_zsrtsxd(ifltab, cpath, cdate, ctime, numpyvalues, cunits, ctype):
    return _pyheclib.hec_zsrtsxd(ifltab, cpath, cdate, ctime, numpyvalues, cunits, ctype)

def hec_zsitsxd(ifltab, cpath, itimes, dvalues, ibdate, cunits, ctype, inflag):
    return _pyheclib.hec_zsitsxd(ifltab, cpath, itimes, dvalues, ibdate, cunits, ctype, inflag)

def hec_zrrtsxd(ifltab, cpath, cdate, ctime, numpyvalues):
    return _pyheclib.hec_zrrtsxd(ifltab, cpath, cdate, ctime, numpyvalues)

def hec_zritsxd(ifltab, cpath, juls, istime, jule, ietime, itimes, dvalues, inflag):
    return _pyheclib.hec_zritsxd(ifltab, cpath, juls, istime, jule, ietime, itimes, dvalues, inflag)

