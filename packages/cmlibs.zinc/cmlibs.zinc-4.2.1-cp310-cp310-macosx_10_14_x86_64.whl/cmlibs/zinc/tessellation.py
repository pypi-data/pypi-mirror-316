# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tessellation
else:
    import _tessellation

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Tessellation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tessellation.Tessellation_swiginit(self, _tessellation.new_Tessellation(*args))
    __swig_destroy__ = _tessellation.delete_Tessellation
    CHANGE_FLAG_NONE = _tessellation.Tessellation_CHANGE_FLAG_NONE
    CHANGE_FLAG_ADD = _tessellation.Tessellation_CHANGE_FLAG_ADD
    CHANGE_FLAG_REMOVE = _tessellation.Tessellation_CHANGE_FLAG_REMOVE
    CHANGE_FLAG_IDENTIFIER = _tessellation.Tessellation_CHANGE_FLAG_IDENTIFIER
    CHANGE_FLAG_DEFINITION = _tessellation.Tessellation_CHANGE_FLAG_DEFINITION
    CHANGE_FLAG_FULL_RESULT = _tessellation.Tessellation_CHANGE_FLAG_FULL_RESULT
    CHANGE_FLAG_FINAL = _tessellation.Tessellation_CHANGE_FLAG_FINAL

    def isValid(self):
        return _tessellation.Tessellation_isValid(self)

    def getId(self):
        return _tessellation.Tessellation_getId(self)

    def isManaged(self):
        return _tessellation.Tessellation_isManaged(self)

    def setManaged(self, value):
        return _tessellation.Tessellation_setManaged(self, value)

    def getCircleDivisions(self):
        return _tessellation.Tessellation_getCircleDivisions(self)

    def setCircleDivisions(self, circleDivisions):
        return _tessellation.Tessellation_setCircleDivisions(self, circleDivisions)

    def getName(self):
        return _tessellation.Tessellation_getName(self)

    def setName(self, name):
        return _tessellation.Tessellation_setName(self, name)

    def getMinimumDivisions(self, valuesCount):
        return _tessellation.Tessellation_getMinimumDivisions(self, valuesCount)

    def setMinimumDivisions(self, valuesCount):
        return _tessellation.Tessellation_setMinimumDivisions(self, valuesCount)

    def getRefinementFactors(self, valuesCount):
        return _tessellation.Tessellation_getRefinementFactors(self, valuesCount)

    def setRefinementFactors(self, valuesCount):
        return _tessellation.Tessellation_setRefinementFactors(self, valuesCount)

    def __eq__(self, other):
        return _tessellation.Tessellation___eq__(self, other)

# Register Tessellation in _tessellation:
_tessellation.Tessellation_swigregister(Tessellation)

def __eq__(a, b):
    return _tessellation.__eq__(a, b)
class Tessellationiterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tessellation.Tessellationiterator_swiginit(self, _tessellation.new_Tessellationiterator(*args))
    __swig_destroy__ = _tessellation.delete_Tessellationiterator

    def isValid(self):
        return _tessellation.Tessellationiterator_isValid(self)

    def next(self):
        return _tessellation.Tessellationiterator_next(self)

# Register Tessellationiterator in _tessellation:
_tessellation.Tessellationiterator_swigregister(Tessellationiterator)
class Tessellationmodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tessellation.Tessellationmodule_swiginit(self, _tessellation.new_Tessellationmodule(*args))
    __swig_destroy__ = _tessellation.delete_Tessellationmodule

    def isValid(self):
        return _tessellation.Tessellationmodule_isValid(self)

    def getId(self):
        return _tessellation.Tessellationmodule_getId(self)

    def createTessellation(self):
        return _tessellation.Tessellationmodule_createTessellation(self)

    def createTessellationiterator(self):
        return _tessellation.Tessellationmodule_createTessellationiterator(self)

    def findTessellationByName(self, name):
        return _tessellation.Tessellationmodule_findTessellationByName(self, name)

    def beginChange(self):
        return _tessellation.Tessellationmodule_beginChange(self)

    def endChange(self):
        return _tessellation.Tessellationmodule_endChange(self)

    def getDefaultTessellation(self):
        return _tessellation.Tessellationmodule_getDefaultTessellation(self)

    def setDefaultTessellation(self, tessellation):
        return _tessellation.Tessellationmodule_setDefaultTessellation(self, tessellation)

    def getDefaultPointsTessellation(self):
        return _tessellation.Tessellationmodule_getDefaultPointsTessellation(self)

    def setDefaultPointsTessellation(self, tessellation):
        return _tessellation.Tessellationmodule_setDefaultPointsTessellation(self, tessellation)

    def readDescription(self, description):
        return _tessellation.Tessellationmodule_readDescription(self, description)

    def writeDescription(self):
        return _tessellation.Tessellationmodule_writeDescription(self)

    def createTessellationmodulenotifier(self):
        return _tessellation.Tessellationmodule_createTessellationmodulenotifier(self)

# Register Tessellationmodule in _tessellation:
_tessellation.Tessellationmodule_swigregister(Tessellationmodule)
class Tessellationmoduleevent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tessellation.Tessellationmoduleevent_swiginit(self, _tessellation.new_Tessellationmoduleevent(*args))
    __swig_destroy__ = _tessellation.delete_Tessellationmoduleevent

    def isValid(self):
        return _tessellation.Tessellationmoduleevent_isValid(self)

    def getId(self):
        return _tessellation.Tessellationmoduleevent_getId(self)

    def getTessellationChangeFlags(self, tessellation):
        return _tessellation.Tessellationmoduleevent_getTessellationChangeFlags(self, tessellation)

    def getSummaryTessellationChangeFlags(self):
        return _tessellation.Tessellationmoduleevent_getSummaryTessellationChangeFlags(self)

# Register Tessellationmoduleevent in _tessellation:
_tessellation.Tessellationmoduleevent_swigregister(Tessellationmoduleevent)
class Tessellationmodulecallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tessellation.delete_Tessellationmodulecallback

# Register Tessellationmodulecallback in _tessellation:
_tessellation.Tessellationmodulecallback_swigregister(Tessellationmodulecallback)
class Tessellationmodulenotifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tessellation.Tessellationmodulenotifier_swiginit(self, _tessellation.new_Tessellationmodulenotifier(*args))
    __swig_destroy__ = _tessellation.delete_Tessellationmodulenotifier

    def isValid(self):
        return _tessellation.Tessellationmodulenotifier_isValid(self)

    def getId(self):
        return _tessellation.Tessellationmodulenotifier_getId(self)

    def setCallback(self, *args):
        return _tessellation.Tessellationmodulenotifier_setCallback(self, *args)

    def clearCallback(self):
        return _tessellation.Tessellationmodulenotifier_clearCallback(self)

# Register Tessellationmodulenotifier in _tessellation:
_tessellation.Tessellationmodulenotifier_swigregister(Tessellationmodulenotifier)

