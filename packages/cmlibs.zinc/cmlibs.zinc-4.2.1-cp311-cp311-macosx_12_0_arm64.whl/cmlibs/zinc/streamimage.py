# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _streamimage
else:
    import _streamimage

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.stream
class StreaminformationImage(cmlibs.zinc.stream.Streaminformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _streamimage.StreaminformationImage_swiginit(self, _streamimage.new_StreaminformationImage(*args))

    def isValid(self):
        return _streamimage.StreaminformationImage_isValid(self)
    ATTRIBUTE_RAW_WIDTH_PIXELS = _streamimage.StreaminformationImage_ATTRIBUTE_RAW_WIDTH_PIXELS
    ATTRIBUTE_RAW_HEIGHT_PIXELS = _streamimage.StreaminformationImage_ATTRIBUTE_RAW_HEIGHT_PIXELS
    ATTRIBUTE_BITS_PER_COMPONENT = _streamimage.StreaminformationImage_ATTRIBUTE_BITS_PER_COMPONENT
    ATTRIBUTE_COMPRESSION_QUALITY = _streamimage.StreaminformationImage_ATTRIBUTE_COMPRESSION_QUALITY
    FILE_FORMAT_INVALID = _streamimage.StreaminformationImage_FILE_FORMAT_INVALID
    FILE_FORMAT_BMP = _streamimage.StreaminformationImage_FILE_FORMAT_BMP
    FILE_FORMAT_DICOM = _streamimage.StreaminformationImage_FILE_FORMAT_DICOM
    FILE_FORMAT_JPG = _streamimage.StreaminformationImage_FILE_FORMAT_JPG
    FILE_FORMAT_GIF = _streamimage.StreaminformationImage_FILE_FORMAT_GIF
    FILE_FORMAT_PNG = _streamimage.StreaminformationImage_FILE_FORMAT_PNG
    FILE_FORMAT_SGI = _streamimage.StreaminformationImage_FILE_FORMAT_SGI
    FILE_FORMAT_TIFF = _streamimage.StreaminformationImage_FILE_FORMAT_TIFF
    FILE_FORMAT_ANALYZE = _streamimage.StreaminformationImage_FILE_FORMAT_ANALYZE
    FILE_FORMAT_ANALYZE_OBJECT_MAP = _streamimage.StreaminformationImage_FILE_FORMAT_ANALYZE_OBJECT_MAP
    PIXEL_FORMAT_INVALID = _streamimage.StreaminformationImage_PIXEL_FORMAT_INVALID
    PIXEL_FORMAT_LUMINANCE = _streamimage.StreaminformationImage_PIXEL_FORMAT_LUMINANCE
    PIXEL_FORMAT_LUMINANCE_ALPHA = _streamimage.StreaminformationImage_PIXEL_FORMAT_LUMINANCE_ALPHA
    PIXEL_FORMAT_RGB = _streamimage.StreaminformationImage_PIXEL_FORMAT_RGB
    PIXEL_FORMAT_RGBA = _streamimage.StreaminformationImage_PIXEL_FORMAT_RGBA
    PIXEL_FORMAT_ABGR = _streamimage.StreaminformationImage_PIXEL_FORMAT_ABGR
    PIXEL_FORMAT_BGR = _streamimage.StreaminformationImage_PIXEL_FORMAT_BGR

    def setAttributeInteger(self, attribute, value):
        return _streamimage.StreaminformationImage_setAttributeInteger(self, attribute, value)

    def setAttributeReal(self, attribute, value):
        return _streamimage.StreaminformationImage_setAttributeReal(self, attribute, value)

    def setFileFormat(self, imageFileFormat):
        return _streamimage.StreaminformationImage_setFileFormat(self, imageFileFormat)

    def setPixelFormat(self, imagePixelFormat):
        return _streamimage.StreaminformationImage_setPixelFormat(self, imagePixelFormat)
    __swig_destroy__ = _streamimage.delete_StreaminformationImage

# Register StreaminformationImage in _streamimage:
_streamimage.StreaminformationImage_swigregister(StreaminformationImage)

