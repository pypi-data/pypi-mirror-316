# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _font
else:
    import _font

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.graphics
import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.tessellation
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
class Font(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _font.Font_swiginit(self, _font.new_Font(*args))
    __swig_destroy__ = _font.delete_Font
    RENDER_TYPE_INVALID = _font.Font_RENDER_TYPE_INVALID
    RENDER_TYPE_BITMAP = _font.Font_RENDER_TYPE_BITMAP
    RENDER_TYPE_PIXMAP = _font.Font_RENDER_TYPE_PIXMAP
    RENDER_TYPE_POLYGON = _font.Font_RENDER_TYPE_POLYGON
    RENDER_TYPE_OUTLINE = _font.Font_RENDER_TYPE_OUTLINE
    RENDER_TYPE_EXTRUDE = _font.Font_RENDER_TYPE_EXTRUDE
    TYPEFACE_TYPE_INVALID = _font.Font_TYPEFACE_TYPE_INVALID
    TYPEFACE_TYPE_OPENSANS = _font.Font_TYPEFACE_TYPE_OPENSANS

    def isValid(self):
        return _font.Font_isValid(self)

    def getId(self):
        return _font.Font_getId(self)

    def getName(self):
        return _font.Font_getName(self)

    def setName(self, name):
        return _font.Font_setName(self, name)

    def isBold(self):
        return _font.Font_isBold(self)

    def setBold(self, bold):
        return _font.Font_setBold(self, bold)

    def getDepth(self):
        return _font.Font_getDepth(self)

    def setDepth(self, depth):
        return _font.Font_setDepth(self, depth)

    def isItalic(self):
        return _font.Font_isItalic(self)

    def setItalic(self, italic):
        return _font.Font_setItalic(self, italic)

    def getPointSize(self):
        return _font.Font_getPointSize(self)

    def setPointSize(self, size):
        return _font.Font_setPointSize(self, size)

    def getRenderType(self):
        return _font.Font_getRenderType(self)

    def setRenderType(self, renderType):
        return _font.Font_setRenderType(self, renderType)

    def getTypefaceType(self):
        return _font.Font_getTypefaceType(self)

    def setTypefaceType(self, typefaceType):
        return _font.Font_setTypefaceType(self, typefaceType)

    def __eq__(self, other):
        return _font.Font___eq__(self, other)

# Register Font in _font:
_font.Font_swigregister(Font)

def __eq__(*args):
    return _font.__eq__(*args)
class Fontmodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _font.Fontmodule_swiginit(self, _font.new_Fontmodule(*args))
    __swig_destroy__ = _font.delete_Fontmodule

    def isValid(self):
        return _font.Fontmodule_isValid(self)

    def getId(self):
        return _font.Fontmodule_getId(self)

    def createFont(self):
        return _font.Fontmodule_createFont(self)

    def findFontByName(self, name):
        return _font.Fontmodule_findFontByName(self, name)

    def beginChange(self):
        return _font.Fontmodule_beginChange(self)

    def endChange(self):
        return _font.Fontmodule_endChange(self)

    def getDefaultFont(self):
        return _font.Fontmodule_getDefaultFont(self)

    def setDefaultFont(self, font):
        return _font.Fontmodule_setDefaultFont(self, font)

# Register Fontmodule in _font:
_font.Fontmodule_swigregister(Fontmodule)

