# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _stream
else:
    import _stream

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Streamresource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stream.Streamresource_swiginit(self, _stream.new_Streamresource(*args))
    __swig_destroy__ = _stream.delete_Streamresource

    def isValid(self):
        return _stream.Streamresource_isValid(self)

    def getId(self):
        return _stream.Streamresource_getId(self)

    def castFile(self):
        return _stream.Streamresource_castFile(self)

    def castMemory(self):
        return _stream.Streamresource_castMemory(self)

# Register Streamresource in _stream:
_stream.Streamresource_swigregister(Streamresource)

class StreamresourceFile(Streamresource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stream.StreamresourceFile_swiginit(self, _stream.new_StreamresourceFile(*args))

    def getName(self):
        return _stream.StreamresourceFile_getName(self)
    __swig_destroy__ = _stream.delete_StreamresourceFile

# Register StreamresourceFile in _stream:
_stream.StreamresourceFile_swigregister(StreamresourceFile)

class StreamresourceMemory(Streamresource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stream.StreamresourceMemory_swiginit(self, _stream.new_StreamresourceMemory(*args))

    def getBuffer(self):
        return _stream.StreamresourceMemory_getBuffer(self)
    __swig_destroy__ = _stream.delete_StreamresourceMemory

# Register StreamresourceMemory in _stream:
_stream.StreamresourceMemory_swigregister(StreamresourceMemory)

class Streaminformation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _stream.Streaminformation_swiginit(self, _stream.new_Streaminformation(*args))
    DATA_COMPRESSION_TYPE_INVALID = _stream.Streaminformation_DATA_COMPRESSION_TYPE_INVALID
    DATA_COMPRESSION_TYPE_DEFAULT = _stream.Streaminformation_DATA_COMPRESSION_TYPE_DEFAULT
    DATA_COMPRESSION_TYPE_NONE = _stream.Streaminformation_DATA_COMPRESSION_TYPE_NONE
    DATA_COMPRESSION_TYPE_GZIP = _stream.Streaminformation_DATA_COMPRESSION_TYPE_GZIP
    DATA_COMPRESSION_TYPE_BZ2 = _stream.Streaminformation_DATA_COMPRESSION_TYPE_BZ2
    __swig_destroy__ = _stream.delete_Streaminformation

    def isValid(self):
        return _stream.Streaminformation_isValid(self)

    def getId(self):
        return _stream.Streaminformation_getId(self)

    def createStreamresourceFile(self, file_name):
        return _stream.Streaminformation_createStreamresourceFile(self, file_name)

    def createStreamresourceMemory(self):
        return _stream.Streaminformation_createStreamresourceMemory(self)

    def createStreamresourceMemoryBufferCopy(self, buffer):
        return _stream.Streaminformation_createStreamresourceMemoryBufferCopy(self, buffer)

    def getResourceDataCompressionType(self, resource):
        return _stream.Streaminformation_getResourceDataCompressionType(self, resource)

    def setResourceDataCompressionType(self, resource, dataCompressionType):
        return _stream.Streaminformation_setResourceDataCompressionType(self, resource, dataCompressionType)

    def getDataCompressionType(self):
        return _stream.Streaminformation_getDataCompressionType(self)

    def setDataCompressionType(self, dataCompressionType):
        return _stream.Streaminformation_setDataCompressionType(self, dataCompressionType)

    def castImage(self):
        return _stream.Streaminformation_castImage(self)

    def castRegion(self):
        return _stream.Streaminformation_castRegion(self)

    def castScene(self):
        return _stream.Streaminformation_castScene(self)

    def createStreamresourceMemoryBuffer(self, buffer):
        return _stream.Streaminformation_createStreamresourceMemoryBuffer(self, buffer)

# Register Streaminformation in _stream:
_stream.Streaminformation_swigregister(Streaminformation)



