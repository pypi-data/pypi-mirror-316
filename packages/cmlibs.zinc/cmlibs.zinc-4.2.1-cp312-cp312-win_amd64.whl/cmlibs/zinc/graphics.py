# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _graphics
else:
    import _graphics

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.tessellation
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
class Graphics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.Graphics_swiginit(self, _graphics.new_Graphics(*args))
    __swig_destroy__ = _graphics.delete_Graphics

    def isValid(self):
        return _graphics.Graphics_isValid(self)
    BOUNDARY_MODE_INVALID = _graphics.Graphics_BOUNDARY_MODE_INVALID
    BOUNDARY_MODE_ALL = _graphics.Graphics_BOUNDARY_MODE_ALL
    BOUNDARY_MODE_BOUNDARY = _graphics.Graphics_BOUNDARY_MODE_BOUNDARY
    BOUNDARY_MODE_INTERIOR = _graphics.Graphics_BOUNDARY_MODE_INTERIOR
    BOUNDARY_MODE_SUBGROUP_BOUNDARY = _graphics.Graphics_BOUNDARY_MODE_SUBGROUP_BOUNDARY
    BOUNDARY_MODE_SUBGROUP_INTERIOR = _graphics.Graphics_BOUNDARY_MODE_SUBGROUP_INTERIOR
    RENDER_POLYGON_MODE_INVALID = _graphics.Graphics_RENDER_POLYGON_MODE_INVALID
    RENDER_POLYGON_MODE_SHADED = _graphics.Graphics_RENDER_POLYGON_MODE_SHADED
    RENDER_POLYGON_MODE_WIREFRAME = _graphics.Graphics_RENDER_POLYGON_MODE_WIREFRAME
    SELECT_MODE_INVALID = _graphics.Graphics_SELECT_MODE_INVALID
    SELECT_MODE_ON = _graphics.Graphics_SELECT_MODE_ON
    SELECT_MODE_OFF = _graphics.Graphics_SELECT_MODE_OFF
    SELECT_MODE_DRAW_SELECTED = _graphics.Graphics_SELECT_MODE_DRAW_SELECTED
    SELECT_MODE_DRAW_UNSELECTED = _graphics.Graphics_SELECT_MODE_DRAW_UNSELECTED
    TYPE_INVALID = _graphics.Graphics_TYPE_INVALID
    TYPE_POINTS = _graphics.Graphics_TYPE_POINTS
    TYPE_LINES = _graphics.Graphics_TYPE_LINES
    TYPE_SURFACES = _graphics.Graphics_TYPE_SURFACES
    TYPE_CONTOURS = _graphics.Graphics_TYPE_CONTOURS
    TYPE_STREAMLINES = _graphics.Graphics_TYPE_STREAMLINES

    def getId(self):
        return _graphics.Graphics_getId(self)

    def getCoordinateField(self):
        return _graphics.Graphics_getCoordinateField(self)

    def setCoordinateField(self, coordinateField):
        return _graphics.Graphics_setCoordinateField(self, coordinateField)

    def getDataField(self):
        return _graphics.Graphics_getDataField(self)

    def setDataField(self, dataField):
        return _graphics.Graphics_setDataField(self, dataField)

    def getRenderLineWidth(self):
        return _graphics.Graphics_getRenderLineWidth(self)

    def setRenderLineWidth(self, width):
        return _graphics.Graphics_setRenderLineWidth(self, width)

    def getRenderPointSize(self):
        return _graphics.Graphics_getRenderPointSize(self)

    def setRenderPointSize(self, size):
        return _graphics.Graphics_setRenderPointSize(self, size)

    @staticmethod
    def RenderPolygonModeEnumFromString(name):
        return _graphics.Graphics_RenderPolygonModeEnumFromString(name)

    @staticmethod
    def RenderPolygonModeEnumToString(mode):
        return _graphics.Graphics_RenderPolygonModeEnumToString(mode)

    def getRenderPolygonMode(self):
        return _graphics.Graphics_getRenderPolygonMode(self)

    def setRenderPolygonMode(self, renderPolygonMode):
        return _graphics.Graphics_setRenderPolygonMode(self, renderPolygonMode)

    def getScene(self):
        return _graphics.Graphics_getScene(self)

    @staticmethod
    def SelectModeEnumFromString(name):
        return _graphics.Graphics_SelectModeEnumFromString(name)

    @staticmethod
    def SelectModeEnumToString(mode):
        return _graphics.Graphics_SelectModeEnumToString(mode)

    def getSelectMode(self):
        return _graphics.Graphics_getSelectMode(self)

    def setSelectMode(self, selectMode):
        return _graphics.Graphics_setSelectMode(self, selectMode)

    def getSubgroupField(self):
        return _graphics.Graphics_getSubgroupField(self)

    def setSubgroupField(self, subgroupField):
        return _graphics.Graphics_setSubgroupField(self, subgroupField)

    def getTextureCoordinateField(self):
        return _graphics.Graphics_getTextureCoordinateField(self)

    def setTextureCoordinateField(self, textureCoordinateField):
        return _graphics.Graphics_setTextureCoordinateField(self, textureCoordinateField)

    def getMaterial(self):
        return _graphics.Graphics_getMaterial(self)

    def setMaterial(self, material):
        return _graphics.Graphics_setMaterial(self, material)

    def getGraphicslineattributes(self):
        return _graphics.Graphics_getGraphicslineattributes(self)

    def getGraphicspointattributes(self):
        return _graphics.Graphics_getGraphicspointattributes(self)

    def getGraphicssamplingattributes(self):
        return _graphics.Graphics_getGraphicssamplingattributes(self)

    def getSelectedMaterial(self):
        return _graphics.Graphics_getSelectedMaterial(self)

    def setSelectedMaterial(self, material):
        return _graphics.Graphics_setSelectedMaterial(self, material)

    def getSpectrum(self):
        return _graphics.Graphics_getSpectrum(self)

    def setSpectrum(self, spectrum):
        return _graphics.Graphics_setSpectrum(self, spectrum)

    @staticmethod
    def TypeEnumFromString(name):
        return _graphics.Graphics_TypeEnumFromString(name)

    @staticmethod
    def TypeEnumToString(type):
        return _graphics.Graphics_TypeEnumToString(type)

    def getType(self):
        return _graphics.Graphics_getType(self)

    def getTessellation(self):
        return _graphics.Graphics_getTessellation(self)

    def setTessellation(self, tessellation):
        return _graphics.Graphics_setTessellation(self, tessellation)

    def getTessellationField(self):
        return _graphics.Graphics_getTessellationField(self)

    def setTessellationField(self, tessellationField):
        return _graphics.Graphics_setTessellationField(self, tessellationField)

    def getVisibilityFlag(self):
        return _graphics.Graphics_getVisibilityFlag(self)

    def setVisibilityFlag(self, visibilityFlag):
        return _graphics.Graphics_setVisibilityFlag(self, visibilityFlag)

    def getScenecoordinatesystem(self):
        return _graphics.Graphics_getScenecoordinatesystem(self)

    def setScenecoordinatesystem(self, coordinateSystem):
        return _graphics.Graphics_setScenecoordinatesystem(self, coordinateSystem)

    def getFieldDomainType(self):
        return _graphics.Graphics_getFieldDomainType(self)

    def setFieldDomainType(self, domainType):
        return _graphics.Graphics_setFieldDomainType(self, domainType)

    def getName(self):
        return _graphics.Graphics_getName(self)

    def setName(self, name):
        return _graphics.Graphics_setName(self, name)

    @staticmethod
    def BoundaryModeEnumFromString(name):
        return _graphics.Graphics_BoundaryModeEnumFromString(name)

    @staticmethod
    def BoundaryModeEnumToString(mode):
        return _graphics.Graphics_BoundaryModeEnumToString(mode)

    def getBoundaryMode(self):
        return _graphics.Graphics_getBoundaryMode(self)

    def setBoundaryMode(self, boundaryMode):
        return _graphics.Graphics_setBoundaryMode(self, boundaryMode)

    def setElementFaceType(self, faceType):
        return _graphics.Graphics_setElementFaceType(self, faceType)

    def getElementFaceType(self):
        return _graphics.Graphics_getElementFaceType(self)

    def isExterior(self):
        return _graphics.Graphics_isExterior(self)

    def setExterior(self, exterior):
        return _graphics.Graphics_setExterior(self, exterior)

    def castContours(self):
        return _graphics.Graphics_castContours(self)

    def castLines(self):
        return _graphics.Graphics_castLines(self)

    def castPoints(self):
        return _graphics.Graphics_castPoints(self)

    def castStreamlines(self):
        return _graphics.Graphics_castStreamlines(self)

    def castSurfaces(self):
        return _graphics.Graphics_castSurfaces(self)

    def __eq__(self, other):
        return _graphics.Graphics___eq__(self, other)

# Register Graphics in _graphics:
_graphics.Graphics_swigregister(Graphics)

def Graphics_RenderPolygonModeEnumFromString(name):
    return _graphics.Graphics_RenderPolygonModeEnumFromString(name)

def Graphics_RenderPolygonModeEnumToString(mode):
    return _graphics.Graphics_RenderPolygonModeEnumToString(mode)

def Graphics_SelectModeEnumFromString(name):
    return _graphics.Graphics_SelectModeEnumFromString(name)

def Graphics_SelectModeEnumToString(mode):
    return _graphics.Graphics_SelectModeEnumToString(mode)

def Graphics_TypeEnumFromString(name):
    return _graphics.Graphics_TypeEnumFromString(name)

def Graphics_TypeEnumToString(type):
    return _graphics.Graphics_TypeEnumToString(type)

def Graphics_BoundaryModeEnumFromString(name):
    return _graphics.Graphics_BoundaryModeEnumFromString(name)

def Graphics_BoundaryModeEnumToString(mode):
    return _graphics.Graphics_BoundaryModeEnumToString(mode)


def __eq__(*args):
    return _graphics.__eq__(*args)
class GraphicsContours(Graphics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.GraphicsContours_swiginit(self, _graphics.new_GraphicsContours(*args))

    def getIsoscalarField(self):
        return _graphics.GraphicsContours_getIsoscalarField(self)

    def setIsoscalarField(self, field):
        return _graphics.GraphicsContours_setIsoscalarField(self, field)

    def getListIsovalues(self, valuesCount):
        return _graphics.GraphicsContours_getListIsovalues(self, valuesCount)

    def setListIsovalues(self, valuesCount):
        return _graphics.GraphicsContours_setListIsovalues(self, valuesCount)

    def getRangeFirstIsovalue(self):
        return _graphics.GraphicsContours_getRangeFirstIsovalue(self)

    def getRangeLastIsovalue(self):
        return _graphics.GraphicsContours_getRangeLastIsovalue(self)

    def getRangeNumberOfIsovalues(self):
        return _graphics.GraphicsContours_getRangeNumberOfIsovalues(self)

    def setRangeIsovalues(self, numberOfValues, firstIsovalue, lastIsovalue):
        return _graphics.GraphicsContours_setRangeIsovalues(self, numberOfValues, firstIsovalue, lastIsovalue)
    __swig_destroy__ = _graphics.delete_GraphicsContours

# Register GraphicsContours in _graphics:
_graphics.GraphicsContours_swigregister(GraphicsContours)

class GraphicsLines(Graphics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.GraphicsLines_swiginit(self, _graphics.new_GraphicsLines(*args))
    __swig_destroy__ = _graphics.delete_GraphicsLines

# Register GraphicsLines in _graphics:
_graphics.GraphicsLines_swigregister(GraphicsLines)

class GraphicsPoints(Graphics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.GraphicsPoints_swiginit(self, _graphics.new_GraphicsPoints(*args))
    __swig_destroy__ = _graphics.delete_GraphicsPoints

# Register GraphicsPoints in _graphics:
_graphics.GraphicsPoints_swigregister(GraphicsPoints)

class GraphicsStreamlines(Graphics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.GraphicsStreamlines_swiginit(self, _graphics.new_GraphicsStreamlines(*args))
    COLOUR_DATA_TYPE_INVALID = _graphics.GraphicsStreamlines_COLOUR_DATA_TYPE_INVALID
    COLOUR_DATA_TYPE_FIELD = _graphics.GraphicsStreamlines_COLOUR_DATA_TYPE_FIELD
    COLOUR_DATA_TYPE_MAGNITUDE = _graphics.GraphicsStreamlines_COLOUR_DATA_TYPE_MAGNITUDE
    COLOUR_DATA_TYPE_TRAVEL_TIME = _graphics.GraphicsStreamlines_COLOUR_DATA_TYPE_TRAVEL_TIME
    TRACK_DIRECTION_INVALID = _graphics.GraphicsStreamlines_TRACK_DIRECTION_INVALID
    TRACK_DIRECTION_FORWARD = _graphics.GraphicsStreamlines_TRACK_DIRECTION_FORWARD
    TRACK_DIRECTION_REVERSE = _graphics.GraphicsStreamlines_TRACK_DIRECTION_REVERSE

    @staticmethod
    def ColourDataTypeEnumFromString(name):
        return _graphics.GraphicsStreamlines_ColourDataTypeEnumFromString(name)

    @staticmethod
    def ColourDataTypeEnumToString(type):
        return _graphics.GraphicsStreamlines_ColourDataTypeEnumToString(type)

    def getColourDataType(self):
        return _graphics.GraphicsStreamlines_getColourDataType(self)

    def setColourDataType(self, dataType):
        return _graphics.GraphicsStreamlines_setColourDataType(self, dataType)

    def getStreamVectorField(self):
        return _graphics.GraphicsStreamlines_getStreamVectorField(self)

    def setStreamVectorField(self, field):
        return _graphics.GraphicsStreamlines_setStreamVectorField(self, field)

    @staticmethod
    def TrackDirectionEnumFromString(name):
        return _graphics.GraphicsStreamlines_TrackDirectionEnumFromString(name)

    @staticmethod
    def TrackDirectionEnumToString(direction):
        return _graphics.GraphicsStreamlines_TrackDirectionEnumToString(direction)

    def getTrackDirection(self):
        return _graphics.GraphicsStreamlines_getTrackDirection(self)

    def setTrackDirection(self, trackDirection):
        return _graphics.GraphicsStreamlines_setTrackDirection(self, trackDirection)

    def getTrackLength(self):
        return _graphics.GraphicsStreamlines_getTrackLength(self)

    def setTrackLength(self, length):
        return _graphics.GraphicsStreamlines_setTrackLength(self, length)
    __swig_destroy__ = _graphics.delete_GraphicsStreamlines

# Register GraphicsStreamlines in _graphics:
_graphics.GraphicsStreamlines_swigregister(GraphicsStreamlines)

def GraphicsStreamlines_ColourDataTypeEnumFromString(name):
    return _graphics.GraphicsStreamlines_ColourDataTypeEnumFromString(name)

def GraphicsStreamlines_ColourDataTypeEnumToString(type):
    return _graphics.GraphicsStreamlines_ColourDataTypeEnumToString(type)

def GraphicsStreamlines_TrackDirectionEnumFromString(name):
    return _graphics.GraphicsStreamlines_TrackDirectionEnumFromString(name)

def GraphicsStreamlines_TrackDirectionEnumToString(direction):
    return _graphics.GraphicsStreamlines_TrackDirectionEnumToString(direction)

class GraphicsSurfaces(Graphics):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.GraphicsSurfaces_swiginit(self, _graphics.new_GraphicsSurfaces(*args))
    __swig_destroy__ = _graphics.delete_GraphicsSurfaces

# Register GraphicsSurfaces in _graphics:
_graphics.GraphicsSurfaces_swigregister(GraphicsSurfaces)

class Graphicslineattributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.Graphicslineattributes_swiginit(self, _graphics.new_Graphicslineattributes(*args))
    __swig_destroy__ = _graphics.delete_Graphicslineattributes

    def isValid(self):
        return _graphics.Graphicslineattributes_isValid(self)
    SHAPE_TYPE_INVALID = _graphics.Graphicslineattributes_SHAPE_TYPE_INVALID
    SHAPE_TYPE_LINE = _graphics.Graphicslineattributes_SHAPE_TYPE_LINE
    SHAPE_TYPE_RIBBON = _graphics.Graphicslineattributes_SHAPE_TYPE_RIBBON
    SHAPE_TYPE_CIRCLE_EXTRUSION = _graphics.Graphicslineattributes_SHAPE_TYPE_CIRCLE_EXTRUSION
    SHAPE_TYPE_SQUARE_EXTRUSION = _graphics.Graphicslineattributes_SHAPE_TYPE_SQUARE_EXTRUSION

    def getBaseSize(self, valuesCount):
        return _graphics.Graphicslineattributes_getBaseSize(self, valuesCount)

    def setBaseSize(self, valuesCount):
        return _graphics.Graphicslineattributes_setBaseSize(self, valuesCount)

    def getOrientationScaleField(self):
        return _graphics.Graphicslineattributes_getOrientationScaleField(self)

    def setOrientationScaleField(self, orientationScaleField):
        return _graphics.Graphicslineattributes_setOrientationScaleField(self, orientationScaleField)

    def getScaleFactors(self, valuesCount):
        return _graphics.Graphicslineattributes_getScaleFactors(self, valuesCount)

    def setScaleFactors(self, valuesCount):
        return _graphics.Graphicslineattributes_setScaleFactors(self, valuesCount)

    @staticmethod
    def ShapeTypeEnumFromString(name):
        return _graphics.Graphicslineattributes_ShapeTypeEnumFromString(name)

    @staticmethod
    def ShapeTypeEnumToString(type):
        return _graphics.Graphicslineattributes_ShapeTypeEnumToString(type)

    def getShapeType(self):
        return _graphics.Graphicslineattributes_getShapeType(self)

    def setShapeType(self, shapeType):
        return _graphics.Graphicslineattributes_setShapeType(self, shapeType)

# Register Graphicslineattributes in _graphics:
_graphics.Graphicslineattributes_swigregister(Graphicslineattributes)

def Graphicslineattributes_ShapeTypeEnumFromString(name):
    return _graphics.Graphicslineattributes_ShapeTypeEnumFromString(name)

def Graphicslineattributes_ShapeTypeEnumToString(type):
    return _graphics.Graphicslineattributes_ShapeTypeEnumToString(type)

class Graphicspointattributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.Graphicspointattributes_swiginit(self, _graphics.new_Graphicspointattributes(*args))
    __swig_destroy__ = _graphics.delete_Graphicspointattributes

    def isValid(self):
        return _graphics.Graphicspointattributes_isValid(self)

    def getBaseSize(self, valuesCount):
        return _graphics.Graphicspointattributes_getBaseSize(self, valuesCount)

    def setBaseSize(self, valuesCount):
        return _graphics.Graphicspointattributes_setBaseSize(self, valuesCount)

    def getFont(self):
        return _graphics.Graphicspointattributes_getFont(self)

    def setFont(self, font):
        return _graphics.Graphicspointattributes_setFont(self, font)

    def getGlyph(self):
        return _graphics.Graphicspointattributes_getGlyph(self)

    def setGlyph(self, glyph):
        return _graphics.Graphicspointattributes_setGlyph(self, glyph)

    def getGlyphOffset(self, valuesCount):
        return _graphics.Graphicspointattributes_getGlyphOffset(self, valuesCount)

    def setGlyphOffset(self, valuesCount):
        return _graphics.Graphicspointattributes_setGlyphOffset(self, valuesCount)

    def getGlyphRepeatMode(self):
        return _graphics.Graphicspointattributes_getGlyphRepeatMode(self)

    def setGlyphRepeatMode(self, glyphRepeatMode):
        return _graphics.Graphicspointattributes_setGlyphRepeatMode(self, glyphRepeatMode)

    def getGlyphShapeType(self):
        return _graphics.Graphicspointattributes_getGlyphShapeType(self)

    def setGlyphShapeType(self, shapeType):
        return _graphics.Graphicspointattributes_setGlyphShapeType(self, shapeType)

    def getLabelField(self):
        return _graphics.Graphicspointattributes_getLabelField(self)

    def setLabelField(self, labelField):
        return _graphics.Graphicspointattributes_setLabelField(self, labelField)

    def getLabelOffset(self, valuesCount):
        return _graphics.Graphicspointattributes_getLabelOffset(self, valuesCount)

    def setLabelOffset(self, valuesCount):
        return _graphics.Graphicspointattributes_setLabelOffset(self, valuesCount)

    def getLabelText(self, labelNumber):
        return _graphics.Graphicspointattributes_getLabelText(self, labelNumber)

    def setLabelText(self, labelNumber, labelText):
        return _graphics.Graphicspointattributes_setLabelText(self, labelNumber, labelText)

    def getOrientationScaleField(self):
        return _graphics.Graphicspointattributes_getOrientationScaleField(self)

    def setOrientationScaleField(self, orientationScaleField):
        return _graphics.Graphicspointattributes_setOrientationScaleField(self, orientationScaleField)

    def getScaleFactors(self, valuesCount):
        return _graphics.Graphicspointattributes_getScaleFactors(self, valuesCount)

    def setScaleFactors(self, valuesCount):
        return _graphics.Graphicspointattributes_setScaleFactors(self, valuesCount)

    def getSignedScaleField(self):
        return _graphics.Graphicspointattributes_getSignedScaleField(self)

    def setSignedScaleField(self, signedScaleField):
        return _graphics.Graphicspointattributes_setSignedScaleField(self, signedScaleField)

# Register Graphicspointattributes in _graphics:
_graphics.Graphicspointattributes_swigregister(Graphicspointattributes)

class Graphicssamplingattributes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _graphics.Graphicssamplingattributes_swiginit(self, _graphics.new_Graphicssamplingattributes(*args))
    __swig_destroy__ = _graphics.delete_Graphicssamplingattributes

    def isValid(self):
        return _graphics.Graphicssamplingattributes_isValid(self)

    def getDensityField(self):
        return _graphics.Graphicssamplingattributes_getDensityField(self)

    def setDensityField(self, densityField):
        return _graphics.Graphicssamplingattributes_setDensityField(self, densityField)

    def getLocation(self, valuesCount):
        return _graphics.Graphicssamplingattributes_getLocation(self, valuesCount)

    def setLocation(self, valuesCount):
        return _graphics.Graphicssamplingattributes_setLocation(self, valuesCount)

    def getElementPointSamplingMode(self):
        return _graphics.Graphicssamplingattributes_getElementPointSamplingMode(self)

    def setElementPointSamplingMode(self, samplingMode):
        return _graphics.Graphicssamplingattributes_setElementPointSamplingMode(self, samplingMode)

# Register Graphicssamplingattributes in _graphics:
_graphics.Graphicssamplingattributes_swigregister(Graphicssamplingattributes)



