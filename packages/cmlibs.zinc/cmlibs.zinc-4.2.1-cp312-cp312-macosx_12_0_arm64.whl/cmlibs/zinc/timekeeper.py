# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _timekeeper
else:
    import _timekeeper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.timenotifier
class Timekeeper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _timekeeper.Timekeeper_swiginit(self, _timekeeper.new_Timekeeper(*args))
    __swig_destroy__ = _timekeeper.delete_Timekeeper
    PLAY_DIRECTION_INVALID = _timekeeper.Timekeeper_PLAY_DIRECTION_INVALID
    PLAY_DIRECTION_FORWARD = _timekeeper.Timekeeper_PLAY_DIRECTION_FORWARD
    PLAY_DIRECTION_REVERSE = _timekeeper.Timekeeper_PLAY_DIRECTION_REVERSE

    def isValid(self):
        return _timekeeper.Timekeeper_isValid(self)

    def getId(self):
        return _timekeeper.Timekeeper_getId(self)

    def createTimenotifierRegular(self, updateFrequency, timeOffset):
        return _timekeeper.Timekeeper_createTimenotifierRegular(self, updateFrequency, timeOffset)

    def getMaximumTime(self):
        return _timekeeper.Timekeeper_getMaximumTime(self)

    def setMaximumTime(self, maximumTime):
        return _timekeeper.Timekeeper_setMaximumTime(self, maximumTime)

    def getMinimumTime(self):
        return _timekeeper.Timekeeper_getMinimumTime(self)

    def setMinimumTime(self, minimumTime):
        return _timekeeper.Timekeeper_setMinimumTime(self, minimumTime)

    def getTime(self):
        return _timekeeper.Timekeeper_getTime(self)

    def setTime(self, time):
        return _timekeeper.Timekeeper_setTime(self, time)

    def getNextCallbackTime(self, playDirection):
        return _timekeeper.Timekeeper_getNextCallbackTime(self, playDirection)

# Register Timekeeper in _timekeeper:
_timekeeper.Timekeeper_swigregister(Timekeeper)
class Timekeepermodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _timekeeper.Timekeepermodule_swiginit(self, _timekeeper.new_Timekeepermodule(*args))
    __swig_destroy__ = _timekeeper.delete_Timekeepermodule

    def isValid(self):
        return _timekeeper.Timekeepermodule_isValid(self)

    def getId(self):
        return _timekeeper.Timekeepermodule_getId(self)

    def getDefaultTimekeeper(self):
        return _timekeeper.Timekeepermodule_getDefaultTimekeeper(self)

    def readDescription(self, description):
        return _timekeeper.Timekeepermodule_readDescription(self, description)

    def writeDescription(self):
        return _timekeeper.Timekeepermodule_writeDescription(self)

# Register Timekeepermodule in _timekeeper:
_timekeeper.Timekeepermodule_swigregister(Timekeepermodule)

