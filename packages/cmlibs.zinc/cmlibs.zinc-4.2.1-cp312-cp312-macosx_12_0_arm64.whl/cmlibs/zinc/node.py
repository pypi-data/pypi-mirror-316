# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _node
else:
    import _node

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.graphics
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.tessellation
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
class Node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _node.Node_swiginit(self, _node.new_Node(*args))
    CHANGE_FLAG_NONE = _node.Node_CHANGE_FLAG_NONE
    CHANGE_FLAG_ADD = _node.Node_CHANGE_FLAG_ADD
    CHANGE_FLAG_REMOVE = _node.Node_CHANGE_FLAG_REMOVE
    CHANGE_FLAG_IDENTIFIER = _node.Node_CHANGE_FLAG_IDENTIFIER
    CHANGE_FLAG_DEFINITION = _node.Node_CHANGE_FLAG_DEFINITION
    CHANGE_FLAG_FIELD = _node.Node_CHANGE_FLAG_FIELD
    VALUE_LABEL_INVALID = _node.Node_VALUE_LABEL_INVALID
    VALUE_LABEL_VALUE = _node.Node_VALUE_LABEL_VALUE
    VALUE_LABEL_D_DS1 = _node.Node_VALUE_LABEL_D_DS1
    VALUE_LABEL_D_DS2 = _node.Node_VALUE_LABEL_D_DS2
    VALUE_LABEL_D2_DS1DS2 = _node.Node_VALUE_LABEL_D2_DS1DS2
    VALUE_LABEL_D_DS3 = _node.Node_VALUE_LABEL_D_DS3
    VALUE_LABEL_D2_DS1DS3 = _node.Node_VALUE_LABEL_D2_DS1DS3
    VALUE_LABEL_D2_DS2DS3 = _node.Node_VALUE_LABEL_D2_DS2DS3
    VALUE_LABEL_D3_DS1DS2DS3 = _node.Node_VALUE_LABEL_D3_DS1DS2DS3
    __swig_destroy__ = _node.delete_Node

    def isValid(self):
        return _node.Node_isValid(self)

    def getId(self):
        return _node.Node_getId(self)

    def getIdentifier(self):
        return _node.Node_getIdentifier(self)

    def setIdentifier(self, identifier):
        return _node.Node_setIdentifier(self, identifier)

    def getNodeset(self):
        return _node.Node_getNodeset(self)

    def merge(self, nodeTemplate):
        return _node.Node_merge(self, nodeTemplate)

    @staticmethod
    def ValueLabelEnumFromString(name):
        return _node.Node_ValueLabelEnumFromString(name)

    @staticmethod
    def ValueLabelEnumToString(valueLabel):
        return _node.Node_ValueLabelEnumToString(valueLabel)

    def __eq__(self, other):
        return _node.Node___eq__(self, other)

# Register Node in _node:
_node.Node_swigregister(Node)
class Nodeiterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _node.Nodeiterator_swiginit(self, _node.new_Nodeiterator(*args))
    __swig_destroy__ = _node.delete_Nodeiterator

    def isValid(self):
        return _node.Nodeiterator_isValid(self)

    def next(self):
        return _node.Nodeiterator_next(self)

# Register Nodeiterator in _node:
_node.Nodeiterator_swigregister(Nodeiterator)
class Nodetemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _node.Nodetemplate_swiginit(self, _node.new_Nodetemplate(*args))
    __swig_destroy__ = _node.delete_Nodetemplate

    def isValid(self):
        return _node.Nodetemplate_isValid(self)

    def getId(self):
        return _node.Nodetemplate_getId(self)

    def defineField(self, field):
        return _node.Nodetemplate_defineField(self, field)

    def defineFieldFromNode(self, field, node):
        return _node.Nodetemplate_defineFieldFromNode(self, field, node)

    def getTimesequence(self, field):
        return _node.Nodetemplate_getTimesequence(self, field)

    def setTimesequence(self, field, timesequence):
        return _node.Nodetemplate_setTimesequence(self, field, timesequence)

    def getValueNumberOfVersions(self, field, componentNumber, valueLabel):
        return _node.Nodetemplate_getValueNumberOfVersions(self, field, componentNumber, valueLabel)

    def setValueNumberOfVersions(self, field, componentNumber, valueLabel, numberOfVersions):
        return _node.Nodetemplate_setValueNumberOfVersions(self, field, componentNumber, valueLabel, numberOfVersions)

    def removeField(self, field):
        return _node.Nodetemplate_removeField(self, field)

    def undefineField(self, field):
        return _node.Nodetemplate_undefineField(self, field)

# Register Nodetemplate in _node:
_node.Nodetemplate_swigregister(Nodetemplate)
class Nodeset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _node.Nodeset_swiginit(self, _node.new_Nodeset(*args))
    __swig_destroy__ = _node.delete_Nodeset

    def isValid(self):
        return _node.Nodeset_isValid(self)

    def getId(self):
        return _node.Nodeset_getId(self)

    def castGroup(self):
        return _node.Nodeset_castGroup(self)

    def containsNode(self, node):
        return _node.Nodeset_containsNode(self, node)

    def createNodetemplate(self):
        return _node.Nodeset_createNodetemplate(self)

    def createNode(self, identifier, nodeTemplate):
        return _node.Nodeset_createNode(self, identifier, nodeTemplate)

    def createNodeiterator(self):
        return _node.Nodeset_createNodeiterator(self)

    def destroyAllNodes(self):
        return _node.Nodeset_destroyAllNodes(self)

    def destroyNode(self, node):
        return _node.Nodeset_destroyNode(self, node)

    def destroyNodesConditional(self, conditionalField):
        return _node.Nodeset_destroyNodesConditional(self, conditionalField)

    def findNodeByIdentifier(self, identifier):
        return _node.Nodeset_findNodeByIdentifier(self, identifier)

    def getFieldmodule(self):
        return _node.Nodeset_getFieldmodule(self)

    def getMasterNodeset(self):
        return _node.Nodeset_getMasterNodeset(self)

    def getName(self):
        return _node.Nodeset_getName(self)

    def getSize(self):
        return _node.Nodeset_getSize(self)

    def __eq__(self, other):
        return _node.Nodeset___eq__(self, other)

# Register Nodeset in _node:
_node.Nodeset_swigregister(Nodeset)

def __eq__(*args):
    return _node.__eq__(*args)
class NodesetGroup(Nodeset):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _node.NodesetGroup_swiginit(self, _node.new_NodesetGroup(*args))

    def getId(self):
        return _node.NodesetGroup_getId(self)

    def addNode(self, node):
        return _node.NodesetGroup_addNode(self, node)

    def addNodesConditional(self, conditionalField):
        return _node.NodesetGroup_addNodesConditional(self, conditionalField)

    def getFieldGroup(self):
        return _node.NodesetGroup_getFieldGroup(self)

    def removeAllNodes(self):
        return _node.NodesetGroup_removeAllNodes(self)

    def removeNode(self, node):
        return _node.NodesetGroup_removeNode(self, node)

    def removeNodesConditional(self, conditionalField):
        return _node.NodesetGroup_removeNodesConditional(self, conditionalField)
    __swig_destroy__ = _node.delete_NodesetGroup

# Register NodesetGroup in _node:
_node.NodesetGroup_swigregister(NodesetGroup)
class Nodesetchanges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _node.Nodesetchanges_swiginit(self, _node.new_Nodesetchanges(*args))
    __swig_destroy__ = _node.delete_Nodesetchanges

    def isValid(self):
        return _node.Nodesetchanges_isValid(self)

    def getNodeChangeFlags(self, node):
        return _node.Nodesetchanges_getNodeChangeFlags(self, node)

    def getNumberOfChanges(self):
        return _node.Nodesetchanges_getNumberOfChanges(self)

    def getSummaryNodeChangeFlags(self):
        return _node.Nodesetchanges_getSummaryNodeChangeFlags(self)

# Register Nodesetchanges in _node:
_node.Nodesetchanges_swigregister(Nodesetchanges)

