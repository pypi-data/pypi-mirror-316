# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _streamscene
else:
    import _streamscene

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.scene
import cmlibs.zinc.graphics
import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.shader
import cmlibs.zinc.tessellation
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.streamregion
import cmlibs.zinc.stream
import cmlibs.zinc.streamimage
import cmlibs.zinc.selection
import cmlibs.zinc.scenepicker
class StreaminformationScene(cmlibs.zinc.stream.Streaminformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _streamscene.StreaminformationScene_swiginit(self, _streamscene.new_StreaminformationScene(*args))

    def isValid(self):
        return _streamscene.StreaminformationScene_isValid(self)
    IO_DATA_TYPE_INVALID = _streamscene.StreaminformationScene_IO_DATA_TYPE_INVALID
    IO_DATA_TYPE_COLOUR = _streamscene.StreaminformationScene_IO_DATA_TYPE_COLOUR
    IO_DATA_TYPE_PER_VERTEX_VALUE = _streamscene.StreaminformationScene_IO_DATA_TYPE_PER_VERTEX_VALUE
    IO_DATA_TYPE_PER_FACE_VALUE = _streamscene.StreaminformationScene_IO_DATA_TYPE_PER_FACE_VALUE
    IO_FORMAT_INVALID = _streamscene.StreaminformationScene_IO_FORMAT_INVALID
    IO_FORMAT_THREEJS = _streamscene.StreaminformationScene_IO_FORMAT_THREEJS
    IO_FORMAT_DESCRIPTION = _streamscene.StreaminformationScene_IO_FORMAT_DESCRIPTION
    IO_FORMAT_ASCII_STL = _streamscene.StreaminformationScene_IO_FORMAT_ASCII_STL
    IO_FORMAT_WAVEFRONT = _streamscene.StreaminformationScene_IO_FORMAT_WAVEFRONT

    def getScenefilter(self):
        return _streamscene.StreaminformationScene_getScenefilter(self)

    def setScenefilter(self, scenefilter):
        return _streamscene.StreaminformationScene_setScenefilter(self, scenefilter)

    def getIODataType(self):
        return _streamscene.StreaminformationScene_getIODataType(self)

    def setIODataType(self, ioDataType):
        return _streamscene.StreaminformationScene_setIODataType(self, ioDataType)

    def getIOFormat(self):
        return _streamscene.StreaminformationScene_getIOFormat(self)

    def setIOFormat(self, ioFormat):
        return _streamscene.StreaminformationScene_setIOFormat(self, ioFormat)

    def getNumberOfTimeSteps(self):
        return _streamscene.StreaminformationScene_getNumberOfTimeSteps(self)

    def setNumberOfTimeSteps(self, numberOfTimeSteps):
        return _streamscene.StreaminformationScene_setNumberOfTimeSteps(self, numberOfTimeSteps)

    def getFinishTime(self):
        return _streamscene.StreaminformationScene_getFinishTime(self)

    def setFinishTime(self, finishTime):
        return _streamscene.StreaminformationScene_setFinishTime(self, finishTime)

    def getInitialTime(self):
        return _streamscene.StreaminformationScene_getInitialTime(self)

    def setInitialTime(self, initialTime):
        return _streamscene.StreaminformationScene_setInitialTime(self, initialTime)

    def getNumberOfResourcesRequired(self):
        return _streamscene.StreaminformationScene_getNumberOfResourcesRequired(self)

    def setOverwriteSceneGraphics(self, overwrite):
        return _streamscene.StreaminformationScene_setOverwriteSceneGraphics(self, overwrite)

    def getOutputTimeDependentVertices(self):
        return _streamscene.StreaminformationScene_getOutputTimeDependentVertices(self)

    def setOutputTimeDependentVertices(self, outputTimeDependentVertices):
        return _streamscene.StreaminformationScene_setOutputTimeDependentVertices(self, outputTimeDependentVertices)

    def getOutputTimeDependentColours(self):
        return _streamscene.StreaminformationScene_getOutputTimeDependentColours(self)

    def setOutputTimeDependentColours(self, outputTimeDependentColours):
        return _streamscene.StreaminformationScene_setOutputTimeDependentColours(self, outputTimeDependentColours)

    def getOutputTimeDependentNormals(self):
        return _streamscene.StreaminformationScene_getOutputTimeDependentNormals(self)

    def setOutputTimeDependentNormals(self, outputTimeDependentNormals):
        return _streamscene.StreaminformationScene_setOutputTimeDependentNormals(self, outputTimeDependentNormals)

    def getOutputIsInline(self):
        return _streamscene.StreaminformationScene_getOutputIsInline(self)

    def setOutputIsInline(self, outputIsInline):
        return _streamscene.StreaminformationScene_setOutputIsInline(self, outputIsInline)
    __swig_destroy__ = _streamscene.delete_StreaminformationScene

# Register StreaminformationScene in _streamscene:
_streamscene.StreaminformationScene_swigregister(StreaminformationScene)

