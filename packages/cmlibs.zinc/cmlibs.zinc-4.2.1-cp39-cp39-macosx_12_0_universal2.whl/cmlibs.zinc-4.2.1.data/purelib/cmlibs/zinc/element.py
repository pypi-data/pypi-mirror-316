# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _element
else:
    import _element

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.node
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.graphics
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.tessellation
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
class Elementbasis(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.Elementbasis_swiginit(self, _element.new_Elementbasis(*args))
    __swig_destroy__ = _element.delete_Elementbasis

    def isValid(self):
        return _element.Elementbasis_isValid(self)
    FUNCTION_TYPE_INVALID = _element.Elementbasis_FUNCTION_TYPE_INVALID
    FUNCTION_TYPE_CONSTANT = _element.Elementbasis_FUNCTION_TYPE_CONSTANT
    FUNCTION_TYPE_LINEAR_LAGRANGE = _element.Elementbasis_FUNCTION_TYPE_LINEAR_LAGRANGE
    FUNCTION_TYPE_QUADRATIC_LAGRANGE = _element.Elementbasis_FUNCTION_TYPE_QUADRATIC_LAGRANGE
    FUNCTION_TYPE_CUBIC_LAGRANGE = _element.Elementbasis_FUNCTION_TYPE_CUBIC_LAGRANGE
    FUNCTION_TYPE_LINEAR_SIMPLEX = _element.Elementbasis_FUNCTION_TYPE_LINEAR_SIMPLEX
    FUNCTION_TYPE_QUADRATIC_SIMPLEX = _element.Elementbasis_FUNCTION_TYPE_QUADRATIC_SIMPLEX
    FUNCTION_TYPE_CUBIC_HERMITE = _element.Elementbasis_FUNCTION_TYPE_CUBIC_HERMITE
    FUNCTION_TYPE_CUBIC_HERMITE_SERENDIPITY = _element.Elementbasis_FUNCTION_TYPE_CUBIC_HERMITE_SERENDIPITY
    FUNCTION_TYPE_QUADRATIC_HERMITE_LAGRANGE = _element.Elementbasis_FUNCTION_TYPE_QUADRATIC_HERMITE_LAGRANGE
    FUNCTION_TYPE_QUADRATIC_LAGRANGE_HERMITE = _element.Elementbasis_FUNCTION_TYPE_QUADRATIC_LAGRANGE_HERMITE

    def getId(self):
        return _element.Elementbasis_getId(self)

    def getDimension(self):
        return _element.Elementbasis_getDimension(self)

    @staticmethod
    def FunctionTypeEnumFromString(name):
        return _element.Elementbasis_FunctionTypeEnumFromString(name)

    @staticmethod
    def FunctionTypeEnumToString(type):
        return _element.Elementbasis_FunctionTypeEnumToString(type)

    def getFunctionType(self, chartComponent):
        return _element.Elementbasis_getFunctionType(self, chartComponent)

    def setFunctionType(self, chartComponent, functionType):
        return _element.Elementbasis_setFunctionType(self, chartComponent, functionType)

    def getNumberOfNodes(self):
        return _element.Elementbasis_getNumberOfNodes(self)

    def getNumberOfFunctions(self):
        return _element.Elementbasis_getNumberOfFunctions(self)

    def getNumberOfFunctionsPerNode(self, nodeNumber):
        return _element.Elementbasis_getNumberOfFunctionsPerNode(self, nodeNumber)

# Register Elementbasis in _element:
_element.Elementbasis_swigregister(Elementbasis)
class Elementfieldtemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.Elementfieldtemplate_swiginit(self, _element.new_Elementfieldtemplate(*args))
    __swig_destroy__ = _element.delete_Elementfieldtemplate
    PARAMETER_MAPPING_MODE_INVALID = _element.Elementfieldtemplate_PARAMETER_MAPPING_MODE_INVALID
    PARAMETER_MAPPING_MODE_ELEMENT = _element.Elementfieldtemplate_PARAMETER_MAPPING_MODE_ELEMENT
    PARAMETER_MAPPING_MODE_FIELD = _element.Elementfieldtemplate_PARAMETER_MAPPING_MODE_FIELD
    PARAMETER_MAPPING_MODE_NODE = _element.Elementfieldtemplate_PARAMETER_MAPPING_MODE_NODE
    SCALE_FACTOR_TYPE_INVALID = _element.Elementfieldtemplate_SCALE_FACTOR_TYPE_INVALID
    SCALE_FACTOR_TYPE_ELEMENT_GENERAL = _element.Elementfieldtemplate_SCALE_FACTOR_TYPE_ELEMENT_GENERAL
    SCALE_FACTOR_TYPE_ELEMENT_PATCH = _element.Elementfieldtemplate_SCALE_FACTOR_TYPE_ELEMENT_PATCH
    SCALE_FACTOR_TYPE_GLOBAL_GENERAL = _element.Elementfieldtemplate_SCALE_FACTOR_TYPE_GLOBAL_GENERAL
    SCALE_FACTOR_TYPE_GLOBAL_PATCH = _element.Elementfieldtemplate_SCALE_FACTOR_TYPE_GLOBAL_PATCH
    SCALE_FACTOR_TYPE_NODE_GENERAL = _element.Elementfieldtemplate_SCALE_FACTOR_TYPE_NODE_GENERAL
    SCALE_FACTOR_TYPE_NODE_PATCH = _element.Elementfieldtemplate_SCALE_FACTOR_TYPE_NODE_PATCH

    def isValid(self):
        return _element.Elementfieldtemplate_isValid(self)

    def getId(self):
        return _element.Elementfieldtemplate_getId(self)

    def getElementbasis(self):
        return _element.Elementfieldtemplate_getElementbasis(self)

    def getFunctionNumberOfTerms(self, functionNumber):
        return _element.Elementfieldtemplate_getFunctionNumberOfTerms(self, functionNumber)

    def setFunctionNumberOfTerms(self, functionNumber, newNumberOfTerms):
        return _element.Elementfieldtemplate_setFunctionNumberOfTerms(self, functionNumber, newNumberOfTerms)

    def getNumberOfFunctions(self):
        return _element.Elementfieldtemplate_getNumberOfFunctions(self)

    def getNumberOfLocalNodes(self):
        return _element.Elementfieldtemplate_getNumberOfLocalNodes(self)

    def setNumberOfLocalNodes(self, number):
        return _element.Elementfieldtemplate_setNumberOfLocalNodes(self, number)

    def getNumberOfLocalScaleFactors(self):
        return _element.Elementfieldtemplate_getNumberOfLocalScaleFactors(self)

    def setNumberOfLocalScaleFactors(self, number):
        return _element.Elementfieldtemplate_setNumberOfLocalScaleFactors(self, number)

    def getParameterMappingMode(self):
        return _element.Elementfieldtemplate_getParameterMappingMode(self)

    def setParameterMappingMode(self, mode):
        return _element.Elementfieldtemplate_setParameterMappingMode(self, mode)

    def getScaleFactorIdentifier(self, localScaleFactorIndex):
        return _element.Elementfieldtemplate_getScaleFactorIdentifier(self, localScaleFactorIndex)

    def setScaleFactorIdentifier(self, localScaleFactorIndex, identifier):
        return _element.Elementfieldtemplate_setScaleFactorIdentifier(self, localScaleFactorIndex, identifier)

    def getScaleFactorType(self, localScaleFactorIndex):
        return _element.Elementfieldtemplate_getScaleFactorType(self, localScaleFactorIndex)

    def setScaleFactorType(self, localScaleFactorIndex, type):
        return _element.Elementfieldtemplate_setScaleFactorType(self, localScaleFactorIndex, type)

    def getTermLocalNodeIndex(self, functionNumber, term):
        return _element.Elementfieldtemplate_getTermLocalNodeIndex(self, functionNumber, term)

    def getTermNodeValueLabel(self, functionNumber, term):
        return _element.Elementfieldtemplate_getTermNodeValueLabel(self, functionNumber, term)

    def getTermNodeVersion(self, functionNumber, term):
        return _element.Elementfieldtemplate_getTermNodeVersion(self, functionNumber, term)

    def setTermNodeParameter(self, functionNumber, term, localNodeIndex, nodeValueLabel, version):
        return _element.Elementfieldtemplate_setTermNodeParameter(self, functionNumber, term, localNodeIndex, nodeValueLabel, version)

    def getTermScaling(self, functionNumber, term, indexesCount):
        return _element.Elementfieldtemplate_getTermScaling(self, functionNumber, term, indexesCount)

    def setTermScaling(self, functionNumber, term, indexesCount):
        return _element.Elementfieldtemplate_setTermScaling(self, functionNumber, term, indexesCount)

    def validate(self):
        return _element.Elementfieldtemplate_validate(self)

# Register Elementfieldtemplate in _element:
_element.Elementfieldtemplate_swigregister(Elementfieldtemplate)
class Elementtemplate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.Elementtemplate_swiginit(self, _element.new_Elementtemplate(*args))
    __swig_destroy__ = _element.delete_Elementtemplate

    def isValid(self):
        return _element.Elementtemplate_isValid(self)

    def getId(self):
        return _element.Elementtemplate_getId(self)

    def getElementShapeType(self):
        return _element.Elementtemplate_getElementShapeType(self)

    def setElementShapeType(self, shapeType):
        return _element.Elementtemplate_setElementShapeType(self, shapeType)

    def defineField(self, field, componentNumber, eft):
        return _element.Elementtemplate_defineField(self, field, componentNumber, eft)

    def removeField(self, field):
        return _element.Elementtemplate_removeField(self, field)

    def undefineField(self, field):
        return _element.Elementtemplate_undefineField(self, field)

# Register Elementtemplate in _element:
_element.Elementtemplate_swigregister(Elementtemplate)
class Element(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.Element_swiginit(self, _element.new_Element(*args))
    __swig_destroy__ = _element.delete_Element

    def isValid(self):
        return _element.Element_isValid(self)
    CHANGE_FLAG_NONE = _element.Element_CHANGE_FLAG_NONE
    CHANGE_FLAG_ADD = _element.Element_CHANGE_FLAG_ADD
    CHANGE_FLAG_REMOVE = _element.Element_CHANGE_FLAG_REMOVE
    CHANGE_FLAG_IDENTIFIER = _element.Element_CHANGE_FLAG_IDENTIFIER
    CHANGE_FLAG_DEFINITION = _element.Element_CHANGE_FLAG_DEFINITION
    CHANGE_FLAG_FIELD = _element.Element_CHANGE_FLAG_FIELD
    FACE_TYPE_INVALID = _element.Element_FACE_TYPE_INVALID
    FACE_TYPE_ALL = _element.Element_FACE_TYPE_ALL
    FACE_TYPE_ANY_FACE = _element.Element_FACE_TYPE_ANY_FACE
    FACE_TYPE_NO_FACE = _element.Element_FACE_TYPE_NO_FACE
    FACE_TYPE_XI1_0 = _element.Element_FACE_TYPE_XI1_0
    FACE_TYPE_XI1_1 = _element.Element_FACE_TYPE_XI1_1
    FACE_TYPE_XI2_0 = _element.Element_FACE_TYPE_XI2_0
    FACE_TYPE_XI2_1 = _element.Element_FACE_TYPE_XI2_1
    FACE_TYPE_XI3_0 = _element.Element_FACE_TYPE_XI3_0
    FACE_TYPE_XI3_1 = _element.Element_FACE_TYPE_XI3_1
    SHAPE_TYPE_INVALID = _element.Element_SHAPE_TYPE_INVALID
    SHAPE_TYPE_LINE = _element.Element_SHAPE_TYPE_LINE
    SHAPE_TYPE_SQUARE = _element.Element_SHAPE_TYPE_SQUARE
    SHAPE_TYPE_TRIANGLE = _element.Element_SHAPE_TYPE_TRIANGLE
    SHAPE_TYPE_CUBE = _element.Element_SHAPE_TYPE_CUBE
    SHAPE_TYPE_TETRAHEDRON = _element.Element_SHAPE_TYPE_TETRAHEDRON
    SHAPE_TYPE_WEDGE12 = _element.Element_SHAPE_TYPE_WEDGE12
    SHAPE_TYPE_WEDGE13 = _element.Element_SHAPE_TYPE_WEDGE13
    SHAPE_TYPE_WEDGE23 = _element.Element_SHAPE_TYPE_WEDGE23
    POINT_SAMPLING_MODE_INVALID = _element.Element_POINT_SAMPLING_MODE_INVALID
    POINT_SAMPLING_MODE_CELL_CENTRES = _element.Element_POINT_SAMPLING_MODE_CELL_CENTRES
    POINT_SAMPLING_MODE_CELL_CORNERS = _element.Element_POINT_SAMPLING_MODE_CELL_CORNERS
    POINT_SAMPLING_MODE_CELL_POISSON = _element.Element_POINT_SAMPLING_MODE_CELL_POISSON
    POINT_SAMPLING_MODE_SET_LOCATION = _element.Element_POINT_SAMPLING_MODE_SET_LOCATION
    POINT_SAMPLING_MODE_GAUSSIAN_QUADRATURE = _element.Element_POINT_SAMPLING_MODE_GAUSSIAN_QUADRATURE
    QUADRATURE_RULE_INVALID = _element.Element_QUADRATURE_RULE_INVALID
    QUADRATURE_RULE_GAUSSIAN = _element.Element_QUADRATURE_RULE_GAUSSIAN
    QUADRATURE_RULE_MIDPOINT = _element.Element_QUADRATURE_RULE_MIDPOINT

    def getId(self):
        return _element.Element_getId(self)

    def getDimension(self):
        return _element.Element_getDimension(self)

    def getElementfieldtemplate(self, field, componentNumber):
        return _element.Element_getElementfieldtemplate(self, field, componentNumber)

    def getNumberOfFaces(self):
        return _element.Element_getNumberOfFaces(self)

    def getFaceElement(self, faceNumber):
        return _element.Element_getFaceElement(self, faceNumber)

    def getIdentifier(self):
        return _element.Element_getIdentifier(self)

    def setIdentifier(self, identifier):
        return _element.Element_setIdentifier(self, identifier)

    def getMesh(self):
        return _element.Element_getMesh(self)

    def getNode(self, eft, localNodeIndex):
        return _element.Element_getNode(self, eft, localNodeIndex)

    def setNode(self, eft, localNodeIndex, node):
        return _element.Element_setNode(self, eft, localNodeIndex, node)

    def setNodesByIdentifier(self, eft, identifiersCount):
        return _element.Element_setNodesByIdentifier(self, eft, identifiersCount)

    def getNumberOfParents(self):
        return _element.Element_getNumberOfParents(self)

    def getParentElement(self, parentNumber):
        return _element.Element_getParentElement(self, parentNumber)

    def getScaleFactor(self, eft, scaleFactorIndex):
        return _element.Element_getScaleFactor(self, eft, scaleFactorIndex)

    def setScaleFactor(self, eft, scaleFactorIndex, value):
        return _element.Element_setScaleFactor(self, eft, scaleFactorIndex, value)

    def getScaleFactors(self, eft, valuesCount):
        return _element.Element_getScaleFactors(self, eft, valuesCount)

    def setScaleFactors(self, eft, valuesCount):
        return _element.Element_setScaleFactors(self, eft, valuesCount)

    @staticmethod
    def FaceTypeEnumFromString(name):
        return _element.Element_FaceTypeEnumFromString(name)

    @staticmethod
    def FaceTypeEnumToString(type):
        return _element.Element_FaceTypeEnumToString(type)

    @staticmethod
    def PointSamplingModeEnumFromString(name):
        return _element.Element_PointSamplingModeEnumFromString(name)

    @staticmethod
    def PointSamplingModeEnumToString(mode):
        return _element.Element_PointSamplingModeEnumToString(mode)

    @staticmethod
    def QuadratureRuleEnumFromString(name):
        return _element.Element_QuadratureRuleEnumFromString(name)

    @staticmethod
    def QuadratureRuleEnumToString(rule):
        return _element.Element_QuadratureRuleEnumToString(rule)

    @staticmethod
    def ShapeTypeEnumFromString(name):
        return _element.Element_ShapeTypeEnumFromString(name)

    @staticmethod
    def ShapeTypeEnumToString(type):
        return _element.Element_ShapeTypeEnumToString(type)

    def getShapeType(self):
        return _element.Element_getShapeType(self)

    def merge(self, elementTemplate):
        return _element.Element_merge(self, elementTemplate)

    def __eq__(self, other):
        return _element.Element___eq__(self, other)

# Register Element in _element:
_element.Element_swigregister(Element)
class Elementiterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.Elementiterator_swiginit(self, _element.new_Elementiterator(*args))
    __swig_destroy__ = _element.delete_Elementiterator

    def isValid(self):
        return _element.Elementiterator_isValid(self)

    def next(self):
        return _element.Elementiterator_next(self)

# Register Elementiterator in _element:
_element.Elementiterator_swigregister(Elementiterator)
class Mesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.Mesh_swiginit(self, _element.new_Mesh(*args))
    __swig_destroy__ = _element.delete_Mesh

    def isValid(self):
        return _element.Mesh_isValid(self)

    def getId(self):
        return _element.Mesh_getId(self)

    def castGroup(self):
        return _element.Mesh_castGroup(self)

    def containsElement(self, element):
        return _element.Mesh_containsElement(self, element)

    def createElementfieldtemplate(self, basis):
        return _element.Mesh_createElementfieldtemplate(self, basis)

    def createElementtemplate(self):
        return _element.Mesh_createElementtemplate(self)

    def createElement(self, identifier, elementTemplate):
        return _element.Mesh_createElement(self, identifier, elementTemplate)

    def createElementiterator(self):
        return _element.Mesh_createElementiterator(self)

    def defineElement(self, identifier, elementTemplate):
        return _element.Mesh_defineElement(self, identifier, elementTemplate)

    def destroyAllElements(self):
        return _element.Mesh_destroyAllElements(self)

    def destroyElement(self, element):
        return _element.Mesh_destroyElement(self, element)

    def destroyElementsConditional(self, conditionalField):
        return _element.Mesh_destroyElementsConditional(self, conditionalField)

    def findElementByIdentifier(self, identifier):
        return _element.Mesh_findElementByIdentifier(self, identifier)

    def getChartDifferentialoperator(self, order, term):
        return _element.Mesh_getChartDifferentialoperator(self, order, term)

    def getDimension(self):
        return _element.Mesh_getDimension(self)

    def getFaceMesh(self):
        return _element.Mesh_getFaceMesh(self)

    def getFieldmodule(self):
        return _element.Mesh_getFieldmodule(self)

    def getMasterMesh(self):
        return _element.Mesh_getMasterMesh(self)

    def getName(self):
        return _element.Mesh_getName(self)

    def getParentMesh(self):
        return _element.Mesh_getParentMesh(self)

    def getSize(self):
        return _element.Mesh_getSize(self)

    def __eq__(self, other):
        return _element.Mesh___eq__(self, other)

# Register Mesh in _element:
_element.Mesh_swigregister(Mesh)

def __eq__(*args):
    return _element.__eq__(*args)
class MeshGroup(Mesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.MeshGroup_swiginit(self, _element.new_MeshGroup(*args))

    def getId(self):
        return _element.MeshGroup_getId(self)

    def addAdjacentElements(self, sharedDimension):
        return _element.MeshGroup_addAdjacentElements(self, sharedDimension)

    def addElement(self, element):
        return _element.MeshGroup_addElement(self, element)

    def addElementsConditional(self, conditionalField):
        return _element.MeshGroup_addElementsConditional(self, conditionalField)

    def getFieldGroup(self):
        return _element.MeshGroup_getFieldGroup(self)

    def removeAllElements(self):
        return _element.MeshGroup_removeAllElements(self)

    def removeElement(self, element):
        return _element.MeshGroup_removeElement(self, element)

    def removeElementsConditional(self, conditionalField):
        return _element.MeshGroup_removeElementsConditional(self, conditionalField)
    __swig_destroy__ = _element.delete_MeshGroup

# Register MeshGroup in _element:
_element.MeshGroup_swigregister(MeshGroup)
class Meshchanges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _element.Meshchanges_swiginit(self, _element.new_Meshchanges(*args))
    __swig_destroy__ = _element.delete_Meshchanges

    def isValid(self):
        return _element.Meshchanges_isValid(self)

    def getElementChangeFlags(self, element):
        return _element.Meshchanges_getElementChangeFlags(self, element)

    def getNumberOfChanges(self):
        return _element.Meshchanges_getNumberOfChanges(self)

    def getSummaryElementChangeFlags(self):
        return _element.Meshchanges_getSummaryElementChangeFlags(self)

# Register Meshchanges in _element:
_element.Meshchanges_swigregister(Meshchanges)

