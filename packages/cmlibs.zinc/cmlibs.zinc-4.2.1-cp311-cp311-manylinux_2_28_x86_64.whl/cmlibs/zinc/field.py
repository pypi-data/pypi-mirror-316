# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _field
else:
    import _field

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.graphics
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.tessellation
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
class Field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.Field_swiginit(self, _field.new_Field(*args))
    __swig_destroy__ = _field.delete_Field

    def isValid(self):
        return _field.Field_isValid(self)

    def getId(self):
        return _field.Field_getId(self)
    CHANGE_FLAG_NONE = _field.Field_CHANGE_FLAG_NONE
    CHANGE_FLAG_ADD = _field.Field_CHANGE_FLAG_ADD
    CHANGE_FLAG_REMOVE = _field.Field_CHANGE_FLAG_REMOVE
    CHANGE_FLAG_IDENTIFIER = _field.Field_CHANGE_FLAG_IDENTIFIER
    CHANGE_FLAG_DEFINITION = _field.Field_CHANGE_FLAG_DEFINITION
    CHANGE_FLAG_FULL_RESULT = _field.Field_CHANGE_FLAG_FULL_RESULT
    CHANGE_FLAG_PARTIAL_RESULT = _field.Field_CHANGE_FLAG_PARTIAL_RESULT
    CHANGE_FLAG_RESULT = _field.Field_CHANGE_FLAG_RESULT
    CHANGE_FLAG_FINAL = _field.Field_CHANGE_FLAG_FINAL
    COORDINATE_SYSTEM_TYPE_INVALID = _field.Field_COORDINATE_SYSTEM_TYPE_INVALID
    COORDINATE_SYSTEM_TYPE_RECTANGULAR_CARTESIAN = _field.Field_COORDINATE_SYSTEM_TYPE_RECTANGULAR_CARTESIAN
    COORDINATE_SYSTEM_TYPE_CYLINDRICAL_POLAR = _field.Field_COORDINATE_SYSTEM_TYPE_CYLINDRICAL_POLAR
    COORDINATE_SYSTEM_TYPE_SPHERICAL_POLAR = _field.Field_COORDINATE_SYSTEM_TYPE_SPHERICAL_POLAR
    COORDINATE_SYSTEM_TYPE_PROLATE_SPHEROIDAL = _field.Field_COORDINATE_SYSTEM_TYPE_PROLATE_SPHEROIDAL
    COORDINATE_SYSTEM_TYPE_OBLATE_SPHEROIDAL = _field.Field_COORDINATE_SYSTEM_TYPE_OBLATE_SPHEROIDAL
    COORDINATE_SYSTEM_TYPE_FIBRE = _field.Field_COORDINATE_SYSTEM_TYPE_FIBRE
    COORDINATE_SYSTEM_TYPE_NOT_APPLICABLE = _field.Field_COORDINATE_SYSTEM_TYPE_NOT_APPLICABLE
    DOMAIN_TYPE_INVALID = _field.Field_DOMAIN_TYPE_INVALID
    DOMAIN_TYPE_POINT = _field.Field_DOMAIN_TYPE_POINT
    DOMAIN_TYPE_NODES = _field.Field_DOMAIN_TYPE_NODES
    DOMAIN_TYPE_DATAPOINTS = _field.Field_DOMAIN_TYPE_DATAPOINTS
    DOMAIN_TYPE_MESH1D = _field.Field_DOMAIN_TYPE_MESH1D
    DOMAIN_TYPE_MESH2D = _field.Field_DOMAIN_TYPE_MESH2D
    DOMAIN_TYPE_MESH3D = _field.Field_DOMAIN_TYPE_MESH3D
    DOMAIN_TYPE_MESH_HIGHEST_DIMENSION = _field.Field_DOMAIN_TYPE_MESH_HIGHEST_DIMENSION
    VALUE_TYPE_INVALID = _field.Field_VALUE_TYPE_INVALID
    VALUE_TYPE_REAL = _field.Field_VALUE_TYPE_REAL
    VALUE_TYPE_STRING = _field.Field_VALUE_TYPE_STRING
    VALUE_TYPE_MESH_LOCATION = _field.Field_VALUE_TYPE_MESH_LOCATION

    def createFieldassignment(self, sourceField):
        return _field.Field_createFieldassignment(self, sourceField)

    def isManaged(self):
        return _field.Field_isManaged(self)

    def setManaged(self, value):
        return _field.Field_setManaged(self, value)

    def getClassName(self):
        return _field.Field_getClassName(self)

    def hasClassName(self, className):
        return _field.Field_hasClassName(self, className)

    def getComponentName(self, componentNumber):
        return _field.Field_getComponentName(self, componentNumber)

    def setComponentName(self, componentNumber, name):
        return _field.Field_setComponentName(self, componentNumber, name)

    def getCoordinateSystemFocus(self):
        return _field.Field_getCoordinateSystemFocus(self)

    def setCoordinateSystemFocus(self, focus):
        return _field.Field_setCoordinateSystemFocus(self, focus)

    @staticmethod
    def CoordinateSystemTypeEnumFromString(name):
        return _field.Field_CoordinateSystemTypeEnumFromString(name)

    @staticmethod
    def CoordinateSystemTypeEnumToString(type):
        return _field.Field_CoordinateSystemTypeEnumToString(type)

    def getCoordinateSystemType(self):
        return _field.Field_getCoordinateSystemType(self)

    def setCoordinateSystemType(self, coordinateSystemType):
        return _field.Field_setCoordinateSystemType(self, coordinateSystemType)

    @staticmethod
    def DomainTypeEnumFromString(name):
        return _field.Field_DomainTypeEnumFromString(name)

    @staticmethod
    def DomainTypeEnumToString(type):
        return _field.Field_DomainTypeEnumToString(type)

    def getFieldparameters(self):
        return _field.Field_getFieldparameters(self)

    def getNumberOfComponents(self):
        return _field.Field_getNumberOfComponents(self)

    def getName(self):
        return _field.Field_getName(self)

    def setName(self, name):
        return _field.Field_setName(self, name)

    def getNumberOfSourceFields(self):
        return _field.Field_getNumberOfSourceFields(self)

    def getSourceField(self, index):
        return _field.Field_getSourceField(self, index)

    def isTypeCoordinate(self):
        return _field.Field_isTypeCoordinate(self)

    def setTypeCoordinate(self, value):
        return _field.Field_setTypeCoordinate(self, value)

    def getValueType(self):
        return _field.Field_getValueType(self)

    def getFieldmodule(self):
        return _field.Field_getFieldmodule(self)

    def assignMeshLocation(self, cache, element, coordinatesCount):
        return _field.Field_assignMeshLocation(self, cache, element, coordinatesCount)

    def assignReal(self, cache, valuesCount):
        return _field.Field_assignReal(self, cache, valuesCount)

    def assignString(self, cache, stringValue):
        return _field.Field_assignString(self, cache, stringValue)

    def dependsOnField(self, otherField):
        return _field.Field_dependsOnField(self, otherField)

    def evaluateMeshLocation(self, cache, coordinatesCount):
        return _field.Field_evaluateMeshLocation(self, cache, coordinatesCount)

    def evaluateReal(self, cache, valuesCount):
        return _field.Field_evaluateReal(self, cache, valuesCount)

    def evaluateString(self, cache):
        return _field.Field_evaluateString(self, cache)

    def evaluateDerivative(self, differentialOperator, cache, valuesCount):
        return _field.Field_evaluateDerivative(self, differentialOperator, cache, valuesCount)

    def evaluateFieldrange(self, cache, range):
        return _field.Field_evaluateFieldrange(self, cache, range)

    def isDefinedAtLocation(self, cache):
        return _field.Field_isDefinedAtLocation(self, cache)

    def smooth(self, fieldsmoothing):
        return _field.Field_smooth(self, fieldsmoothing)

    def castApply(self):
        return _field.Field_castApply(self)

    def castArgumentReal(self):
        return _field.Field_castArgumentReal(self)

    def castComponent(self):
        return _field.Field_castComponent(self)

    def castConstant(self):
        return _field.Field_castConstant(self)

    def castDerivative(self):
        return _field.Field_castDerivative(self)

    def castEdgeDiscontinuity(self):
        return _field.Field_castEdgeDiscontinuity(self)

    def castEigenvalues(self):
        return _field.Field_castEigenvalues(self)

    def castFindMeshLocation(self):
        return _field.Field_castFindMeshLocation(self)

    def castFiniteElement(self):
        return _field.Field_castFiniteElement(self)

    def castGroup(self):
        return _field.Field_castGroup(self)

    def castImage(self):
        return _field.Field_castImage(self)

    def castImagefilterBinaryThreshold(self):
        return _field.Field_castImagefilterBinaryThreshold(self)

    def castImagefilterDiscreteGaussian(self):
        return _field.Field_castImagefilterDiscreteGaussian(self)

    def castImagefilterHistogram(self):
        return _field.Field_castImagefilterHistogram(self)

    def castImagefilterThreshold(self):
        return _field.Field_castImagefilterThreshold(self)

    def castIsOnFace(self):
        return _field.Field_castIsOnFace(self)

    def castMatrixMultiply(self):
        return _field.Field_castMatrixMultiply(self)

    def castMeshIntegral(self):
        return _field.Field_castMeshIntegral(self)

    def castNodeValue(self):
        return _field.Field_castNodeValue(self)

    def castNodesetOperator(self):
        return _field.Field_castNodesetOperator(self)

    def castStringConstant(self):
        return _field.Field_castStringConstant(self)

    def castStoredMeshLocation(self):
        return _field.Field_castStoredMeshLocation(self)

    def castStoredString(self):
        return _field.Field_castStoredString(self)

    def castTranspose(self):
        return _field.Field_castTranspose(self)

    def __add__(self, operand):
        return _field.Field___add__(self, operand)

    def __sub__(self, operand):
        return _field.Field___sub__(self, operand)

    def __mul__(self, operand):
        return _field.Field___mul__(self, operand)

    def __truediv__(self, *args):
        return _field.Field___truediv__(self, *args)
    __div__ = __truediv__



    def __gt__(self, operand):
        return _field.Field___gt__(self, operand)

    def __lt__(self, operand):
        return _field.Field___lt__(self, operand)

    def __eq__(self, other):
        return _field.Field___eq__(self, other)

# Register Field in _field:
_field.Field_swigregister(Field)

def __eq__(*args):
    return _field.__eq__(*args)
class Fielditerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.Fielditerator_swiginit(self, _field.new_Fielditerator(*args))
    __swig_destroy__ = _field.delete_Fielditerator

    def isValid(self):
        return _field.Fielditerator_isValid(self)

    def next(self):
        return _field.Fielditerator_next(self)

# Register Fielditerator in _field:
_field.Fielditerator_swigregister(Fielditerator)
class FieldApply(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldApply_swiginit(self, _field.new_FieldApply(*args))

    def getBindArgumentField(self, bindIndex):
        return _field.FieldApply_getBindArgumentField(self, bindIndex)

    def getBindArgumentSourceField(self, argumentField):
        return _field.FieldApply_getBindArgumentSourceField(self, argumentField)

    def setBindArgumentSourceField(self, argumentField, sourceField):
        return _field.FieldApply_setBindArgumentSourceField(self, argumentField, sourceField)

    def getNumberOfBindings(self):
        return _field.FieldApply_getNumberOfBindings(self)
    __swig_destroy__ = _field.delete_FieldApply

# Register FieldApply in _field:
_field.FieldApply_swigregister(FieldApply)
class FieldArgumentReal(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldArgumentReal_swiginit(self, _field.new_FieldArgumentReal(*args))
    __swig_destroy__ = _field.delete_FieldArgumentReal

# Register FieldArgumentReal in _field:
_field.FieldArgumentReal_swigregister(FieldArgumentReal)
class FieldIdentity(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldIdentity_swiginit(self, _field.new_FieldIdentity())
    __swig_destroy__ = _field.delete_FieldIdentity

# Register FieldIdentity in _field:
_field.FieldIdentity_swigregister(FieldIdentity)
class FieldComponent(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldComponent_swiginit(self, _field.new_FieldComponent(*args))

    def getComponentIndex(self):
        return _field.FieldComponent_getComponentIndex(self)

    def setComponentIndex(self, componentIndex):
        return _field.FieldComponent_setComponentIndex(self, componentIndex)

    def getSourceComponentIndex(self, index):
        return _field.FieldComponent_getSourceComponentIndex(self, index)

    def setSourceComponentIndex(self, index, sourceComponentIndex):
        return _field.FieldComponent_setSourceComponentIndex(self, index, sourceComponentIndex)
    __swig_destroy__ = _field.delete_FieldComponent

# Register FieldComponent in _field:
_field.FieldComponent_swigregister(FieldComponent)
class FieldConcatenate(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldConcatenate_swiginit(self, _field.new_FieldConcatenate())
    __swig_destroy__ = _field.delete_FieldConcatenate

# Register FieldConcatenate in _field:
_field.FieldConcatenate_swigregister(FieldConcatenate)
class FieldIf(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldIf_swiginit(self, _field.new_FieldIf())
    __swig_destroy__ = _field.delete_FieldIf

# Register FieldIf in _field:
_field.FieldIf_swigregister(FieldIf)
class FieldConstant(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldConstant_swiginit(self, _field.new_FieldConstant(*args))
    __swig_destroy__ = _field.delete_FieldConstant

# Register FieldConstant in _field:
_field.FieldConstant_swigregister(FieldConstant)
class FieldStringConstant(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldStringConstant_swiginit(self, _field.new_FieldStringConstant(*args))
    __swig_destroy__ = _field.delete_FieldStringConstant

# Register FieldStringConstant in _field:
_field.FieldStringConstant_swigregister(FieldStringConstant)
class FieldCoordinateTransformation(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldCoordinateTransformation_swiginit(self, _field.new_FieldCoordinateTransformation())
    __swig_destroy__ = _field.delete_FieldCoordinateTransformation

# Register FieldCoordinateTransformation in _field:
_field.FieldCoordinateTransformation_swigregister(FieldCoordinateTransformation)
class FieldVectorCoordinateTransformation(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldVectorCoordinateTransformation_swiginit(self, _field.new_FieldVectorCoordinateTransformation())
    __swig_destroy__ = _field.delete_FieldVectorCoordinateTransformation

# Register FieldVectorCoordinateTransformation in _field:
_field.FieldVectorCoordinateTransformation_swigregister(FieldVectorCoordinateTransformation)
class FieldDerivative(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldDerivative_swiginit(self, _field.new_FieldDerivative(*args))

    def getXiIndex(self):
        return _field.FieldDerivative_getXiIndex(self)

    def setXiIndex(self, xiIndex):
        return _field.FieldDerivative_setXiIndex(self, xiIndex)
    __swig_destroy__ = _field.delete_FieldDerivative

# Register FieldDerivative in _field:
_field.FieldDerivative_swigregister(FieldDerivative)
class FieldCurl(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldCurl_swiginit(self, _field.new_FieldCurl())
    __swig_destroy__ = _field.delete_FieldCurl

# Register FieldCurl in _field:
_field.FieldCurl_swigregister(FieldCurl)
class FieldDivergence(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldDivergence_swiginit(self, _field.new_FieldDivergence())
    __swig_destroy__ = _field.delete_FieldDivergence

# Register FieldDivergence in _field:
_field.FieldDivergence_swigregister(FieldDivergence)
class FieldGradient(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldGradient_swiginit(self, _field.new_FieldGradient())
    __swig_destroy__ = _field.delete_FieldGradient

# Register FieldGradient in _field:
_field.FieldGradient_swigregister(FieldGradient)
class FieldFibreAxes(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldFibreAxes_swiginit(self, _field.new_FieldFibreAxes())
    __swig_destroy__ = _field.delete_FieldFibreAxes

# Register FieldFibreAxes in _field:
_field.FieldFibreAxes_swigregister(FieldFibreAxes)
class FieldFiniteElement(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldFiniteElement_swiginit(self, _field.new_FieldFiniteElement(*args))

    def getNodeParameters(self, cache, componentNumber, nodeValueLabel, versionNumber, valuesCount):
        return _field.FieldFiniteElement_getNodeParameters(self, cache, componentNumber, nodeValueLabel, versionNumber, valuesCount)

    def setNodeParameters(self, cache, componentNumber, nodeValueLabel, versionNumber, valuesCount):
        return _field.FieldFiniteElement_setNodeParameters(self, cache, componentNumber, nodeValueLabel, versionNumber, valuesCount)

    def hasParametersAtLocation(self, cache):
        return _field.FieldFiniteElement_hasParametersAtLocation(self, cache)
    __swig_destroy__ = _field.delete_FieldFiniteElement

# Register FieldFiniteElement in _field:
_field.FieldFiniteElement_swigregister(FieldFiniteElement)
class FieldEdgeDiscontinuity(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldEdgeDiscontinuity_swiginit(self, _field.new_FieldEdgeDiscontinuity(*args))
    MEASURE_INVALID = _field.FieldEdgeDiscontinuity_MEASURE_INVALID
    MEASURE_C1 = _field.FieldEdgeDiscontinuity_MEASURE_C1
    MEASURE_G1 = _field.FieldEdgeDiscontinuity_MEASURE_G1
    MEASURE_SURFACE_NORMAL = _field.FieldEdgeDiscontinuity_MEASURE_SURFACE_NORMAL

    def getConditionalField(self):
        return _field.FieldEdgeDiscontinuity_getConditionalField(self)

    def setConditionalField(self, conditionalField):
        return _field.FieldEdgeDiscontinuity_setConditionalField(self, conditionalField)

    def getMeasure(self):
        return _field.FieldEdgeDiscontinuity_getMeasure(self)

    def setMeasure(self, measure):
        return _field.FieldEdgeDiscontinuity_setMeasure(self, measure)
    __swig_destroy__ = _field.delete_FieldEdgeDiscontinuity

# Register FieldEdgeDiscontinuity in _field:
_field.FieldEdgeDiscontinuity_swigregister(FieldEdgeDiscontinuity)
class FieldEmbedded(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldEmbedded_swiginit(self, _field.new_FieldEmbedded())
    __swig_destroy__ = _field.delete_FieldEmbedded

# Register FieldEmbedded in _field:
_field.FieldEmbedded_swigregister(FieldEmbedded)
class FieldFindMeshLocation(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldFindMeshLocation_swiginit(self, _field.new_FieldFindMeshLocation(*args))
    SEARCH_MODE_INVALID = _field.FieldFindMeshLocation_SEARCH_MODE_INVALID
    SEARCH_MODE_EXACT = _field.FieldFindMeshLocation_SEARCH_MODE_EXACT
    SEARCH_MODE_NEAREST = _field.FieldFindMeshLocation_SEARCH_MODE_NEAREST

    def getMesh(self):
        return _field.FieldFindMeshLocation_getMesh(self)

    @staticmethod
    def SearchModeEnumFromString(name):
        return _field.FieldFindMeshLocation_SearchModeEnumFromString(name)

    @staticmethod
    def SearchModeEnumToString(mode):
        return _field.FieldFindMeshLocation_SearchModeEnumToString(mode)

    def getSearchMesh(self):
        return _field.FieldFindMeshLocation_getSearchMesh(self)

    def setSearchMesh(self, mesh):
        return _field.FieldFindMeshLocation_setSearchMesh(self, mesh)

    def getSearchMode(self):
        return _field.FieldFindMeshLocation_getSearchMode(self)

    def setSearchMode(self, searchMode):
        return _field.FieldFindMeshLocation_setSearchMode(self, searchMode)
    __swig_destroy__ = _field.delete_FieldFindMeshLocation

# Register FieldFindMeshLocation in _field:
_field.FieldFindMeshLocation_swigregister(FieldFindMeshLocation)
class FieldNodeValue(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldNodeValue_swiginit(self, _field.new_FieldNodeValue(*args))

    def getNodeValueLabel(self):
        return _field.FieldNodeValue_getNodeValueLabel(self)

    def setNodeValueLabel(self, nodeValueLabel):
        return _field.FieldNodeValue_setNodeValueLabel(self, nodeValueLabel)

    def getVersionNumber(self):
        return _field.FieldNodeValue_getVersionNumber(self)

    def setVersionNumber(self, versionNumber):
        return _field.FieldNodeValue_setVersionNumber(self, versionNumber)
    __swig_destroy__ = _field.delete_FieldNodeValue

# Register FieldNodeValue in _field:
_field.FieldNodeValue_swigregister(FieldNodeValue)
class FieldStoredMeshLocation(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldStoredMeshLocation_swiginit(self, _field.new_FieldStoredMeshLocation(*args))

    def getMesh(self):
        return _field.FieldStoredMeshLocation_getMesh(self)
    __swig_destroy__ = _field.delete_FieldStoredMeshLocation

# Register FieldStoredMeshLocation in _field:
_field.FieldStoredMeshLocation_swigregister(FieldStoredMeshLocation)
class FieldStoredString(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldStoredString_swiginit(self, _field.new_FieldStoredString(*args))
    __swig_destroy__ = _field.delete_FieldStoredString

# Register FieldStoredString in _field:
_field.FieldStoredString_swigregister(FieldStoredString)
class FieldIsExterior(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldIsExterior_swiginit(self, _field.new_FieldIsExterior())
    __swig_destroy__ = _field.delete_FieldIsExterior

# Register FieldIsExterior in _field:
_field.FieldIsExterior_swigregister(FieldIsExterior)
class FieldIsOnFace(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldIsOnFace_swiginit(self, _field.new_FieldIsOnFace(*args))

    def getElementFaceType(self):
        return _field.FieldIsOnFace_getElementFaceType(self)

    def setElementFaceType(self, face):
        return _field.FieldIsOnFace_setElementFaceType(self, face)
    __swig_destroy__ = _field.delete_FieldIsOnFace

# Register FieldIsOnFace in _field:
_field.FieldIsOnFace_swigregister(FieldIsOnFace)
class FieldNodeLookup(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNodeLookup_swiginit(self, _field.new_FieldNodeLookup())
    __swig_destroy__ = _field.delete_FieldNodeLookup

# Register FieldNodeLookup in _field:
_field.FieldNodeLookup_swigregister(FieldNodeLookup)
class FieldGroup(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldGroup_swiginit(self, _field.new_FieldGroup(*args))
    SUBELEMENT_HANDLING_MODE_INVALID = _field.FieldGroup_SUBELEMENT_HANDLING_MODE_INVALID
    SUBELEMENT_HANDLING_MODE_NONE = _field.FieldGroup_SUBELEMENT_HANDLING_MODE_NONE
    SUBELEMENT_HANDLING_MODE_FULL = _field.FieldGroup_SUBELEMENT_HANDLING_MODE_FULL

    def isEmpty(self):
        return _field.FieldGroup_isEmpty(self)

    def isEmptyLocal(self):
        return _field.FieldGroup_isEmptyLocal(self)

    def clear(self):
        return _field.FieldGroup_clear(self)

    def clearLocal(self):
        return _field.FieldGroup_clearLocal(self)

    def removeEmptySubobjectGroups(self):
        return _field.FieldGroup_removeEmptySubobjectGroups(self)

    def removeEmptySubgroups(self):
        return _field.FieldGroup_removeEmptySubgroups(self)

    def addLocalRegion(self):
        return _field.FieldGroup_addLocalRegion(self)

    def containsLocalRegion(self):
        return _field.FieldGroup_containsLocalRegion(self)

    def removeLocalRegion(self):
        return _field.FieldGroup_removeLocalRegion(self)

    def addRegion(self, region):
        return _field.FieldGroup_addRegion(self, region)

    def removeRegion(self, region):
        return _field.FieldGroup_removeRegion(self, region)

    def containsRegion(self, region):
        return _field.FieldGroup_containsRegion(self, region)

    def getSubelementHandlingMode(self):
        return _field.FieldGroup_getSubelementHandlingMode(self)

    def setSubelementHandlingMode(self, mode):
        return _field.FieldGroup_setSubelementHandlingMode(self, mode)

    def createSubregionFieldGroup(self, region):
        return _field.FieldGroup_createSubregionFieldGroup(self, region)

    def getSubregionFieldGroup(self, region):
        return _field.FieldGroup_getSubregionFieldGroup(self, region)

    def getOrCreateSubregionFieldGroup(self, region):
        return _field.FieldGroup_getOrCreateSubregionFieldGroup(self, region)

    def removeSubregionFieldGroup(self, subregion):
        return _field.FieldGroup_removeSubregionFieldGroup(self, subregion)

    def createNodesetGroup(self, nodeset):
        return _field.FieldGroup_createNodesetGroup(self, nodeset)

    def getNodesetGroup(self, nodeset):
        return _field.FieldGroup_getNodesetGroup(self, nodeset)

    def getOrCreateNodesetGroup(self, nodeset):
        return _field.FieldGroup_getOrCreateNodesetGroup(self, nodeset)

    def createMeshGroup(self, mesh):
        return _field.FieldGroup_createMeshGroup(self, mesh)

    def getMeshGroup(self, mesh):
        return _field.FieldGroup_getMeshGroup(self, mesh)

    def getOrCreateMeshGroup(self, mesh):
        return _field.FieldGroup_getOrCreateMeshGroup(self, mesh)

    def getFirstNonEmptySubregionFieldGroup(self):
        return _field.FieldGroup_getFirstNonEmptySubregionFieldGroup(self)
    __swig_destroy__ = _field.delete_FieldGroup

# Register FieldGroup in _field:
_field.FieldGroup_swigregister(FieldGroup)
class FieldImage(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldImage_swiginit(self, _field.new_FieldImage(*args))
    COMBINE_MODE_INVALID = _field.FieldImage_COMBINE_MODE_INVALID
    COMBINE_MODE_BLEND = _field.FieldImage_COMBINE_MODE_BLEND
    COMBINE_MODE_DECAL = _field.FieldImage_COMBINE_MODE_DECAL
    COMBINE_MODE_MODULATE = _field.FieldImage_COMBINE_MODE_MODULATE
    COMBINE_MODE_ADD = _field.FieldImage_COMBINE_MODE_ADD
    COMBINE_MODE_ADD_SIGNED = _field.FieldImage_COMBINE_MODE_ADD_SIGNED
    COMBINE_MODE_MODULATE_SCALE_4 = _field.FieldImage_COMBINE_MODE_MODULATE_SCALE_4
    COMBINE_MODE_BLEND_SCALE_4 = _field.FieldImage_COMBINE_MODE_BLEND_SCALE_4
    COMBINE_MODE_SUBTRACT = _field.FieldImage_COMBINE_MODE_SUBTRACT
    COMBINE_MODE_ADD_SCALE_4 = _field.FieldImage_COMBINE_MODE_ADD_SCALE_4
    COMBINE_MODE_SUBTRACT_SCALE_4 = _field.FieldImage_COMBINE_MODE_SUBTRACT_SCALE_4
    COMBINE_MODE_INVERT_ADD_SCALE_4 = _field.FieldImage_COMBINE_MODE_INVERT_ADD_SCALE_4
    COMBINE_MODE_INVERT_SUBTRACT_SCALE_4 = _field.FieldImage_COMBINE_MODE_INVERT_SUBTRACT_SCALE_4
    FILTER_MODE_INVALID = _field.FieldImage_FILTER_MODE_INVALID
    FILTER_MODE_NEAREST = _field.FieldImage_FILTER_MODE_NEAREST
    FILTER_MODE_LINEAR = _field.FieldImage_FILTER_MODE_LINEAR
    FILTER_MODE_NEAREST_MIPMAP_NEAREST = _field.FieldImage_FILTER_MODE_NEAREST_MIPMAP_NEAREST
    FILTER_MODE_LINEAR_MIPMAP_NEAREST = _field.FieldImage_FILTER_MODE_LINEAR_MIPMAP_NEAREST
    FILTER_MODE_LINEAR_MIPMAP_LINEAR = _field.FieldImage_FILTER_MODE_LINEAR_MIPMAP_LINEAR
    HARDWARE_COMPRESSION_MODE_INVALID = _field.FieldImage_HARDWARE_COMPRESSION_MODE_INVALID
    HARDWARE_COMPRESSION_MODE_UNCOMPRESSED = _field.FieldImage_HARDWARE_COMPRESSION_MODE_UNCOMPRESSED
    HARDWARE_COMPRESSION_MODE_AUTOMATIC = _field.FieldImage_HARDWARE_COMPRESSION_MODE_AUTOMATIC
    PIXEL_FORMAT_INVALID = _field.FieldImage_PIXEL_FORMAT_INVALID
    PIXEL_FORMAT_LUMINANCE = _field.FieldImage_PIXEL_FORMAT_LUMINANCE
    PIXEL_FORMAT_LUMINANCE_ALPHA = _field.FieldImage_PIXEL_FORMAT_LUMINANCE_ALPHA
    PIXEL_FORMAT_RGB = _field.FieldImage_PIXEL_FORMAT_RGB
    PIXEL_FORMAT_RGBA = _field.FieldImage_PIXEL_FORMAT_RGBA
    PIXEL_FORMAT_ABGR = _field.FieldImage_PIXEL_FORMAT_ABGR
    PIXEL_FORMAT_BGR = _field.FieldImage_PIXEL_FORMAT_BGR
    WRAP_MODE_INVALID = _field.FieldImage_WRAP_MODE_INVALID
    WRAP_MODE_CLAMP = _field.FieldImage_WRAP_MODE_CLAMP
    WRAP_MODE_REPEAT = _field.FieldImage_WRAP_MODE_REPEAT
    WRAP_MODE_EDGE_CLAMP = _field.FieldImage_WRAP_MODE_EDGE_CLAMP
    WRAP_MODE_BORDER_CLAMP = _field.FieldImage_WRAP_MODE_BORDER_CLAMP
    WRAP_MODE_MIRROR_REPEAT = _field.FieldImage_WRAP_MODE_MIRROR_REPEAT

    def getWidthInPixels(self):
        return _field.FieldImage_getWidthInPixels(self)

    def getHeightInPixels(self):
        return _field.FieldImage_getHeightInPixels(self)

    def getDepthInPixels(self):
        return _field.FieldImage_getDepthInPixels(self)

    def getSizeInPixels(self, valuesCount):
        return _field.FieldImage_getSizeInPixels(self, valuesCount)

    def setSizeInPixels(self, valuesCount):
        return _field.FieldImage_setSizeInPixels(self, valuesCount)

    def getTextureCoordinateWidth(self):
        return _field.FieldImage_getTextureCoordinateWidth(self)

    def getTextureCoordinateHeight(self):
        return _field.FieldImage_getTextureCoordinateHeight(self)

    def getTextureCoordinateDepth(self):
        return _field.FieldImage_getTextureCoordinateDepth(self)

    def getTextureCoordinateSizes(self, valuesCount):
        return _field.FieldImage_getTextureCoordinateSizes(self, valuesCount)

    def setTextureCoordinateWidth(self, width):
        return _field.FieldImage_setTextureCoordinateWidth(self, width)

    def setTextureCoordinateHeight(self, height):
        return _field.FieldImage_setTextureCoordinateHeight(self, height)

    def setTextureCoordinateDepth(self, depth):
        return _field.FieldImage_setTextureCoordinateDepth(self, depth)

    def setTextureCoordinateSizes(self, valuesCount):
        return _field.FieldImage_setTextureCoordinateSizes(self, valuesCount)

    def read(self, streaminformationImage):
        return _field.FieldImage_read(self, streaminformationImage)

    def readFile(self, fileName):
        return _field.FieldImage_readFile(self, fileName)

    def write(self, streaminformationImage):
        return _field.FieldImage_write(self, streaminformationImage)

    def getCombineMode(self):
        return _field.FieldImage_getCombineMode(self)

    def setCombineMode(self, combineMode):
        return _field.FieldImage_setCombineMode(self, combineMode)

    def getDomainField(self):
        return _field.FieldImage_getDomainField(self)

    def setDomainField(self, domainField):
        return _field.FieldImage_setDomainField(self, domainField)

    def getHardwareCompressionMode(self):
        return _field.FieldImage_getHardwareCompressionMode(self)

    def setHardwareCompressionMode(self, hardwareCompressionMode):
        return _field.FieldImage_setHardwareCompressionMode(self, hardwareCompressionMode)

    def getFilterMode(self):
        return _field.FieldImage_getFilterMode(self)

    def setFilterMode(self, filterMode):
        return _field.FieldImage_setFilterMode(self, filterMode)

    def getWrapMode(self):
        return _field.FieldImage_getWrapMode(self)

    def setWrapMode(self, wrapMode):
        return _field.FieldImage_setWrapMode(self, wrapMode)

    def getProperty(self, property):
        return _field.FieldImage_getProperty(self, property)

    def getNumberOfBitsPerComponent(self):
        return _field.FieldImage_getNumberOfBitsPerComponent(self)

    def setNumberOfBitsPerComponent(self, numberOfBits):
        return _field.FieldImage_setNumberOfBitsPerComponent(self, numberOfBits)

    def getPixelFormat(self):
        return _field.FieldImage_getPixelFormat(self)

    def setPixelFormat(self, imagePixelFormat):
        return _field.FieldImage_setPixelFormat(self, imagePixelFormat)

    def getBuffer(self):
        return _field.FieldImage_getBuffer(self)

    def setBuffer(self, buffer):
        return _field.FieldImage_setBuffer(self, buffer)

    def createStreaminformationImage(self):
        return _field.FieldImage_createStreaminformationImage(self)
    __swig_destroy__ = _field.delete_FieldImage

# Register FieldImage in _field:
_field.FieldImage_swigregister(FieldImage)
class FieldImagefilterBinaryDilate(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterBinaryDilate_swiginit(self, _field.new_FieldImagefilterBinaryDilate())
    __swig_destroy__ = _field.delete_FieldImagefilterBinaryDilate

# Register FieldImagefilterBinaryDilate in _field:
_field.FieldImagefilterBinaryDilate_swigregister(FieldImagefilterBinaryDilate)
class FieldImagefilterBinaryErode(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterBinaryErode_swiginit(self, _field.new_FieldImagefilterBinaryErode())
    __swig_destroy__ = _field.delete_FieldImagefilterBinaryErode

# Register FieldImagefilterBinaryErode in _field:
_field.FieldImagefilterBinaryErode_swigregister(FieldImagefilterBinaryErode)
class FieldImagefilterBinaryThreshold(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldImagefilterBinaryThreshold_swiginit(self, _field.new_FieldImagefilterBinaryThreshold(*args))

    def getLowerThreshold(self):
        return _field.FieldImagefilterBinaryThreshold_getLowerThreshold(self)

    def setLowerThreshold(self, lowerThreshold):
        return _field.FieldImagefilterBinaryThreshold_setLowerThreshold(self, lowerThreshold)

    def getUpperThreshold(self):
        return _field.FieldImagefilterBinaryThreshold_getUpperThreshold(self)

    def setUpperThreshold(self, upperThreshold):
        return _field.FieldImagefilterBinaryThreshold_setUpperThreshold(self, upperThreshold)
    __swig_destroy__ = _field.delete_FieldImagefilterBinaryThreshold

# Register FieldImagefilterBinaryThreshold in _field:
_field.FieldImagefilterBinaryThreshold_swigregister(FieldImagefilterBinaryThreshold)
class FieldImagefilterCannyEdgeDetection(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterCannyEdgeDetection_swiginit(self, _field.new_FieldImagefilterCannyEdgeDetection())
    __swig_destroy__ = _field.delete_FieldImagefilterCannyEdgeDetection

# Register FieldImagefilterCannyEdgeDetection in _field:
_field.FieldImagefilterCannyEdgeDetection_swigregister(FieldImagefilterCannyEdgeDetection)
class FieldImagefilterConnectedThreshold(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterConnectedThreshold_swiginit(self, _field.new_FieldImagefilterConnectedThreshold())
    __swig_destroy__ = _field.delete_FieldImagefilterConnectedThreshold

# Register FieldImagefilterConnectedThreshold in _field:
_field.FieldImagefilterConnectedThreshold_swigregister(FieldImagefilterConnectedThreshold)
class FieldImagefilterCurvatureAnisotropicDiffusion(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterCurvatureAnisotropicDiffusion_swiginit(self, _field.new_FieldImagefilterCurvatureAnisotropicDiffusion())
    __swig_destroy__ = _field.delete_FieldImagefilterCurvatureAnisotropicDiffusion

# Register FieldImagefilterCurvatureAnisotropicDiffusion in _field:
_field.FieldImagefilterCurvatureAnisotropicDiffusion_swigregister(FieldImagefilterCurvatureAnisotropicDiffusion)
class FieldImagefilterDiscreteGaussian(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldImagefilterDiscreteGaussian_swiginit(self, _field.new_FieldImagefilterDiscreteGaussian(*args))

    def getVariance(self):
        return _field.FieldImagefilterDiscreteGaussian_getVariance(self)

    def setVariance(self, variance):
        return _field.FieldImagefilterDiscreteGaussian_setVariance(self, variance)

    def getMaxKernelWidth(self):
        return _field.FieldImagefilterDiscreteGaussian_getMaxKernelWidth(self)

    def setMaxKernelWidth(self, maxKernelWidth):
        return _field.FieldImagefilterDiscreteGaussian_setMaxKernelWidth(self, maxKernelWidth)
    __swig_destroy__ = _field.delete_FieldImagefilterDiscreteGaussian

# Register FieldImagefilterDiscreteGaussian in _field:
_field.FieldImagefilterDiscreteGaussian_swigregister(FieldImagefilterDiscreteGaussian)
class FieldImagefilterHistogram(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldImagefilterHistogram_swiginit(self, _field.new_FieldImagefilterHistogram(*args))

    def getComputeMinimumValues(self, valuesCount):
        return _field.FieldImagefilterHistogram_getComputeMinimumValues(self, valuesCount)

    def setComputeMinimumValues(self, valuesCount):
        return _field.FieldImagefilterHistogram_setComputeMinimumValues(self, valuesCount)

    def getComputeMaximumValues(self, valuesCount):
        return _field.FieldImagefilterHistogram_getComputeMaximumValues(self, valuesCount)

    def setComputeMaximumValues(self, valuesCount):
        return _field.FieldImagefilterHistogram_setComputeMaximumValues(self, valuesCount)

    def getNumberOfBins(self, valuesCount):
        return _field.FieldImagefilterHistogram_getNumberOfBins(self, valuesCount)

    def setNumberOfBins(self, valuesCount):
        return _field.FieldImagefilterHistogram_setNumberOfBins(self, valuesCount)

    def getMarginalScale(self):
        return _field.FieldImagefilterHistogram_getMarginalScale(self)

    def setMarginalScale(self, marginalScale):
        return _field.FieldImagefilterHistogram_setMarginalScale(self, marginalScale)
    __swig_destroy__ = _field.delete_FieldImagefilterHistogram

# Register FieldImagefilterHistogram in _field:
_field.FieldImagefilterHistogram_swigregister(FieldImagefilterHistogram)
class FieldImagefilterGradientMagnitudeRecursiveGaussian(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterGradientMagnitudeRecursiveGaussian_swiginit(self, _field.new_FieldImagefilterGradientMagnitudeRecursiveGaussian())
    __swig_destroy__ = _field.delete_FieldImagefilterGradientMagnitudeRecursiveGaussian

# Register FieldImagefilterGradientMagnitudeRecursiveGaussian in _field:
_field.FieldImagefilterGradientMagnitudeRecursiveGaussian_swigregister(FieldImagefilterGradientMagnitudeRecursiveGaussian)
class FieldImagefilterRescaleIntensity(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterRescaleIntensity_swiginit(self, _field.new_FieldImagefilterRescaleIntensity())
    __swig_destroy__ = _field.delete_FieldImagefilterRescaleIntensity

# Register FieldImagefilterRescaleIntensity in _field:
_field.FieldImagefilterRescaleIntensity_swigregister(FieldImagefilterRescaleIntensity)
class FieldImagefilterMean(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterMean_swiginit(self, _field.new_FieldImagefilterMean())
    __swig_destroy__ = _field.delete_FieldImagefilterMean

# Register FieldImagefilterMean in _field:
_field.FieldImagefilterMean_swigregister(FieldImagefilterMean)
class FieldImagefilterSigmoid(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldImagefilterSigmoid_swiginit(self, _field.new_FieldImagefilterSigmoid())
    __swig_destroy__ = _field.delete_FieldImagefilterSigmoid

# Register FieldImagefilterSigmoid in _field:
_field.FieldImagefilterSigmoid_swigregister(FieldImagefilterSigmoid)
class FieldImagefilterThreshold(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldImagefilterThreshold_swiginit(self, _field.new_FieldImagefilterThreshold(*args))
    CONDITION_INVALID = _field.FieldImagefilterThreshold_CONDITION_INVALID
    CONDITION_ABOVE = _field.FieldImagefilterThreshold_CONDITION_ABOVE
    CONDITION_BELOW = _field.FieldImagefilterThreshold_CONDITION_BELOW
    CONDITION_OUTSIDE = _field.FieldImagefilterThreshold_CONDITION_OUTSIDE

    def getCondition(self):
        return _field.FieldImagefilterThreshold_getCondition(self)

    def setCondition(self, condition):
        return _field.FieldImagefilterThreshold_setCondition(self, condition)

    def getOutsideValue(self):
        return _field.FieldImagefilterThreshold_getOutsideValue(self)

    def setOutsideValue(self, outsideValue):
        return _field.FieldImagefilterThreshold_setOutsideValue(self, outsideValue)

    def getLowerThreshold(self):
        return _field.FieldImagefilterThreshold_getLowerThreshold(self)

    def setLowerThreshold(self, lowerValue):
        return _field.FieldImagefilterThreshold_setLowerThreshold(self, lowerValue)

    def getUpperThreshold(self):
        return _field.FieldImagefilterThreshold_getUpperThreshold(self)

    def setUpperThreshold(self, upperValue):
        return _field.FieldImagefilterThreshold_setUpperThreshold(self, upperValue)
    __swig_destroy__ = _field.delete_FieldImagefilterThreshold

# Register FieldImagefilterThreshold in _field:
_field.FieldImagefilterThreshold_swigregister(FieldImagefilterThreshold)
class FieldAnd(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldAnd_swiginit(self, _field.new_FieldAnd())
    __swig_destroy__ = _field.delete_FieldAnd

# Register FieldAnd in _field:
_field.FieldAnd_swigregister(FieldAnd)
class FieldEqualTo(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldEqualTo_swiginit(self, _field.new_FieldEqualTo())
    __swig_destroy__ = _field.delete_FieldEqualTo

# Register FieldEqualTo in _field:
_field.FieldEqualTo_swigregister(FieldEqualTo)
class FieldGreaterThan(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldGreaterThan_swiginit(self, _field.new_FieldGreaterThan())
    __swig_destroy__ = _field.delete_FieldGreaterThan

# Register FieldGreaterThan in _field:
_field.FieldGreaterThan_swigregister(FieldGreaterThan)

def __gt__(operand1, operand2):
    return _field.__gt__(operand1, operand2)
class FieldIsDefined(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldIsDefined_swiginit(self, _field.new_FieldIsDefined())
    __swig_destroy__ = _field.delete_FieldIsDefined

# Register FieldIsDefined in _field:
_field.FieldIsDefined_swigregister(FieldIsDefined)
class FieldLessThan(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldLessThan_swiginit(self, _field.new_FieldLessThan())
    __swig_destroy__ = _field.delete_FieldLessThan

# Register FieldLessThan in _field:
_field.FieldLessThan_swigregister(FieldLessThan)

def __lt__(operand1, operand2):
    return _field.__lt__(operand1, operand2)
class FieldOr(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldOr_swiginit(self, _field.new_FieldOr())
    __swig_destroy__ = _field.delete_FieldOr

# Register FieldOr in _field:
_field.FieldOr_swigregister(FieldOr)
class FieldNot(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNot_swiginit(self, _field.new_FieldNot())
    __swig_destroy__ = _field.delete_FieldNot

# Register FieldNot in _field:
_field.FieldNot_swigregister(FieldNot)
class FieldXor(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldXor_swiginit(self, _field.new_FieldXor())
    __swig_destroy__ = _field.delete_FieldXor

# Register FieldXor in _field:
_field.FieldXor_swigregister(FieldXor)
class FieldDeterminant(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldDeterminant_swiginit(self, _field.new_FieldDeterminant())
    __swig_destroy__ = _field.delete_FieldDeterminant

# Register FieldDeterminant in _field:
_field.FieldDeterminant_swigregister(FieldDeterminant)
class FieldEigenvalues(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldEigenvalues_swiginit(self, _field.new_FieldEigenvalues(*args))
    __swig_destroy__ = _field.delete_FieldEigenvalues

# Register FieldEigenvalues in _field:
_field.FieldEigenvalues_swigregister(FieldEigenvalues)
class FieldEigenvectors(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldEigenvectors_swiginit(self, _field.new_FieldEigenvectors())
    __swig_destroy__ = _field.delete_FieldEigenvectors

# Register FieldEigenvectors in _field:
_field.FieldEigenvectors_swigregister(FieldEigenvectors)
class FieldMatrixInvert(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldMatrixInvert_swiginit(self, _field.new_FieldMatrixInvert())
    __swig_destroy__ = _field.delete_FieldMatrixInvert

# Register FieldMatrixInvert in _field:
_field.FieldMatrixInvert_swigregister(FieldMatrixInvert)
class FieldMatrixMultiply(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldMatrixMultiply_swiginit(self, _field.new_FieldMatrixMultiply(*args))

    def getNumberOfRows(self):
        return _field.FieldMatrixMultiply_getNumberOfRows(self)
    __swig_destroy__ = _field.delete_FieldMatrixMultiply

# Register FieldMatrixMultiply in _field:
_field.FieldMatrixMultiply_swigregister(FieldMatrixMultiply)
class FieldProjection(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldProjection_swiginit(self, _field.new_FieldProjection())
    __swig_destroy__ = _field.delete_FieldProjection

# Register FieldProjection in _field:
_field.FieldProjection_swigregister(FieldProjection)
class FieldTranspose(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldTranspose_swiginit(self, _field.new_FieldTranspose(*args))

    def getSourceNumberOfRows(self):
        return _field.FieldTranspose_getSourceNumberOfRows(self)

    def setSourceNumberOfRows(self, sourceNumberOfRows):
        return _field.FieldTranspose_setSourceNumberOfRows(self, sourceNumberOfRows)
    __swig_destroy__ = _field.delete_FieldTranspose

# Register FieldTranspose in _field:
_field.FieldTranspose_swigregister(FieldTranspose)
class FieldMeshIntegral(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldMeshIntegral_swiginit(self, _field.new_FieldMeshIntegral(*args))

    def getMesh(self):
        return _field.FieldMeshIntegral_getMesh(self)

    def setMesh(self, mesh):
        return _field.FieldMeshIntegral_setMesh(self, mesh)

    def getNumbersOfPoints(self, valuesCount):
        return _field.FieldMeshIntegral_getNumbersOfPoints(self, valuesCount)

    def setNumbersOfPoints(self, valuesCount):
        return _field.FieldMeshIntegral_setNumbersOfPoints(self, valuesCount)

    def getElementQuadratureRule(self):
        return _field.FieldMeshIntegral_getElementQuadratureRule(self)

    def setElementQuadratureRule(self, quadratureRule):
        return _field.FieldMeshIntegral_setElementQuadratureRule(self, quadratureRule)
    __swig_destroy__ = _field.delete_FieldMeshIntegral

# Register FieldMeshIntegral in _field:
_field.FieldMeshIntegral_swigregister(FieldMeshIntegral)
class FieldMeshIntegralSquares(FieldMeshIntegral):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldMeshIntegralSquares_swiginit(self, _field.new_FieldMeshIntegralSquares())
    __swig_destroy__ = _field.delete_FieldMeshIntegralSquares

# Register FieldMeshIntegralSquares in _field:
_field.FieldMeshIntegralSquares_swigregister(FieldMeshIntegralSquares)
class FieldNodesetOperator(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _field.FieldNodesetOperator_swiginit(self, _field.new_FieldNodesetOperator(*args))

    def getElementMapField(self):
        return _field.FieldNodesetOperator_getElementMapField(self)

    def setElementMapField(self, elementMapField):
        return _field.FieldNodesetOperator_setElementMapField(self, elementMapField)

    def getNodeset(self):
        return _field.FieldNodesetOperator_getNodeset(self)

    def setNodeset(self, nodeset):
        return _field.FieldNodesetOperator_setNodeset(self, nodeset)
    __swig_destroy__ = _field.delete_FieldNodesetOperator

# Register FieldNodesetOperator in _field:
_field.FieldNodesetOperator_swigregister(FieldNodesetOperator)
class FieldNodesetSum(FieldNodesetOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNodesetSum_swiginit(self, _field.new_FieldNodesetSum())
    __swig_destroy__ = _field.delete_FieldNodesetSum

# Register FieldNodesetSum in _field:
_field.FieldNodesetSum_swigregister(FieldNodesetSum)
class FieldNodesetMean(FieldNodesetOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNodesetMean_swiginit(self, _field.new_FieldNodesetMean())
    __swig_destroy__ = _field.delete_FieldNodesetMean

# Register FieldNodesetMean in _field:
_field.FieldNodesetMean_swigregister(FieldNodesetMean)
class FieldNodesetSumSquares(FieldNodesetOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNodesetSumSquares_swiginit(self, _field.new_FieldNodesetSumSquares())
    __swig_destroy__ = _field.delete_FieldNodesetSumSquares

# Register FieldNodesetSumSquares in _field:
_field.FieldNodesetSumSquares_swigregister(FieldNodesetSumSquares)
class FieldNodesetMeanSquares(FieldNodesetOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNodesetMeanSquares_swiginit(self, _field.new_FieldNodesetMeanSquares())
    __swig_destroy__ = _field.delete_FieldNodesetMeanSquares

# Register FieldNodesetMeanSquares in _field:
_field.FieldNodesetMeanSquares_swigregister(FieldNodesetMeanSquares)
class FieldNodesetMinimum(FieldNodesetOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNodesetMinimum_swiginit(self, _field.new_FieldNodesetMinimum())
    __swig_destroy__ = _field.delete_FieldNodesetMinimum

# Register FieldNodesetMinimum in _field:
_field.FieldNodesetMinimum_swigregister(FieldNodesetMinimum)
class FieldNodesetMaximum(FieldNodesetOperator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNodesetMaximum_swiginit(self, _field.new_FieldNodesetMaximum())
    __swig_destroy__ = _field.delete_FieldNodesetMaximum

# Register FieldNodesetMaximum in _field:
_field.FieldNodesetMaximum_swigregister(FieldNodesetMaximum)
class FieldSceneviewerProjection(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldSceneviewerProjection_swiginit(self, _field.new_FieldSceneviewerProjection())
    __swig_destroy__ = _field.delete_FieldSceneviewerProjection

# Register FieldSceneviewerProjection in _field:
_field.FieldSceneviewerProjection_swigregister(FieldSceneviewerProjection)
class FieldCrossProduct(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldCrossProduct_swiginit(self, _field.new_FieldCrossProduct())
    __swig_destroy__ = _field.delete_FieldCrossProduct

# Register FieldCrossProduct in _field:
_field.FieldCrossProduct_swigregister(FieldCrossProduct)
class FieldDotProduct(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldDotProduct_swiginit(self, _field.new_FieldDotProduct())
    __swig_destroy__ = _field.delete_FieldDotProduct

# Register FieldDotProduct in _field:
_field.FieldDotProduct_swigregister(FieldDotProduct)
class FieldMagnitude(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldMagnitude_swiginit(self, _field.new_FieldMagnitude())
    __swig_destroy__ = _field.delete_FieldMagnitude

# Register FieldMagnitude in _field:
_field.FieldMagnitude_swigregister(FieldMagnitude)
class FieldNormalise(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldNormalise_swiginit(self, _field.new_FieldNormalise())
    __swig_destroy__ = _field.delete_FieldNormalise

# Register FieldNormalise in _field:
_field.FieldNormalise_swigregister(FieldNormalise)
class FieldSumComponents(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldSumComponents_swiginit(self, _field.new_FieldSumComponents())
    __swig_destroy__ = _field.delete_FieldSumComponents

# Register FieldSumComponents in _field:
_field.FieldSumComponents_swigregister(FieldSumComponents)
class FieldTimeLookup(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldTimeLookup_swiginit(self, _field.new_FieldTimeLookup())
    __swig_destroy__ = _field.delete_FieldTimeLookup

# Register FieldTimeLookup in _field:
_field.FieldTimeLookup_swigregister(FieldTimeLookup)
class FieldTimeValue(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldTimeValue_swiginit(self, _field.new_FieldTimeValue())
    __swig_destroy__ = _field.delete_FieldTimeValue

# Register FieldTimeValue in _field:
_field.FieldTimeValue_swigregister(FieldTimeValue)
class FieldSin(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldSin_swiginit(self, _field.new_FieldSin())
    __swig_destroy__ = _field.delete_FieldSin

# Register FieldSin in _field:
_field.FieldSin_swigregister(FieldSin)
class FieldCos(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldCos_swiginit(self, _field.new_FieldCos())
    __swig_destroy__ = _field.delete_FieldCos

# Register FieldCos in _field:
_field.FieldCos_swigregister(FieldCos)
class FieldTan(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldTan_swiginit(self, _field.new_FieldTan())
    __swig_destroy__ = _field.delete_FieldTan

# Register FieldTan in _field:
_field.FieldTan_swigregister(FieldTan)
class FieldAsin(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldAsin_swiginit(self, _field.new_FieldAsin())
    __swig_destroy__ = _field.delete_FieldAsin

# Register FieldAsin in _field:
_field.FieldAsin_swigregister(FieldAsin)
class FieldAcos(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldAcos_swiginit(self, _field.new_FieldAcos())
    __swig_destroy__ = _field.delete_FieldAcos

# Register FieldAcos in _field:
_field.FieldAcos_swigregister(FieldAcos)
class FieldAtan(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldAtan_swiginit(self, _field.new_FieldAtan())
    __swig_destroy__ = _field.delete_FieldAtan

# Register FieldAtan in _field:
_field.FieldAtan_swigregister(FieldAtan)
class FieldAtan2(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldAtan2_swiginit(self, _field.new_FieldAtan2())
    __swig_destroy__ = _field.delete_FieldAtan2

# Register FieldAtan2 in _field:
_field.FieldAtan2_swigregister(FieldAtan2)
class FieldAdd(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldAdd_swiginit(self, _field.new_FieldAdd())
    __swig_destroy__ = _field.delete_FieldAdd

# Register FieldAdd in _field:
_field.FieldAdd_swigregister(FieldAdd)

def __add__(operand1, operand2):
    return _field.__add__(operand1, operand2)
class FieldPower(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldPower_swiginit(self, _field.new_FieldPower())
    __swig_destroy__ = _field.delete_FieldPower

# Register FieldPower in _field:
_field.FieldPower_swigregister(FieldPower)
class FieldMultiply(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldMultiply_swiginit(self, _field.new_FieldMultiply())
    __swig_destroy__ = _field.delete_FieldMultiply

# Register FieldMultiply in _field:
_field.FieldMultiply_swigregister(FieldMultiply)

def __mul__(operand1, operand2):
    return _field.__mul__(operand1, operand2)
class FieldDivide(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldDivide_swiginit(self, _field.new_FieldDivide())
    __swig_destroy__ = _field.delete_FieldDivide

# Register FieldDivide in _field:
_field.FieldDivide_swigregister(FieldDivide)

def __truediv__(operand1, operand2):
    return _field.__truediv__(operand1, operand2)
class FieldSubtract(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldSubtract_swiginit(self, _field.new_FieldSubtract())
    __swig_destroy__ = _field.delete_FieldSubtract

# Register FieldSubtract in _field:
_field.FieldSubtract_swigregister(FieldSubtract)

def __sub__(operand1, operand2):
    return _field.__sub__(operand1, operand2)
class FieldLog(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldLog_swiginit(self, _field.new_FieldLog())
    __swig_destroy__ = _field.delete_FieldLog

# Register FieldLog in _field:
_field.FieldLog_swigregister(FieldLog)

def log(sourceField):
    return _field.log(sourceField)
class FieldSqrt(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldSqrt_swiginit(self, _field.new_FieldSqrt())
    __swig_destroy__ = _field.delete_FieldSqrt

# Register FieldSqrt in _field:
_field.FieldSqrt_swigregister(FieldSqrt)

def sqrt(sourceField):
    return _field.sqrt(sourceField)
class FieldExp(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldExp_swiginit(self, _field.new_FieldExp())
    __swig_destroy__ = _field.delete_FieldExp

# Register FieldExp in _field:
_field.FieldExp_swigregister(FieldExp)

def exp(sourceField):
    return _field.exp(sourceField)
class FieldAbs(Field):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _field.FieldAbs_swiginit(self, _field.new_FieldAbs())
    __swig_destroy__ = _field.delete_FieldAbs

# Register FieldAbs in _field:
_field.FieldAbs_swigregister(FieldAbs)

def abs(sourceField):
    return _field.abs(sourceField)

