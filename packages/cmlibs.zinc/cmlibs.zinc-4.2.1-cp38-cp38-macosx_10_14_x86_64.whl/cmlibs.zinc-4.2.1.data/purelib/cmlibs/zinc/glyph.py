# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _glyph
else:
    import _glyph

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.material
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.graphics
import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.scene
import cmlibs.zinc.scenefilter
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.light
import cmlibs.zinc.shader
import cmlibs.zinc.spectrum
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
import cmlibs.zinc.tessellation
import cmlibs.zinc.logger
class Glyph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _glyph.Glyph_swiginit(self, _glyph.new_Glyph(*args))
    __swig_destroy__ = _glyph.delete_Glyph

    def isValid(self):
        return _glyph.Glyph_isValid(self)

    def getId(self):
        return _glyph.Glyph_getId(self)
    CHANGE_FLAG_NONE = _glyph.Glyph_CHANGE_FLAG_NONE
    CHANGE_FLAG_ADD = _glyph.Glyph_CHANGE_FLAG_ADD
    CHANGE_FLAG_REMOVE = _glyph.Glyph_CHANGE_FLAG_REMOVE
    CHANGE_FLAG_IDENTIFIER = _glyph.Glyph_CHANGE_FLAG_IDENTIFIER
    CHANGE_FLAG_DEFINITION = _glyph.Glyph_CHANGE_FLAG_DEFINITION
    CHANGE_FLAG_FULL_RESULT = _glyph.Glyph_CHANGE_FLAG_FULL_RESULT
    CHANGE_FLAG_FINAL = _glyph.Glyph_CHANGE_FLAG_FINAL
    REPEAT_MODE_INVALID = _glyph.Glyph_REPEAT_MODE_INVALID
    REPEAT_MODE_NONE = _glyph.Glyph_REPEAT_MODE_NONE
    REPEAT_MODE_AXES_2D = _glyph.Glyph_REPEAT_MODE_AXES_2D
    REPEAT_MODE_AXES_3D = _glyph.Glyph_REPEAT_MODE_AXES_3D
    REPEAT_MODE_MIRROR = _glyph.Glyph_REPEAT_MODE_MIRROR
    SHAPE_TYPE_INVALID = _glyph.Glyph_SHAPE_TYPE_INVALID
    SHAPE_TYPE_NONE = _glyph.Glyph_SHAPE_TYPE_NONE
    SHAPE_TYPE_ARROW = _glyph.Glyph_SHAPE_TYPE_ARROW
    SHAPE_TYPE_ARROW_SOLID = _glyph.Glyph_SHAPE_TYPE_ARROW_SOLID
    SHAPE_TYPE_AXIS = _glyph.Glyph_SHAPE_TYPE_AXIS
    SHAPE_TYPE_AXIS_SOLID = _glyph.Glyph_SHAPE_TYPE_AXIS_SOLID
    SHAPE_TYPE_CONE = _glyph.Glyph_SHAPE_TYPE_CONE
    SHAPE_TYPE_CONE_SOLID = _glyph.Glyph_SHAPE_TYPE_CONE_SOLID
    SHAPE_TYPE_CROSS = _glyph.Glyph_SHAPE_TYPE_CROSS
    SHAPE_TYPE_CUBE_SOLID = _glyph.Glyph_SHAPE_TYPE_CUBE_SOLID
    SHAPE_TYPE_CUBE_WIREFRAME = _glyph.Glyph_SHAPE_TYPE_CUBE_WIREFRAME
    SHAPE_TYPE_CYLINDER = _glyph.Glyph_SHAPE_TYPE_CYLINDER
    SHAPE_TYPE_CYLINDER_SOLID = _glyph.Glyph_SHAPE_TYPE_CYLINDER_SOLID
    SHAPE_TYPE_DIAMOND = _glyph.Glyph_SHAPE_TYPE_DIAMOND
    SHAPE_TYPE_LINE = _glyph.Glyph_SHAPE_TYPE_LINE
    SHAPE_TYPE_POINT = _glyph.Glyph_SHAPE_TYPE_POINT
    SHAPE_TYPE_SHEET = _glyph.Glyph_SHAPE_TYPE_SHEET
    SHAPE_TYPE_SPHERE = _glyph.Glyph_SHAPE_TYPE_SPHERE
    SHAPE_TYPE_AXES = _glyph.Glyph_SHAPE_TYPE_AXES
    SHAPE_TYPE_AXES_123 = _glyph.Glyph_SHAPE_TYPE_AXES_123
    SHAPE_TYPE_AXES_XYZ = _glyph.Glyph_SHAPE_TYPE_AXES_XYZ
    SHAPE_TYPE_AXES_COLOUR = _glyph.Glyph_SHAPE_TYPE_AXES_COLOUR
    SHAPE_TYPE_AXES_SOLID = _glyph.Glyph_SHAPE_TYPE_AXES_SOLID
    SHAPE_TYPE_AXES_SOLID_123 = _glyph.Glyph_SHAPE_TYPE_AXES_SOLID_123
    SHAPE_TYPE_AXES_SOLID_XYZ = _glyph.Glyph_SHAPE_TYPE_AXES_SOLID_XYZ
    SHAPE_TYPE_AXES_SOLID_COLOUR = _glyph.Glyph_SHAPE_TYPE_AXES_SOLID_COLOUR

    @staticmethod
    def RepeatModeEnumFromString(name):
        return _glyph.Glyph_RepeatModeEnumFromString(name)

    @staticmethod
    def RepeatModeEnumToString(mode):
        return _glyph.Glyph_RepeatModeEnumToString(mode)

    @staticmethod
    def ShapeTypeEnumFromString(name):
        return _glyph.Glyph_ShapeTypeEnumFromString(name)

    @staticmethod
    def ShapeTypeEnumToString(type):
        return _glyph.Glyph_ShapeTypeEnumToString(type)

    def getName(self):
        return _glyph.Glyph_getName(self)

    def setName(self, name):
        return _glyph.Glyph_setName(self, name)

    def isManaged(self):
        return _glyph.Glyph_isManaged(self)

    def setManaged(self, value):
        return _glyph.Glyph_setManaged(self, value)

    def castAxes(self):
        return _glyph.Glyph_castAxes(self)

    def castColourBar(self):
        return _glyph.Glyph_castColourBar(self)

    def __eq__(self, other):
        return _glyph.Glyph___eq__(self, other)

# Register Glyph in _glyph:
_glyph.Glyph_swigregister(Glyph)

def __eq__(*args):
    return _glyph.__eq__(*args)
class GlyphAxes(Glyph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _glyph.GlyphAxes_swiginit(self, _glyph.new_GlyphAxes(*args))

    def getAxisWidth(self):
        return _glyph.GlyphAxes_getAxisWidth(self)

    def setAxisWidth(self, axisWidth):
        return _glyph.GlyphAxes_setAxisWidth(self, axisWidth)

    def getAxisLabel(self, axisNumber):
        return _glyph.GlyphAxes_getAxisLabel(self, axisNumber)

    def setAxisLabel(self, axisNumber, label):
        return _glyph.GlyphAxes_setAxisLabel(self, axisNumber, label)

    def getAxisMaterial(self, axisNumber):
        return _glyph.GlyphAxes_getAxisMaterial(self, axisNumber)

    def setAxisMaterial(self, axisNumber, material):
        return _glyph.GlyphAxes_setAxisMaterial(self, axisNumber, material)
    __swig_destroy__ = _glyph.delete_GlyphAxes

# Register GlyphAxes in _glyph:
_glyph.GlyphAxes_swigregister(GlyphAxes)
class GlyphColourBar(Glyph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _glyph.GlyphColourBar_swiginit(self, _glyph.new_GlyphColourBar(*args))

    def getAxis(self, valuesCount):
        return _glyph.GlyphColourBar_getAxis(self, valuesCount)

    def setAxis(self, valuesCount):
        return _glyph.GlyphColourBar_setAxis(self, valuesCount)

    def getCentre(self, valuesCount):
        return _glyph.GlyphColourBar_getCentre(self, valuesCount)

    def setCentre(self, valuesCount):
        return _glyph.GlyphColourBar_setCentre(self, valuesCount)

    def getExtendLength(self):
        return _glyph.GlyphColourBar_getExtendLength(self)

    def setExtendLength(self, extendLength):
        return _glyph.GlyphColourBar_setExtendLength(self, extendLength)

    def getLabelDivisions(self):
        return _glyph.GlyphColourBar_getLabelDivisions(self)

    def setLabelDivisions(self, labelDivisions):
        return _glyph.GlyphColourBar_setLabelDivisions(self, labelDivisions)

    def getLabelMaterial(self):
        return _glyph.GlyphColourBar_getLabelMaterial(self)

    def setLabelMaterial(self, material):
        return _glyph.GlyphColourBar_setLabelMaterial(self, material)

    def getNumberFormat(self):
        return _glyph.GlyphColourBar_getNumberFormat(self)

    def setNumberFormat(self, numberFormat):
        return _glyph.GlyphColourBar_setNumberFormat(self, numberFormat)

    def getSideAxis(self, valuesCount):
        return _glyph.GlyphColourBar_getSideAxis(self, valuesCount)

    def setSideAxis(self, valuesCount):
        return _glyph.GlyphColourBar_setSideAxis(self, valuesCount)

    def getSpectrum(self):
        return _glyph.GlyphColourBar_getSpectrum(self)

    def getTickLength(self):
        return _glyph.GlyphColourBar_getTickLength(self)

    def setTickLength(self, tickLength):
        return _glyph.GlyphColourBar_setTickLength(self, tickLength)
    __swig_destroy__ = _glyph.delete_GlyphColourBar

# Register GlyphColourBar in _glyph:
_glyph.GlyphColourBar_swigregister(GlyphColourBar)
class Glyphiterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _glyph.Glyphiterator_swiginit(self, _glyph.new_Glyphiterator(*args))
    __swig_destroy__ = _glyph.delete_Glyphiterator

    def isValid(self):
        return _glyph.Glyphiterator_isValid(self)

    def next(self):
        return _glyph.Glyphiterator_next(self)

# Register Glyphiterator in _glyph:
_glyph.Glyphiterator_swigregister(Glyphiterator)
class Glyphmodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _glyph.Glyphmodule_swiginit(self, _glyph.new_Glyphmodule(*args))
    __swig_destroy__ = _glyph.delete_Glyphmodule

    def isValid(self):
        return _glyph.Glyphmodule_isValid(self)

    def getId(self):
        return _glyph.Glyphmodule_getId(self)

    def beginChange(self):
        return _glyph.Glyphmodule_beginChange(self)

    def endChange(self):
        return _glyph.Glyphmodule_endChange(self)

    def createGlyphAxes(self, axisGlyph, axisWidth):
        return _glyph.Glyphmodule_createGlyphAxes(self, axisGlyph, axisWidth)

    def createGlyphColourBar(self, spectrum):
        return _glyph.Glyphmodule_createGlyphColourBar(self, spectrum)

    def createGlyphiterator(self):
        return _glyph.Glyphmodule_createGlyphiterator(self)

    def defineStandardGlyphs(self):
        return _glyph.Glyphmodule_defineStandardGlyphs(self)

    def findGlyphByName(self, name):
        return _glyph.Glyphmodule_findGlyphByName(self, name)

    def findGlyphByGlyphShapeType(self, glyphShapeType):
        return _glyph.Glyphmodule_findGlyphByGlyphShapeType(self, glyphShapeType)

    def getDefaultPointGlyph(self):
        return _glyph.Glyphmodule_getDefaultPointGlyph(self)

    def setDefaultPointGlyph(self, glyph):
        return _glyph.Glyphmodule_setDefaultPointGlyph(self, glyph)

    def createStaticGlyphFromGraphics(self, graphics):
        return _glyph.Glyphmodule_createStaticGlyphFromGraphics(self, graphics)

    def createGlyphmodulenotifier(self):
        return _glyph.Glyphmodule_createGlyphmodulenotifier(self)

# Register Glyphmodule in _glyph:
_glyph.Glyphmodule_swigregister(Glyphmodule)
class Glyphmoduleevent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _glyph.Glyphmoduleevent_swiginit(self, _glyph.new_Glyphmoduleevent(*args))
    __swig_destroy__ = _glyph.delete_Glyphmoduleevent

    def isValid(self):
        return _glyph.Glyphmoduleevent_isValid(self)

    def getId(self):
        return _glyph.Glyphmoduleevent_getId(self)

    def getGlyphChangeFlags(self, glyph):
        return _glyph.Glyphmoduleevent_getGlyphChangeFlags(self, glyph)

    def getSummaryGlyphChangeFlags(self):
        return _glyph.Glyphmoduleevent_getSummaryGlyphChangeFlags(self)

# Register Glyphmoduleevent in _glyph:
_glyph.Glyphmoduleevent_swigregister(Glyphmoduleevent)
class Glyphmodulecallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _glyph.delete_Glyphmodulecallback

# Register Glyphmodulecallback in _glyph:
_glyph.Glyphmodulecallback_swigregister(Glyphmodulecallback)
class Glyphmodulenotifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _glyph.Glyphmodulenotifier_swiginit(self, _glyph.new_Glyphmodulenotifier(*args))
    __swig_destroy__ = _glyph.delete_Glyphmodulenotifier

    def isValid(self):
        return _glyph.Glyphmodulenotifier_isValid(self)

    def getId(self):
        return _glyph.Glyphmodulenotifier_getId(self)

    def setCallback(self, *args):
        return _glyph.Glyphmodulenotifier_setCallback(self, *args)

    def clearCallback(self):
        return _glyph.Glyphmodulenotifier_clearCallback(self)

# Register Glyphmodulenotifier in _glyph:
_glyph.Glyphmodulenotifier_swigregister(Glyphmodulenotifier)

