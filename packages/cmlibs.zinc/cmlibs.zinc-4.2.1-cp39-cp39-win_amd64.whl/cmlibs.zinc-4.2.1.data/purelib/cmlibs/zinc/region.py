# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _region
else:
    import _region

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.graphics
import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.streamimage
import cmlibs.zinc.stream
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.tessellation
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.streamregion
class Region(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _region.Region_swiginit(self, _region.new_Region(*args))
    __swig_destroy__ = _region.delete_Region

    def isValid(self):
        return _region.Region_isValid(self)

    def getId(self):
        return _region.Region_getId(self)

    def beginChange(self):
        return _region.Region_beginChange(self)

    def endChange(self):
        return _region.Region_endChange(self)

    def beginHierarchicalChange(self):
        return _region.Region_beginHierarchicalChange(self)

    def endHierarchicalChange(self):
        return _region.Region_endHierarchicalChange(self)

    def createChild(self, name):
        return _region.Region_createChild(self, name)

    def createSubregion(self, path):
        return _region.Region_createSubregion(self, path)

    def createRegion(self):
        return _region.Region_createRegion(self)

    def getFieldmodule(self):
        return _region.Region_getFieldmodule(self)

    def readFile(self, fileName):
        return _region.Region_readFile(self, fileName)

    def getContext(self):
        return _region.Region_getContext(self)

    def getName(self):
        return _region.Region_getName(self)

    def setName(self, name):
        return _region.Region_setName(self, name)

    def getParent(self):
        return _region.Region_getParent(self)

    def getPath(self):
        return _region.Region_getPath(self)

    def getRelativePath(self, baseRegion):
        return _region.Region_getRelativePath(self, baseRegion)

    def getRoot(self):
        return _region.Region_getRoot(self)

    def getFirstChild(self):
        return _region.Region_getFirstChild(self)

    def getNextSibling(self):
        return _region.Region_getNextSibling(self)

    def getPreviousSibling(self):
        return _region.Region_getPreviousSibling(self)

    def appendChild(self, newChild):
        return _region.Region_appendChild(self, newChild)

    def insertChildBefore(self, newChild, refChild):
        return _region.Region_insertChildBefore(self, newChild, refChild)

    def removeChild(self, oldChild):
        return _region.Region_removeChild(self, oldChild)

    def findChildByName(self, name):
        return _region.Region_findChildByName(self, name)

    def findSubregionAtPath(self, path):
        return _region.Region_findSubregionAtPath(self, path)

    def containsSubregion(self, subregion):
        return _region.Region_containsSubregion(self, subregion)

    def writeFile(self, fileName):
        return _region.Region_writeFile(self, fileName)

    def getScene(self):
        return _region.Region_getScene(self)

    def createStreaminformationRegion(self):
        return _region.Region_createStreaminformationRegion(self)

    def read(self, streaminformationRegion):
        return _region.Region_read(self, streaminformationRegion)

    def write(self, streaminformationRegion):
        return _region.Region_write(self, streaminformationRegion)

    def getTimeRange(self):
        return _region.Region_getTimeRange(self)

    def getHierarchicalTimeRange(self):
        return _region.Region_getHierarchicalTimeRange(self)

    def createRegionnotifier(self):
        return _region.Region_createRegionnotifier(self)

    def __eq__(self, other):
        return _region.Region___eq__(self, other)

# Register Region in _region:
_region.Region_swigregister(Region)


def __eq__(*args):
    return _region.__eq__(*args)
class Regionevent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _region.Regionevent_swiginit(self, _region.new_Regionevent(*args))
    __swig_destroy__ = _region.delete_Regionevent

    def isValid(self):
        return _region.Regionevent_isValid(self)

    def getId(self):
        return _region.Regionevent_getId(self)

# Register Regionevent in _region:
_region.Regionevent_swigregister(Regionevent)

class Regioncallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _region.delete_Regioncallback

# Register Regioncallback in _region:
_region.Regioncallback_swigregister(Regioncallback)

class Regionnotifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _region.Regionnotifier_swiginit(self, _region.new_Regionnotifier(*args))
    __swig_destroy__ = _region.delete_Regionnotifier

    def isValid(self):
        return _region.Regionnotifier_isValid(self)

    def getId(self):
        return _region.Regionnotifier_getId(self)

    def setCallback(self, *args):
        return _region.Regionnotifier_setCallback(self, *args)

    def clearCallback(self):
        return _region.Regionnotifier_clearCallback(self)

# Register Regionnotifier in _region:
_region.Regionnotifier_swigregister(Regionnotifier)



