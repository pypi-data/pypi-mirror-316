# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _spectrum
else:
    import _spectrum

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Spectrumcomponent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spectrum.Spectrumcomponent_swiginit(self, _spectrum.new_Spectrumcomponent(*args))
    __swig_destroy__ = _spectrum.delete_Spectrumcomponent

    def isValid(self):
        return _spectrum.Spectrumcomponent_isValid(self)
    SCALE_TYPE_INVALID = _spectrum.Spectrumcomponent_SCALE_TYPE_INVALID
    SCALE_TYPE_LINEAR = _spectrum.Spectrumcomponent_SCALE_TYPE_LINEAR
    SCALE_TYPE_LOG = _spectrum.Spectrumcomponent_SCALE_TYPE_LOG
    COLOUR_MAPPING_TYPE_INVALID = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_INVALID
    COLOUR_MAPPING_TYPE_ALPHA = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_ALPHA
    COLOUR_MAPPING_TYPE_BANDED = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_BANDED
    COLOUR_MAPPING_TYPE_BLUE = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_BLUE
    COLOUR_MAPPING_TYPE_GREEN = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_GREEN
    COLOUR_MAPPING_TYPE_MONOCHROME = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_MONOCHROME
    COLOUR_MAPPING_TYPE_RAINBOW = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_RAINBOW
    COLOUR_MAPPING_TYPE_RED = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_RED
    COLOUR_MAPPING_TYPE_STEP = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_STEP
    COLOUR_MAPPING_TYPE_WHITE_TO_BLUE = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_WHITE_TO_BLUE
    COLOUR_MAPPING_TYPE_WHITE_TO_RED = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_WHITE_TO_RED
    COLOUR_MAPPING_TYPE_WHITE_TO_GREEN = _spectrum.Spectrumcomponent_COLOUR_MAPPING_TYPE_WHITE_TO_GREEN

    def getId(self):
        return _spectrum.Spectrumcomponent_getId(self)

    def getRangeMinimum(self):
        return _spectrum.Spectrumcomponent_getRangeMinimum(self)

    def setRangeMinimum(self, value):
        return _spectrum.Spectrumcomponent_setRangeMinimum(self, value)

    def getRangeMaximum(self):
        return _spectrum.Spectrumcomponent_getRangeMaximum(self)

    def setRangeMaximum(self, value):
        return _spectrum.Spectrumcomponent_setRangeMaximum(self, value)

    def getColourMinimum(self):
        return _spectrum.Spectrumcomponent_getColourMinimum(self)

    def setColourMinimum(self, value):
        return _spectrum.Spectrumcomponent_setColourMinimum(self, value)

    def getColourMaximum(self):
        return _spectrum.Spectrumcomponent_getColourMaximum(self)

    def setColourMaximum(self, value):
        return _spectrum.Spectrumcomponent_setColourMaximum(self, value)

    def getStepValue(self):
        return _spectrum.Spectrumcomponent_getStepValue(self)

    def setStepValue(self, value):
        return _spectrum.Spectrumcomponent_setStepValue(self, value)

    def getExaggeration(self):
        return _spectrum.Spectrumcomponent_getExaggeration(self)

    def setExaggeration(self, value):
        return _spectrum.Spectrumcomponent_setExaggeration(self, value)

    def getBandedRatio(self):
        return _spectrum.Spectrumcomponent_getBandedRatio(self)

    def setBandedRatio(self, value):
        return _spectrum.Spectrumcomponent_setBandedRatio(self, value)

    def isActive(self):
        return _spectrum.Spectrumcomponent_isActive(self)

    def setActive(self, active):
        return _spectrum.Spectrumcomponent_setActive(self, active)

    def isColourReverse(self):
        return _spectrum.Spectrumcomponent_isColourReverse(self)

    def setColourReverse(self, reverse):
        return _spectrum.Spectrumcomponent_setColourReverse(self, reverse)

    def isExtendAbove(self):
        return _spectrum.Spectrumcomponent_isExtendAbove(self)

    def setExtendAbove(self, extend_above):
        return _spectrum.Spectrumcomponent_setExtendAbove(self, extend_above)

    def isExtendBelow(self):
        return _spectrum.Spectrumcomponent_isExtendBelow(self)

    def setExtendBelow(self, extend_below):
        return _spectrum.Spectrumcomponent_setExtendBelow(self, extend_below)

    def getFieldComponent(self):
        return _spectrum.Spectrumcomponent_getFieldComponent(self)

    def setFieldComponent(self, componentNumber):
        return _spectrum.Spectrumcomponent_setFieldComponent(self, componentNumber)

    def isFixMaximum(self):
        return _spectrum.Spectrumcomponent_isFixMaximum(self)

    def setFixMaximum(self, fixMaximum):
        return _spectrum.Spectrumcomponent_setFixMaximum(self, fixMaximum)

    def isFixMinimum(self):
        return _spectrum.Spectrumcomponent_isFixMinimum(self)

    def setFixMinimum(self, fixMinimum):
        return _spectrum.Spectrumcomponent_setFixMinimum(self, fixMinimum)

    def getNumberOfBands(self):
        return _spectrum.Spectrumcomponent_getNumberOfBands(self)

    def setNumberOfBands(self, numberOfBands):
        return _spectrum.Spectrumcomponent_setNumberOfBands(self, numberOfBands)

    def getScaleType(self):
        return _spectrum.Spectrumcomponent_getScaleType(self)

    def setScaleType(self, scaleType):
        return _spectrum.Spectrumcomponent_setScaleType(self, scaleType)

    def getColourMappingType(self):
        return _spectrum.Spectrumcomponent_getColourMappingType(self)

    def setColourMappingType(self, colourMapping):
        return _spectrum.Spectrumcomponent_setColourMappingType(self, colourMapping)

# Register Spectrumcomponent in _spectrum:
_spectrum.Spectrumcomponent_swigregister(Spectrumcomponent)

class Spectrum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spectrum.Spectrum_swiginit(self, _spectrum.new_Spectrum(*args))
    __swig_destroy__ = _spectrum.delete_Spectrum
    CHANGE_FLAG_NONE = _spectrum.Spectrum_CHANGE_FLAG_NONE
    CHANGE_FLAG_ADD = _spectrum.Spectrum_CHANGE_FLAG_ADD
    CHANGE_FLAG_REMOVE = _spectrum.Spectrum_CHANGE_FLAG_REMOVE
    CHANGE_FLAG_IDENTIFIER = _spectrum.Spectrum_CHANGE_FLAG_IDENTIFIER
    CHANGE_FLAG_DEFINITION = _spectrum.Spectrum_CHANGE_FLAG_DEFINITION
    CHANGE_FLAG_FULL_RESULT = _spectrum.Spectrum_CHANGE_FLAG_FULL_RESULT
    CHANGE_FLAG_FINAL = _spectrum.Spectrum_CHANGE_FLAG_FINAL

    def isValid(self):
        return _spectrum.Spectrum_isValid(self)

    def getId(self):
        return _spectrum.Spectrum_getId(self)

    def isManaged(self):
        return _spectrum.Spectrum_isManaged(self)

    def setManaged(self, value):
        return _spectrum.Spectrum_setManaged(self, value)

    def beginChange(self):
        return _spectrum.Spectrum_beginChange(self)

    def endChange(self):
        return _spectrum.Spectrum_endChange(self)

    def getName(self):
        return _spectrum.Spectrum_getName(self)

    def setName(self, name):
        return _spectrum.Spectrum_setName(self, name)

    def getNumberOfSpectrumcomponents(self):
        return _spectrum.Spectrum_getNumberOfSpectrumcomponents(self)

    def createSpectrumcomponent(self):
        return _spectrum.Spectrum_createSpectrumcomponent(self)

    def getFirstSpectrumcomponent(self):
        return _spectrum.Spectrum_getFirstSpectrumcomponent(self)

    def getNextSpectrumcomponent(self, refComponent):
        return _spectrum.Spectrum_getNextSpectrumcomponent(self, refComponent)

    def getPreviousSpectrumcomponent(self, refComponent):
        return _spectrum.Spectrum_getPreviousSpectrumcomponent(self, refComponent)

    def moveSpectrumcomponentBefore(self, component, refComponent):
        return _spectrum.Spectrum_moveSpectrumcomponentBefore(self, component, refComponent)

    def removeSpectrumcomponent(self, component):
        return _spectrum.Spectrum_removeSpectrumcomponent(self, component)

    def removeAllSpectrumcomponents(self):
        return _spectrum.Spectrum_removeAllSpectrumcomponents(self)

    def isMaterialOverwrite(self):
        return _spectrum.Spectrum_isMaterialOverwrite(self)

    def setMaterialOverwrite(self, overwrite):
        return _spectrum.Spectrum_setMaterialOverwrite(self, overwrite)

    def autorange(self, scene, scenefilter):
        return _spectrum.Spectrum_autorange(self, scene, scenefilter)

    def __eq__(self, other):
        return _spectrum.Spectrum___eq__(self, other)

# Register Spectrum in _spectrum:
_spectrum.Spectrum_swigregister(Spectrum)


def __eq__(a, b):
    return _spectrum.__eq__(a, b)
class Spectrumiterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spectrum.Spectrumiterator_swiginit(self, _spectrum.new_Spectrumiterator(*args))
    __swig_destroy__ = _spectrum.delete_Spectrumiterator

    def isValid(self):
        return _spectrum.Spectrumiterator_isValid(self)

    def next(self):
        return _spectrum.Spectrumiterator_next(self)

# Register Spectrumiterator in _spectrum:
_spectrum.Spectrumiterator_swigregister(Spectrumiterator)

class Spectrummodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spectrum.Spectrummodule_swiginit(self, _spectrum.new_Spectrummodule(*args))
    __swig_destroy__ = _spectrum.delete_Spectrummodule

    def isValid(self):
        return _spectrum.Spectrummodule_isValid(self)

    def getId(self):
        return _spectrum.Spectrummodule_getId(self)

    def createSpectrum(self):
        return _spectrum.Spectrummodule_createSpectrum(self)

    def createSpectrumiterator(self):
        return _spectrum.Spectrummodule_createSpectrumiterator(self)

    def defineStandardSpectrums(self):
        return _spectrum.Spectrummodule_defineStandardSpectrums(self)

    def findSpectrumByName(self, name):
        return _spectrum.Spectrummodule_findSpectrumByName(self, name)

    def beginChange(self):
        return _spectrum.Spectrummodule_beginChange(self)

    def endChange(self):
        return _spectrum.Spectrummodule_endChange(self)

    def getDefaultSpectrum(self):
        return _spectrum.Spectrummodule_getDefaultSpectrum(self)

    def setDefaultSpectrum(self, spectrum):
        return _spectrum.Spectrummodule_setDefaultSpectrum(self, spectrum)

    def readDescription(self, description):
        return _spectrum.Spectrummodule_readDescription(self, description)

    def writeDescription(self):
        return _spectrum.Spectrummodule_writeDescription(self)

    def createSpectrummodulenotifier(self):
        return _spectrum.Spectrummodule_createSpectrummodulenotifier(self)

# Register Spectrummodule in _spectrum:
_spectrum.Spectrummodule_swigregister(Spectrummodule)

class Spectrummoduleevent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spectrum.Spectrummoduleevent_swiginit(self, _spectrum.new_Spectrummoduleevent(*args))
    __swig_destroy__ = _spectrum.delete_Spectrummoduleevent

    def isValid(self):
        return _spectrum.Spectrummoduleevent_isValid(self)

    def getId(self):
        return _spectrum.Spectrummoduleevent_getId(self)

    def getSpectrumChangeFlags(self, spectrum):
        return _spectrum.Spectrummoduleevent_getSpectrumChangeFlags(self, spectrum)

    def getSummarySpectrumChangeFlags(self):
        return _spectrum.Spectrummoduleevent_getSummarySpectrumChangeFlags(self)

# Register Spectrummoduleevent in _spectrum:
_spectrum.Spectrummoduleevent_swigregister(Spectrummoduleevent)

class Spectrummodulecallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spectrum.delete_Spectrummodulecallback

# Register Spectrummodulecallback in _spectrum:
_spectrum.Spectrummodulecallback_swigregister(Spectrummodulecallback)

class Spectrummodulenotifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _spectrum.Spectrummodulenotifier_swiginit(self, _spectrum.new_Spectrummodulenotifier(*args))
    __swig_destroy__ = _spectrum.delete_Spectrummodulenotifier

    def isValid(self):
        return _spectrum.Spectrummodulenotifier_isValid(self)

    def getId(self):
        return _spectrum.Spectrummodulenotifier_getId(self)

    def setCallback(self, *args):
        return _spectrum.Spectrummodulenotifier_setCallback(self, *args)

    def clearCallback(self):
        return _spectrum.Spectrummodulenotifier_clearCallback(self)

# Register Spectrummodulenotifier in _spectrum:
_spectrum.Spectrummodulenotifier_swigregister(Spectrummodulenotifier)



