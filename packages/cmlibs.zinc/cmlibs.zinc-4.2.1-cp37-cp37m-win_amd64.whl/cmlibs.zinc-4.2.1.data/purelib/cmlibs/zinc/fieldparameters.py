# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fieldparameters
else:
    import _fieldparameters

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.graphics
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.tessellation
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
class Fieldparameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fieldparameters.Fieldparameters_swiginit(self, _fieldparameters.new_Fieldparameters(*args))
    __swig_destroy__ = _fieldparameters.delete_Fieldparameters

    def isValid(self):
        return _fieldparameters.Fieldparameters_isValid(self)

    def getId(self):
        return _fieldparameters.Fieldparameters_getId(self)

    def getDerivativeOperator(self, order):
        return _fieldparameters.Fieldparameters_getDerivativeOperator(self, order)

    def getHigherDerivativeOperator(self, sourceOperator, addOrder):
        return _fieldparameters.Fieldparameters_getHigherDerivativeOperator(self, sourceOperator, addOrder)

    def getElementParameterIndexes(self, element, valuesCount):
        return _fieldparameters.Fieldparameters_getElementParameterIndexes(self, element, valuesCount)

    def getElementParameterIndexesZero(self, element, valuesCount):
        return _fieldparameters.Fieldparameters_getElementParameterIndexesZero(self, element, valuesCount)

    def getField(self):
        return _fieldparameters.Fieldparameters_getField(self)

    def getNumberOfElementParameters(self, element):
        return _fieldparameters.Fieldparameters_getNumberOfElementParameters(self, element)

    def getNumberOfParameters(self):
        return _fieldparameters.Fieldparameters_getNumberOfParameters(self)

    def addParameters(self, valuesCount):
        return _fieldparameters.Fieldparameters_addParameters(self, valuesCount)

    def getParameters(self, valuesCount):
        return _fieldparameters.Fieldparameters_getParameters(self, valuesCount)

    def setParameters(self, valuesCount):
        return _fieldparameters.Fieldparameters_setParameters(self, valuesCount)

    def getTime(self):
        return _fieldparameters.Fieldparameters_getTime(self)

    def setTime(self, timeIn):
        return _fieldparameters.Fieldparameters_setTime(self, timeIn)

# Register Fieldparameters in _fieldparameters:
_fieldparameters.Fieldparameters_swigregister(Fieldparameters)



