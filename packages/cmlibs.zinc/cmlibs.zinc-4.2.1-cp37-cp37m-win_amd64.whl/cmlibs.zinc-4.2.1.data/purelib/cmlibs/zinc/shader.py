# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _shader
else:
    import _shader

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Shaderprogram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _shader.Shaderprogram_swiginit(self, _shader.new_Shaderprogram(*args))
    __swig_destroy__ = _shader.delete_Shaderprogram

    def isValid(self):
        return _shader.Shaderprogram_isValid(self)

    def getId(self):
        return _shader.Shaderprogram_getId(self)

    def isManaged(self):
        return _shader.Shaderprogram_isManaged(self)

    def setManaged(self, value):
        return _shader.Shaderprogram_setManaged(self, value)

    def getName(self):
        return _shader.Shaderprogram_getName(self)

    def setName(self, name):
        return _shader.Shaderprogram_setName(self, name)

    def getVertexShader(self):
        return _shader.Shaderprogram_getVertexShader(self)

    def setVertexShader(self, vertex_shader_string):
        return _shader.Shaderprogram_setVertexShader(self, vertex_shader_string)

    def getFragmentShader(self):
        return _shader.Shaderprogram_getFragmentShader(self)

    def setFragmentShader(self, fragment_shader_string):
        return _shader.Shaderprogram_setFragmentShader(self, fragment_shader_string)

    def __eq__(self, other):
        return _shader.Shaderprogram___eq__(self, other)

# Register Shaderprogram in _shader:
_shader.Shaderprogram_swigregister(Shaderprogram)

class Shaderuniforms(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _shader.Shaderuniforms_swiginit(self, _shader.new_Shaderuniforms(*args))
    __swig_destroy__ = _shader.delete_Shaderuniforms

    def isValid(self):
        return _shader.Shaderuniforms_isValid(self)

    def getId(self):
        return _shader.Shaderuniforms_getId(self)

    def isManaged(self):
        return _shader.Shaderuniforms_isManaged(self)

    def setManaged(self, value):
        return _shader.Shaderuniforms_setManaged(self, value)

    def getName(self):
        return _shader.Shaderuniforms_getName(self)

    def setName(self, name):
        return _shader.Shaderuniforms_setName(self, name)

    def removeUniform(self, name):
        return _shader.Shaderuniforms_removeUniform(self, name)

    def getUniformReal(self, name, valuesCount):
        return _shader.Shaderuniforms_getUniformReal(self, name, valuesCount)

    def addUniformReal(self, name, valuesCount):
        return _shader.Shaderuniforms_addUniformReal(self, name, valuesCount)

    def setUniformReal(self, name, valuesCount):
        return _shader.Shaderuniforms_setUniformReal(self, name, valuesCount)

    def getUniformInteger(self, name, valuesCount):
        return _shader.Shaderuniforms_getUniformInteger(self, name, valuesCount)

    def addUniformInteger(self, name, valuesCount):
        return _shader.Shaderuniforms_addUniformInteger(self, name, valuesCount)

    def setUniformInteger(self, name, valuesCount):
        return _shader.Shaderuniforms_setUniformInteger(self, name, valuesCount)

    def __eq__(self, other):
        return _shader.Shaderuniforms___eq__(self, other)

# Register Shaderuniforms in _shader:
_shader.Shaderuniforms_swigregister(Shaderuniforms)


def __eq__(*args):
    return _shader.__eq__(*args)
class Shadermodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _shader.Shadermodule_swiginit(self, _shader.new_Shadermodule(*args))
    __swig_destroy__ = _shader.delete_Shadermodule

    def isValid(self):
        return _shader.Shadermodule_isValid(self)

    def getId(self):
        return _shader.Shadermodule_getId(self)

    def createShaderprogram(self):
        return _shader.Shadermodule_createShaderprogram(self)

    def findShaderprogramByName(self, name):
        return _shader.Shadermodule_findShaderprogramByName(self, name)

    def createShaderuniforms(self):
        return _shader.Shadermodule_createShaderuniforms(self)

    def findShaderuniformsByName(self, name):
        return _shader.Shadermodule_findShaderuniformsByName(self, name)

# Register Shadermodule in _shader:
_shader.Shadermodule_swigregister(Shadermodule)



