# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fieldmodule
else:
    import _fieldmodule

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.graphics
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.tessellation
import cmlibs.zinc.light
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.sceneviewer
import cmlibs.zinc.scene
import cmlibs.zinc.selection
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.scenepicker
import cmlibs.zinc.shader
import cmlibs.zinc.streamscene
import cmlibs.zinc.stream
import cmlibs.zinc.streamregion
import cmlibs.zinc.streamimage
class Fieldmodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fieldmodule.Fieldmodule_swiginit(self, _fieldmodule.new_Fieldmodule(*args))
    __swig_destroy__ = _fieldmodule.delete_Fieldmodule

    def isValid(self):
        return _fieldmodule.Fieldmodule_isValid(self)

    def getId(self):
        return _fieldmodule.Fieldmodule_getId(self)

    def beginChange(self):
        return _fieldmodule.Fieldmodule_beginChange(self)

    def endChange(self):
        return _fieldmodule.Fieldmodule_endChange(self)

    def defineAllFaces(self):
        return _fieldmodule.Fieldmodule_defineAllFaces(self)

    def findFieldByName(self, fieldName):
        return _fieldmodule.Fieldmodule_findFieldByName(self, fieldName)

    def createFieldcache(self):
        return _fieldmodule.Fieldmodule_createFieldcache(self)

    def createFielditerator(self):
        return _fieldmodule.Fieldmodule_createFielditerator(self)

    def createFieldmodulenotifier(self):
        return _fieldmodule.Fieldmodule_createFieldmodulenotifier(self)

    def createFieldsmoothing(self):
        return _fieldmodule.Fieldmodule_createFieldsmoothing(self)

    def createElementbasis(self, dimension, functionType):
        return _fieldmodule.Fieldmodule_createElementbasis(self, dimension, functionType)

    def findNodesetByFieldDomainType(self, domainType):
        return _fieldmodule.Fieldmodule_findNodesetByFieldDomainType(self, domainType)

    def findNodesetByName(self, nodeset_name):
        return _fieldmodule.Fieldmodule_findNodesetByName(self, nodeset_name)

    def findMeshByDimension(self, dimension):
        return _fieldmodule.Fieldmodule_findMeshByDimension(self, dimension)

    def findMeshByName(self, meshName):
        return _fieldmodule.Fieldmodule_findMeshByName(self, meshName)

    def writeDescription(self):
        return _fieldmodule.Fieldmodule_writeDescription(self)

    def readDescription(self, description):
        return _fieldmodule.Fieldmodule_readDescription(self, description)

    def getMatchingTimesequence(self, timesCount):
        return _fieldmodule.Fieldmodule_getMatchingTimesequence(self, timesCount)

    def getRegion(self):
        return _fieldmodule.Fieldmodule_getRegion(self)

    def createOptimisation(self):
        return _fieldmodule.Fieldmodule_createOptimisation(self)

    def createFieldApply(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldApply(self, sourceField)

    def createFieldArgumentReal(self, numberOfComponents):
        return _fieldmodule.Fieldmodule_createFieldArgumentReal(self, numberOfComponents)

    def createFieldAdd(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldAdd(self, sourceField1, sourceField2)

    def createFieldPower(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldPower(self, sourceField1, sourceField2)

    def createFieldMultiply(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldMultiply(self, sourceField1, sourceField2)

    def createFieldDivide(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldDivide(self, sourceField1, sourceField2)

    def createFieldSubtract(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldSubtract(self, sourceField1, sourceField2)

    def createFieldSumComponents(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldSumComponents(self, sourceField)

    def createFieldLog(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldLog(self, sourceField)

    def createFieldSqrt(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldSqrt(self, sourceField)

    def createFieldExp(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldExp(self, sourceField)

    def createFieldAbs(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldAbs(self, sourceField)

    def createFieldIdentity(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldIdentity(self, sourceField)

    def createFieldComponent(self, sourceField, sourceComponentIndexesCount):
        return _fieldmodule.Fieldmodule_createFieldComponent(self, sourceField, sourceComponentIndexesCount)

    def createFieldConcatenate(self, fieldsCount):
        return _fieldmodule.Fieldmodule_createFieldConcatenate(self, fieldsCount)

    def createFieldIf(self, sourceField1, sourceField2, sourceField3):
        return _fieldmodule.Fieldmodule_createFieldIf(self, sourceField1, sourceField2, sourceField3)

    def createFieldConstant(self, valuesCount):
        return _fieldmodule.Fieldmodule_createFieldConstant(self, valuesCount)

    def createFieldStringConstant(self, stringConstant):
        return _fieldmodule.Fieldmodule_createFieldStringConstant(self, stringConstant)

    def createFieldCoordinateTransformation(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldCoordinateTransformation(self, sourceField)

    def createFieldVectorCoordinateTransformation(self, vectorField, coordinateField):
        return _fieldmodule.Fieldmodule_createFieldVectorCoordinateTransformation(self, vectorField, coordinateField)

    def createFieldFibreAxes(self, fibreField, coordinateField):
        return _fieldmodule.Fieldmodule_createFieldFibreAxes(self, fibreField, coordinateField)

    def createFieldFiniteElement(self, numberOfComponents):
        return _fieldmodule.Fieldmodule_createFieldFiniteElement(self, numberOfComponents)

    def createFieldEmbedded(self, sourceField, embeddedLocationField):
        return _fieldmodule.Fieldmodule_createFieldEmbedded(self, sourceField, embeddedLocationField)

    def createFieldEdgeDiscontinuity(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldEdgeDiscontinuity(self, sourceField)

    def createFieldFindMeshLocation(self, sourceField, meshField, mesh):
        return _fieldmodule.Fieldmodule_createFieldFindMeshLocation(self, sourceField, meshField, mesh)

    def createFieldNodeValue(self, sourceField, nodeValueLabel, versionNumber):
        return _fieldmodule.Fieldmodule_createFieldNodeValue(self, sourceField, nodeValueLabel, versionNumber)

    def createFieldStoredMeshLocation(self, mesh):
        return _fieldmodule.Fieldmodule_createFieldStoredMeshLocation(self, mesh)

    def createFieldStoredString(self):
        return _fieldmodule.Fieldmodule_createFieldStoredString(self)

    def createFieldIsExterior(self):
        return _fieldmodule.Fieldmodule_createFieldIsExterior(self)

    def createFieldIsOnFace(self, face):
        return _fieldmodule.Fieldmodule_createFieldIsOnFace(self, face)

    def createFieldGroup(self):
        return _fieldmodule.Fieldmodule_createFieldGroup(self)

    def createFieldImage(self):
        return _fieldmodule.Fieldmodule_createFieldImage(self)

    def createFieldImageFromSource(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldImageFromSource(self, sourceField)

    def createFieldAnd(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldAnd(self, sourceField1, sourceField2)

    def createFieldEqualTo(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldEqualTo(self, sourceField1, sourceField2)

    def createFieldGreaterThan(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldGreaterThan(self, sourceField1, sourceField2)

    def createFieldIsDefined(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldIsDefined(self, sourceField)

    def createFieldLessThan(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldLessThan(self, sourceField1, sourceField2)

    def createFieldOr(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldOr(self, sourceField1, sourceField2)

    def createFieldNot(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldNot(self, sourceField)

    def createFieldXor(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldXor(self, sourceField1, sourceField2)

    def createFieldDeterminant(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldDeterminant(self, sourceField)

    def createFieldEigenvalues(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldEigenvalues(self, sourceField)

    def createFieldEigenvectors(self, eigenvaluesField):
        return _fieldmodule.Fieldmodule_createFieldEigenvectors(self, eigenvaluesField)

    def createFieldMatrixInvert(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldMatrixInvert(self, sourceField)

    def createFieldMatrixMultiply(self, numberOfRows, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldMatrixMultiply(self, numberOfRows, sourceField1, sourceField2)

    def createFieldProjection(self, sourceField, projectionMatrixField):
        return _fieldmodule.Fieldmodule_createFieldProjection(self, sourceField, projectionMatrixField)

    def createFieldTranspose(self, sourceNumberOfRows, sourceField):
        return _fieldmodule.Fieldmodule_createFieldTranspose(self, sourceNumberOfRows, sourceField)

    def createFieldMeshIntegral(self, integrandField, coordinateField, mesh):
        return _fieldmodule.Fieldmodule_createFieldMeshIntegral(self, integrandField, coordinateField, mesh)

    def createFieldMeshIntegralSquares(self, integrandField, coordinateField, mesh):
        return _fieldmodule.Fieldmodule_createFieldMeshIntegralSquares(self, integrandField, coordinateField, mesh)

    def createFieldNodesetSum(self, sourceField, nodeset):
        return _fieldmodule.Fieldmodule_createFieldNodesetSum(self, sourceField, nodeset)

    def createFieldNodesetMean(self, sourceField, nodeset):
        return _fieldmodule.Fieldmodule_createFieldNodesetMean(self, sourceField, nodeset)

    def createFieldNodesetSumSquares(self, sourceField, nodeset):
        return _fieldmodule.Fieldmodule_createFieldNodesetSumSquares(self, sourceField, nodeset)

    def createFieldNodesetMeanSquares(self, sourceField, nodeset):
        return _fieldmodule.Fieldmodule_createFieldNodesetMeanSquares(self, sourceField, nodeset)

    def createFieldNodesetMinimum(self, sourceField, nodeset):
        return _fieldmodule.Fieldmodule_createFieldNodesetMinimum(self, sourceField, nodeset)

    def createFieldNodesetMaximum(self, sourceField, nodeset):
        return _fieldmodule.Fieldmodule_createFieldNodesetMaximum(self, sourceField, nodeset)

    def createFieldTimeLookup(self, sourceField, timeField):
        return _fieldmodule.Fieldmodule_createFieldTimeLookup(self, sourceField, timeField)

    def createFieldTimeValue(self, timeKeeper):
        return _fieldmodule.Fieldmodule_createFieldTimeValue(self, timeKeeper)

    def createFieldDerivative(self, sourceField, xi_index):
        return _fieldmodule.Fieldmodule_createFieldDerivative(self, sourceField, xi_index)

    def createFieldCurl(self, vectorField, coordinateField):
        return _fieldmodule.Fieldmodule_createFieldCurl(self, vectorField, coordinateField)

    def createFieldDivergence(self, vectorField, coordinateField):
        return _fieldmodule.Fieldmodule_createFieldDivergence(self, vectorField, coordinateField)

    def createFieldGradient(self, sourceField, coordinateField):
        return _fieldmodule.Fieldmodule_createFieldGradient(self, sourceField, coordinateField)

    def createFieldSin(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldSin(self, sourceField)

    def createFieldCos(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldCos(self, sourceField)

    def createFieldTan(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldTan(self, sourceField)

    def createFieldAsin(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldAsin(self, sourceField)

    def createFieldAcos(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldAcos(self, sourceField)

    def createFieldAtan(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldAtan(self, sourceField)

    def createFieldAtan2(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldAtan2(self, sourceField1, sourceField2)

    def createFieldCrossProduct(self, *args):
        return _fieldmodule.Fieldmodule_createFieldCrossProduct(self, *args)

    def createFieldDotProduct(self, sourceField1, sourceField2):
        return _fieldmodule.Fieldmodule_createFieldDotProduct(self, sourceField1, sourceField2)

    def createFieldMagnitude(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldMagnitude(self, sourceField)

    def createFieldNodeLookup(self, sourceField, lookupNode):
        return _fieldmodule.Fieldmodule_createFieldNodeLookup(self, sourceField, lookupNode)

    def createFieldNormalise(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldNormalise(self, sourceField)

    def createFieldImagefilterBinaryDilate(self, sourceField, radius, dilate_value):
        return _fieldmodule.Fieldmodule_createFieldImagefilterBinaryDilate(self, sourceField, radius, dilate_value)

    def createFieldImagefilterBinaryErode(self, sourceField, radius, erode_value):
        return _fieldmodule.Fieldmodule_createFieldImagefilterBinaryErode(self, sourceField, radius, erode_value)

    def createFieldImagefilterBinaryThreshold(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldImagefilterBinaryThreshold(self, sourceField)

    def createFieldImagefilterCannyEdgeDetection(self, sourceField, variance, maximumError, upperThreshold, lowerThreshold):
        return _fieldmodule.Fieldmodule_createFieldImagefilterCannyEdgeDetection(self, sourceField, variance, maximumError, upperThreshold, lowerThreshold)

    def createFieldImagefilterConnectedThreshold(self, sourceField, lowerThreshold, upperThreshold, replaceValue, dimension, seedPointsCount):
        return _fieldmodule.Fieldmodule_createFieldImagefilterConnectedThreshold(self, sourceField, lowerThreshold, upperThreshold, replaceValue, dimension, seedPointsCount)

    def createFieldImagefilterCurvatureAnisotropicDiffusion(self, sourceField, timeStep, conductance, numIterations):
        return _fieldmodule.Fieldmodule_createFieldImagefilterCurvatureAnisotropicDiffusion(self, sourceField, timeStep, conductance, numIterations)

    def createFieldImagefilterDiscreteGaussian(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldImagefilterDiscreteGaussian(self, sourceField)

    def createFieldImagefilterHistogram(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldImagefilterHistogram(self, sourceField)

    def createFieldImagefilterMean(self, sourceField, radiusSizesCount):
        return _fieldmodule.Fieldmodule_createFieldImagefilterMean(self, sourceField, radiusSizesCount)

    def createFieldImagefilterGradientMagnitudeRecursiveGaussian(self, sourceField, sigma):
        return _fieldmodule.Fieldmodule_createFieldImagefilterGradientMagnitudeRecursiveGaussian(self, sourceField, sigma)

    def createFieldImagefilterRescaleIntensity(self, sourceField, outputMin, outputMax):
        return _fieldmodule.Fieldmodule_createFieldImagefilterRescaleIntensity(self, sourceField, outputMin, outputMax)

    def createFieldImagefilterSigmoid(self, sourceField, min, max, alpha, beta):
        return _fieldmodule.Fieldmodule_createFieldImagefilterSigmoid(self, sourceField, min, max, alpha, beta)

    def createFieldImagefilterThreshold(self, sourceField):
        return _fieldmodule.Fieldmodule_createFieldImagefilterThreshold(self, sourceField)

    def createFieldSceneviewerProjection(self, sceneviewer, fromCoordinateSystem, toCoordinateSystem):
        return _fieldmodule.Fieldmodule_createFieldSceneviewerProjection(self, sceneviewer, fromCoordinateSystem, toCoordinateSystem)

# Register Fieldmodule in _fieldmodule:
_fieldmodule.Fieldmodule_swigregister(Fieldmodule)


def __eq__(*args):
    return _fieldmodule.__eq__(*args)
class Fieldmoduleevent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fieldmodule.Fieldmoduleevent_swiginit(self, _fieldmodule.new_Fieldmoduleevent(*args))
    __swig_destroy__ = _fieldmodule.delete_Fieldmoduleevent

    def isValid(self):
        return _fieldmodule.Fieldmoduleevent_isValid(self)

    def getId(self):
        return _fieldmodule.Fieldmoduleevent_getId(self)

    def getFieldChangeFlags(self, field):
        return _fieldmodule.Fieldmoduleevent_getFieldChangeFlags(self, field)

    def getMeshchanges(self, mesh):
        return _fieldmodule.Fieldmoduleevent_getMeshchanges(self, mesh)

    def getNodesetchanges(self, nodeset):
        return _fieldmodule.Fieldmoduleevent_getNodesetchanges(self, nodeset)

    def getSummaryFieldChangeFlags(self):
        return _fieldmodule.Fieldmoduleevent_getSummaryFieldChangeFlags(self)

# Register Fieldmoduleevent in _fieldmodule:
_fieldmodule.Fieldmoduleevent_swigregister(Fieldmoduleevent)

class Fieldmodulecallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fieldmodule.delete_Fieldmodulecallback

# Register Fieldmodulecallback in _fieldmodule:
_fieldmodule.Fieldmodulecallback_swigregister(Fieldmodulecallback)

class Fieldmodulenotifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fieldmodule.Fieldmodulenotifier_swiginit(self, _fieldmodule.new_Fieldmodulenotifier(*args))
    __swig_destroy__ = _fieldmodule.delete_Fieldmodulenotifier

    def isValid(self):
        return _fieldmodule.Fieldmodulenotifier_isValid(self)

    def getId(self):
        return _fieldmodule.Fieldmodulenotifier_getId(self)

    def setCallback(self, *args):
        return _fieldmodule.Fieldmodulenotifier_setCallback(self, *args)

    def clearCallback(self):
        return _fieldmodule.Fieldmodulenotifier_clearCallback(self)

# Register Fieldmodulenotifier in _fieldmodule:
_fieldmodule.Fieldmodulenotifier_swigregister(Fieldmodulenotifier)



