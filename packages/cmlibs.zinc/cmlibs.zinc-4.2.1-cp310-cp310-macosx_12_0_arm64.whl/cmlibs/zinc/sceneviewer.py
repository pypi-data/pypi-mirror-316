# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sceneviewer
else:
    import _sceneviewer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import cmlibs.zinc.light
import cmlibs.zinc.scene
import cmlibs.zinc.graphics
import cmlibs.zinc.field
import cmlibs.zinc.differentialoperator
import cmlibs.zinc.element
import cmlibs.zinc.node
import cmlibs.zinc.fieldassignment
import cmlibs.zinc.fieldcache
import cmlibs.zinc.fieldmodule
import cmlibs.zinc.scenecoordinatesystem
import cmlibs.zinc.timesequence
import cmlibs.zinc.optimisation
import cmlibs.zinc.fieldsmoothing
import cmlibs.zinc.fieldparameters
import cmlibs.zinc.fieldrange
import cmlibs.zinc.region
import cmlibs.zinc.context
import cmlibs.zinc.font
import cmlibs.zinc.glyph
import cmlibs.zinc.material
import cmlibs.zinc.spectrum
import cmlibs.zinc.logger
import cmlibs.zinc.scenefilter
import cmlibs.zinc.shader
import cmlibs.zinc.tessellation
import cmlibs.zinc.timekeeper
import cmlibs.zinc.timenotifier
import cmlibs.zinc.streamregion
import cmlibs.zinc.stream
import cmlibs.zinc.streamimage
import cmlibs.zinc.selection
import cmlibs.zinc.scenepicker
import cmlibs.zinc.streamscene
class Sceneviewerevent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sceneviewer.Sceneviewerevent_swiginit(self, _sceneviewer.new_Sceneviewerevent(*args))
    CHANGE_FLAG_NONE = _sceneviewer.Sceneviewerevent_CHANGE_FLAG_NONE
    CHANGE_FLAG_REPAINT_REQUIRED = _sceneviewer.Sceneviewerevent_CHANGE_FLAG_REPAINT_REQUIRED
    CHANGE_FLAG_TRANSFORM = _sceneviewer.Sceneviewerevent_CHANGE_FLAG_TRANSFORM
    CHANGE_FLAG_FINAL = _sceneviewer.Sceneviewerevent_CHANGE_FLAG_FINAL
    __swig_destroy__ = _sceneviewer.delete_Sceneviewerevent

    def isValid(self):
        return _sceneviewer.Sceneviewerevent_isValid(self)

    def getId(self):
        return _sceneviewer.Sceneviewerevent_getId(self)

    def getChangeFlags(self):
        return _sceneviewer.Sceneviewerevent_getChangeFlags(self)

# Register Sceneviewerevent in _sceneviewer:
_sceneviewer.Sceneviewerevent_swigregister(Sceneviewerevent)
class Sceneviewercallback(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sceneviewer.delete_Sceneviewercallback

# Register Sceneviewercallback in _sceneviewer:
_sceneviewer.Sceneviewercallback_swigregister(Sceneviewercallback)
class Sceneviewernotifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sceneviewer.Sceneviewernotifier_swiginit(self, _sceneviewer.new_Sceneviewernotifier(*args))
    __swig_destroy__ = _sceneviewer.delete_Sceneviewernotifier

    def isValid(self):
        return _sceneviewer.Sceneviewernotifier_isValid(self)

    def getId(self):
        return _sceneviewer.Sceneviewernotifier_getId(self)

    def setCallback(self, *args):
        return _sceneviewer.Sceneviewernotifier_setCallback(self, *args)

    def clearCallback(self):
        return _sceneviewer.Sceneviewernotifier_clearCallback(self)

# Register Sceneviewernotifier in _sceneviewer:
_sceneviewer.Sceneviewernotifier_swigregister(Sceneviewernotifier)
class Sceneviewer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BUFFERING_MODE_INVALID = _sceneviewer.Sceneviewer_BUFFERING_MODE_INVALID
    BUFFERING_MODE_DEFAULT = _sceneviewer.Sceneviewer_BUFFERING_MODE_DEFAULT
    BUFFERING_MODE_SINGLE = _sceneviewer.Sceneviewer_BUFFERING_MODE_SINGLE
    BUFFERING_MODE_DOUBLE = _sceneviewer.Sceneviewer_BUFFERING_MODE_DOUBLE
    BUFFERING_MODE_RENDER_OFFSCREEN_AND_COPY = _sceneviewer.Sceneviewer_BUFFERING_MODE_RENDER_OFFSCREEN_AND_COPY
    BUFFERING_MODE_RENDER_OFFSCREEN_AND_BLEND = _sceneviewer.Sceneviewer_BUFFERING_MODE_RENDER_OFFSCREEN_AND_BLEND
    INTERACT_MODE_INVALID = _sceneviewer.Sceneviewer_INTERACT_MODE_INVALID
    INTERACT_MODE_STANDARD = _sceneviewer.Sceneviewer_INTERACT_MODE_STANDARD
    INTERACT_MODE_2D = _sceneviewer.Sceneviewer_INTERACT_MODE_2D
    PROJECTION_MODE_INVALID = _sceneviewer.Sceneviewer_PROJECTION_MODE_INVALID
    PROJECTION_MODE_PARALLEL = _sceneviewer.Sceneviewer_PROJECTION_MODE_PARALLEL
    PROJECTION_MODE_PERSPECTIVE = _sceneviewer.Sceneviewer_PROJECTION_MODE_PERSPECTIVE
    STEREO_MODE_INVALID = _sceneviewer.Sceneviewer_STEREO_MODE_INVALID
    STEREO_MODE_DEFAULT = _sceneviewer.Sceneviewer_STEREO_MODE_DEFAULT
    STEREO_MODE_MONO = _sceneviewer.Sceneviewer_STEREO_MODE_MONO
    STEREO_MODE_STEREO = _sceneviewer.Sceneviewer_STEREO_MODE_STEREO
    TRANSPARENCY_MODE_INVALID = _sceneviewer.Sceneviewer_TRANSPARENCY_MODE_INVALID
    TRANSPARENCY_MODE_FAST = _sceneviewer.Sceneviewer_TRANSPARENCY_MODE_FAST
    TRANSPARENCY_MODE_SLOW = _sceneviewer.Sceneviewer_TRANSPARENCY_MODE_SLOW
    TRANSPARENCY_MODE_ORDER_INDEPENDENT = _sceneviewer.Sceneviewer_TRANSPARENCY_MODE_ORDER_INDEPENDENT
    VIEWPORT_MODE_INVALID = _sceneviewer.Sceneviewer_VIEWPORT_MODE_INVALID
    VIEWPORT_MODE_ABSOLUTE = _sceneviewer.Sceneviewer_VIEWPORT_MODE_ABSOLUTE
    VIEWPORT_MODE_RELATIVE = _sceneviewer.Sceneviewer_VIEWPORT_MODE_RELATIVE
    VIEWPORT_MODE_DISTORTING_RELATIVE = _sceneviewer.Sceneviewer_VIEWPORT_MODE_DISTORTING_RELATIVE

    def __init__(self, *args):
        _sceneviewer.Sceneviewer_swiginit(self, _sceneviewer.new_Sceneviewer(*args))
    __swig_destroy__ = _sceneviewer.delete_Sceneviewer

    def isValid(self):
        return _sceneviewer.Sceneviewer_isValid(self)

    def getId(self):
        return _sceneviewer.Sceneviewer_getId(self)

    def beginChange(self):
        return _sceneviewer.Sceneviewer_beginChange(self)

    def endChange(self):
        return _sceneviewer.Sceneviewer_endChange(self)

    def renderScene(self):
        return _sceneviewer.Sceneviewer_renderScene(self)

    def getRenderTimeout(self):
        return _sceneviewer.Sceneviewer_getRenderTimeout(self)

    def setRenderTimeout(self, timeout):
        return _sceneviewer.Sceneviewer_setRenderTimeout(self, timeout)

    def setScene(self, scene):
        return _sceneviewer.Sceneviewer_setScene(self, scene)

    def getScene(self):
        return _sceneviewer.Sceneviewer_getScene(self)

    def setScenefilter(self, scenefilter):
        return _sceneviewer.Sceneviewer_setScenefilter(self, scenefilter)

    def getScenefilter(self):
        return _sceneviewer.Sceneviewer_getScenefilter(self)

    def setViewportSize(self, width, height):
        return _sceneviewer.Sceneviewer_setViewportSize(self, width, height)

    def createSceneviewerinput(self):
        return _sceneviewer.Sceneviewer_createSceneviewerinput(self)

    def processSceneviewerinput(self, input):
        return _sceneviewer.Sceneviewer_processSceneviewerinput(self, input)

    def getAntialiasSampling(self):
        return _sceneviewer.Sceneviewer_getAntialiasSampling(self)

    def setAntialiasSampling(self, numberOfSamples):
        return _sceneviewer.Sceneviewer_setAntialiasSampling(self, numberOfSamples)

    def getBackgroundColourAlpha(self):
        return _sceneviewer.Sceneviewer_getBackgroundColourAlpha(self)

    def setBackgroundColourAlpha(self, alpha):
        return _sceneviewer.Sceneviewer_setBackgroundColourAlpha(self, alpha)

    def setBackgroundColourComponentRGB(self, red, green, blue):
        return _sceneviewer.Sceneviewer_setBackgroundColourComponentRGB(self, red, green, blue)

    def setBackgroundColourComponentRGBA(self, red, green, blue, alpha):
        return _sceneviewer.Sceneviewer_setBackgroundColourComponentRGBA(self, red, green, blue, alpha)

    def getBackgroundColourRGB(self):
        return _sceneviewer.Sceneviewer_getBackgroundColourRGB(self)

    def setBackgroundColourRGB(self, valuesIn3):
        return _sceneviewer.Sceneviewer_setBackgroundColourRGB(self, valuesIn3)

    def getBackgroundColourRGBA(self):
        return _sceneviewer.Sceneviewer_getBackgroundColourRGBA(self)

    def setBackgroundColourRGBA(self, valuesIn4):
        return _sceneviewer.Sceneviewer_setBackgroundColourRGBA(self, valuesIn4)

    def getEyePosition(self):
        return _sceneviewer.Sceneviewer_getEyePosition(self)

    def setEyePosition(self, eyeValuesIn3):
        return _sceneviewer.Sceneviewer_setEyePosition(self, eyeValuesIn3)

    def getInteractMode(self):
        return _sceneviewer.Sceneviewer_getInteractMode(self)

    def setInteractMode(self, interactMode):
        return _sceneviewer.Sceneviewer_setInteractMode(self, interactMode)

    def getLookatPosition(self):
        return _sceneviewer.Sceneviewer_getLookatPosition(self)

    def setLookatPosition(self, lookatValuesIn3):
        return _sceneviewer.Sceneviewer_setLookatPosition(self, lookatValuesIn3)

    def getPerturbLinesFlag(self):
        return _sceneviewer.Sceneviewer_getPerturbLinesFlag(self)

    def setPerturbLinesFlag(self, value):
        return _sceneviewer.Sceneviewer_setPerturbLinesFlag(self, value)

    @staticmethod
    def ProjectionModeEnumFromString(name):
        return _sceneviewer.Sceneviewer_ProjectionModeEnumFromString(name)

    @staticmethod
    def ProjectionModeEnumToString(mode):
        return _sceneviewer.Sceneviewer_ProjectionModeEnumToString(mode)

    def getProjectionMode(self):
        return _sceneviewer.Sceneviewer_getProjectionMode(self)

    def setProjectionMode(self, projectionMode):
        return _sceneviewer.Sceneviewer_setProjectionMode(self, projectionMode)

    def getTranslationRate(self):
        return _sceneviewer.Sceneviewer_getTranslationRate(self)

    def setTranslationRate(self, translationRate):
        return _sceneviewer.Sceneviewer_setTranslationRate(self, translationRate)

    def getTumbleRate(self):
        return _sceneviewer.Sceneviewer_getTumbleRate(self)

    def setTumbleRate(self, tumbleRate):
        return _sceneviewer.Sceneviewer_setTumbleRate(self, tumbleRate)

    def getZoomRate(self):
        return _sceneviewer.Sceneviewer_getZoomRate(self)

    def setZoomRate(self, zoomRate):
        return _sceneviewer.Sceneviewer_setZoomRate(self, zoomRate)

    def getUpVector(self):
        return _sceneviewer.Sceneviewer_getUpVector(self)

    def setUpVector(self, upVectorValuesIn3):
        return _sceneviewer.Sceneviewer_setUpVector(self, upVectorValuesIn3)

    def getLookatParameters(self):
        return _sceneviewer.Sceneviewer_getLookatParameters(self)

    def setLookatParametersNonSkew(self, eyeValuesIn3, lookatValuesIn3, upVectorValuesIn3):
        return _sceneviewer.Sceneviewer_setLookatParametersNonSkew(self, eyeValuesIn3, lookatValuesIn3, upVectorValuesIn3)

    def viewAll(self):
        return _sceneviewer.Sceneviewer_viewAll(self)

    @staticmethod
    def TransparencyModeEnumFromString(name):
        return _sceneviewer.Sceneviewer_TransparencyModeEnumFromString(name)

    @staticmethod
    def TransparencyModeEnumToString(mode):
        return _sceneviewer.Sceneviewer_TransparencyModeEnumToString(mode)

    def getTransparencyMode(self):
        return _sceneviewer.Sceneviewer_getTransparencyMode(self)

    def setTransparencyMode(self, transparencyMode):
        return _sceneviewer.Sceneviewer_setTransparencyMode(self, transparencyMode)

    def getTransparencyLayers(self):
        return _sceneviewer.Sceneviewer_getTransparencyLayers(self)

    def setTransparencyLayers(self, layers):
        return _sceneviewer.Sceneviewer_setTransparencyLayers(self, layers)

    def getViewAngle(self):
        return _sceneviewer.Sceneviewer_getViewAngle(self)

    def setViewAngle(self, viewAngle):
        return _sceneviewer.Sceneviewer_setViewAngle(self, viewAngle)

    def getViewingVolume(self):
        return _sceneviewer.Sceneviewer_getViewingVolume(self)

    def setViewingVolume(self, left, right, bottom, top, near_plane, far_plane):
        return _sceneviewer.Sceneviewer_setViewingVolume(self, left, right, bottom, top, near_plane, far_plane)

    def getViewportMode(self):
        return _sceneviewer.Sceneviewer_getViewportMode(self)

    def setViewportMode(self, viewportMode):
        return _sceneviewer.Sceneviewer_setViewportMode(self, viewportMode)

    def getFarClippingPlane(self):
        return _sceneviewer.Sceneviewer_getFarClippingPlane(self)

    def getNearClippingPlane(self):
        return _sceneviewer.Sceneviewer_getNearClippingPlane(self)

    def setFarClippingPlane(self, farClippingPlane):
        return _sceneviewer.Sceneviewer_setFarClippingPlane(self, farClippingPlane)

    def setNearClippingPlane(self, nearClippingPlane):
        return _sceneviewer.Sceneviewer_setNearClippingPlane(self, nearClippingPlane)

    def writeImageToFile(self, file_name, force_onscreen, preferred_width, preferred_height, preferred_antialias, preferred_transparency_layers):
        return _sceneviewer.Sceneviewer_writeImageToFile(self, file_name, force_onscreen, preferred_width, preferred_height, preferred_antialias, preferred_transparency_layers)

    def addLight(self, light):
        return _sceneviewer.Sceneviewer_addLight(self, light)

    def hasLight(self, light):
        return _sceneviewer.Sceneviewer_hasLight(self, light)

    def removeLight(self, light):
        return _sceneviewer.Sceneviewer_removeLight(self, light)

    def isLightingLocalViewer(self):
        return _sceneviewer.Sceneviewer_isLightingLocalViewer(self)

    def setLightingLocalViewer(self, value):
        return _sceneviewer.Sceneviewer_setLightingLocalViewer(self, value)

    def isLightingTwoSided(self):
        return _sceneviewer.Sceneviewer_isLightingTwoSided(self)

    def setLightingTwoSided(self, value):
        return _sceneviewer.Sceneviewer_setLightingTwoSided(self, value)

    def transformCoordinates(self, inCoordinateSystem, outCoordinateSystem, localScene, valuesIn3):
        return _sceneviewer.Sceneviewer_transformCoordinates(self, inCoordinateSystem, outCoordinateSystem, localScene, valuesIn3)

    def readDescription(self, description):
        return _sceneviewer.Sceneviewer_readDescription(self, description)

    def writeDescription(self):
        return _sceneviewer.Sceneviewer_writeDescription(self)

    def createSceneviewernotifier(self):
        return _sceneviewer.Sceneviewer_createSceneviewernotifier(self)

# Register Sceneviewer in _sceneviewer:
_sceneviewer.Sceneviewer_swigregister(Sceneviewer)
class Sceneviewermodule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sceneviewer.Sceneviewermodule_swiginit(self, _sceneviewer.new_Sceneviewermodule(*args))
    __swig_destroy__ = _sceneviewer.delete_Sceneviewermodule

    def isValid(self):
        return _sceneviewer.Sceneviewermodule_isValid(self)

    def getId(self):
        return _sceneviewer.Sceneviewermodule_getId(self)

    def createSceneviewer(self, buffering_mode, stereo_mode):
        return _sceneviewer.Sceneviewermodule_createSceneviewer(self, buffering_mode, stereo_mode)

    def getDefaultBackgroundColourAlpha(self):
        return _sceneviewer.Sceneviewermodule_getDefaultBackgroundColourAlpha(self)

    def setDefaultBackgroundColourAlpha(self, alpha):
        return _sceneviewer.Sceneviewermodule_setDefaultBackgroundColourAlpha(self, alpha)

    def getDefaultBackgroundColourRGB(self):
        return _sceneviewer.Sceneviewermodule_getDefaultBackgroundColourRGB(self)

    def setDefaultBackgroundColourRGB(self, valuesIn3):
        return _sceneviewer.Sceneviewermodule_setDefaultBackgroundColourRGB(self, valuesIn3)

    def getDefaultBackgroundColourRGBA(self):
        return _sceneviewer.Sceneviewermodule_getDefaultBackgroundColourRGBA(self)

    def setDefaultBackgroundColourRGBA(self, valuesIn4):
        return _sceneviewer.Sceneviewermodule_setDefaultBackgroundColourRGBA(self, valuesIn4)

# Register Sceneviewermodule in _sceneviewer:
_sceneviewer.Sceneviewermodule_swigregister(Sceneviewermodule)

