[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "histoprint"
dynamic = ["version"]
description = "Pretty print of NumPy (and other) histograms to the console"
readme = "README.rst"
license = "MIT"
requires-python = ">=3.8"
authors = [
    { name = "Lukas Koch", email = "lukas.koch@mailbox.org" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "click>=7.0.0",
    "numpy",
    "uhi>=0.2.1",
]

[project.optional-dependencies]
boost = [
    "boost-histogram>=1.1",
]
rich = [
    "rich>=12",
]
test = [
    "pytest>=6.0",
]
uproot = [
    "awkward>=1",
    "uproot>=4",
]

[project.scripts]
histoprint = "histoprint.cli:histoprint"

[project.urls]
Homepage = "https://github.com/scikit-hep/histoprint"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "histoprint/version.py"


[tool.setuptools_scm]
write_to = "histoprint/version.py"


[tool.uv]
dev-dependencies = ["histoprint[boost,rich,test,uproot]", "pandas"]
environments = ["python_version >= '3.11'"]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --strict-markers --showlocals --color=yes"
testpaths = [
    "tests",
]


[tool.mypy]
files = ["histoprint"]
python_version = "3.8"
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unused_configs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "pandas",
    "uproot",
    "awkward",
]
ignore_missing_imports = true


[tool.ruff]
lint.extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
lint.ignore = [
  "PLR09",    # Too many x
  "PLR2004",  # Magic value in comparison
  "ISC001",   # Conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20", "NPY002"]
