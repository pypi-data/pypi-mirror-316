import time
from typing import Optional, Union, Dict, Literal

from pinecone_plugin_interface import PineconePlugin

from .db_control.core.client.api.manage_indexes_api import ManageIndexesApi
from .db_control.core.client import ApiClient
from .db_control.core.client.models import (
    CreateIndexForModelRequest,
    CreateIndexForModelRequestEmbed,
    DeletionProtection,
    IndexTags,
)
from .models import IndexModel, IndexEmbed
from .version import API_VERSION


class CreateIndexForModel(PineconePlugin):
    """
    The `CreateIndexForModel` class adds functionality to the Pinecone SDK to allow creating indexes from
    from specific embedding models.

    :param config: A `pinecone.config.Config` object, configured and built in the Pinecone class.
    :type config: `pinecone.config.Config`, required
    """

    def __init__(self, config, openapi_client_builder):
        self.config = config
        self.db_control_api = openapi_client_builder(
            ApiClient, ManageIndexesApi, API_VERSION
        )

    def __call__(
        self,
        name: str,
        cloud: str,
        region: str,
        embed: Union[Dict, IndexEmbed],
        tags: Optional[Dict[str, str]] = None,
        deletion_protection: Optional[Literal["enabled", "disabled"]] = "disabled",
        timeout: Optional[int] = None,
    ) -> IndexModel:
        """
        Create an index for a model.

        This operation creates an index for a model. The index is used to store embeddings generated by the model. The index can be used to search and retrieve embeddings.

        :param name: The name of the index to create. Must be unique within your project and
            cannot be changed once created. Allowed characters are lowercase letters, numbers,
            and hyphens and the name may not begin or end with hyphens. Maximum length is 45 characters.
        :type name: str
        :param cloud: The cloud provider to use for the index.
        :type cloud: str
        :param region: The region to use for the index.
        :type region: str
        :param embed: The embedding configuration for the index.
        :type embed: Union[Dict, IndexEmbed]
        :param tags: A dictionary of tags to associate with the index.
        :type tags: Optional[Dict[str, str]]
        :param deletion_protection: If enabled, the index cannot be deleted. If disabled, the index can be deleted. Default: "disabled"
        :type deletion_protection: Optional[Literal["enabled", "disabled"]]
        :type timeout: Optional[int]
        :param timeout: Specify the number of seconds to wait until index gets ready. If None, wait indefinitely; if >=0, time out after this many seconds;
            if -1, return immediately and do not wait. Default: None
        :return: The index that was created.
        :rtype: IndexModel
        """
        if any(param is None for param in (name, cloud, region, embed)):
            raise ValueError(
                "Please provide all required parameters for creating an index from a model"
            )

        if deletion_protection in ["enabled", "disabled"]:
            dp = DeletionProtection(deletion_protection)
        else:
            raise ValueError(
                "deletion_protection must be either 'enabled' or 'disabled'"
            )

        request = CreateIndexForModelRequest(
            name=name,
            cloud=cloud,
            region=region,
            deletion_protection=dp,
            embed=CreateIndexForModelRequestEmbed(**embed),
        )

        if tags:
            request.tags = IndexTags(**tags)

        create_response = self.db_control_api.create_index_for_model(request)

        if timeout == -1:
            return create_response
        if timeout is None:
            while not self._is_index_ready(name):
                time.sleep(5)
        else:
            while (not self._is_index_ready(name)) and timeout >= 0:
                time.sleep(5)
                timeout -= 5
        if timeout and timeout < 0:
            raise (
                TimeoutError(
                    "Please call the describe_index API ({}) to confirm index status.".format(
                        "https://www.pinecone.io/docs/api/operation/describe_index/"
                    )
                )
            )

        return self.db_control_api.describe_index(name)

    def _get_status(self, name: str):
        api_instance = self.db_control_api
        response = api_instance.describe_index(name)
        return response["status"]

    def _is_index_ready(self, name: str) -> bool:
        status = self._get_status(name)
        ready = status["ready"]
        return ready
