[project]
name = "poetry-ycf-plugin"
dynamic = ["version"]
description = "Poetry plugin for working with Yandex Cloud Functions"
readme = "readme.md"
license = {text = "MIT"}
authors = [
    {name = "Aleksei Marusich", email = "aleksei.marusich@rocshers.com"}
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Software Distribution",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
]
keywords = ["rocshers", "poetry", "git"]
requires-python = ">=3.12"
dependencies = [
    "boto3>=1.35.84",
    "poetry>=1.6",
    "poetry-plugin-export>=1.3.1",
    "pydantic>=2.7.0",
    "pydantic-settings>=2.3.0",
    "pyjwt>=2.10.1",
]

[dependency-groups]
local = [
    "pydantic==2.7.0",
    "pydantic-settings==2.3.0",
    "poetry==1.6",
]
dev = [
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "pre-commit-hooks>=5.0.0",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "ruff>=0.7.3",
    "pytest-cov>=6.0.0",
    "types-requests>=2.32.0.20241016",
]
test = [
    "poetry-git-version-plugin>=2.0.1",
    "ycf-tools>=0.1.8",
]

[project.urls]
Homepage = "https://projects.rocshers.com/open-source/poetry-ycf-plugin"
Repository = "https://gitlab.com/rocshers/python/poetry-ycf-plugin"

[build-system]
requires = ["setuptools", "wheel", "versioningit"]
build-backend = "setuptools.build_meta"

[tool.uv]
package = true

[tool.versioningit]

[tool.setuptools]
packages = ["poetry_ycf_plugin"]
license-files = []

[project.entry-points."poetry.plugin"]
poetry-ycf-plugin = "poetry_ycf_plugin.plugins:PoetryYcfPlugin"

[project.entry-points."poetry.application.plugin"]
poetry-ycf-plugin = "poetry_ycf_plugin.plugins:PoetryYcfApplicationPlugin"

[tool.black]
skip-string-normalization = true
line-length = 120

[tool.isort]
profile = "black"
line_length = 120

[tool.ruff]
line-length = 120
target-version = "py312"
unsafe-fixes = true

[tool.ruff.format]
preview = true
quote-style = "single"

[tool.ruff.lint]
preview = true
select = ["A", "B", "C", "D", "E", "F", "I", "UP"]
fixable = ["A", "B", "C", "D", "E", "F", "I", "UP"]
ignore = ["UP004", "D100", "D101", "D102", "D103", "D104", "D107", "D415", "D105", "D106", "D203", "D213", "B008"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.coverage.run]
omit = [
    "*/tests/*",
    "*/__main__.py",
    "*/base.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.pytest.ini_options]
addopts = "-vvs --tb=short"
testpaths = [
    "tests",
    "integration",
]
python_files = [
    "tests/*.py",
    "test_*.py"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore:Module already imported:pytest.PytestWarning"
]
log_cli=true
log_level='INFO'
xfail_strict = true
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"

[tool.mypy]
python_version = "3.12"
plugins = ["pydantic.mypy"]
ignore_missing_imports = true

[tool.poetry-ycf-plugin]
entrypoint = 'test_project.entrypoint.index_entrypoint'
build_dependencies_groups = ['tools']
