# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import model_services_pb2 as model__services__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in model_services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TensorTransportServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetModelStatuses = channel.unary_unary(
                '/model_services.TensorTransportService/GetModelStatuses',
                request_serializer=model__services__pb2.GetModelStatusesRequest.SerializeToString,
                response_deserializer=model__services__pb2.GetModelStatusesResponse.FromString,
                _registered_method=True)
        self.GetJobStatuses = channel.unary_unary(
                '/model_services.TensorTransportService/GetJobStatuses',
                request_serializer=model__services__pb2.GetJobStatusesRequest.SerializeToString,
                response_deserializer=model__services__pb2.GetJobStatusesResponse.FromString,
                _registered_method=True)
        self.LoadToRam = channel.unary_unary(
                '/model_services.TensorTransportService/LoadToRam',
                request_serializer=model__services__pb2.LoadToRamRequest.SerializeToString,
                response_deserializer=model__services__pb2.TensorTransportRequestResponse.FromString,
                _registered_method=True)
        self.UnloadFromRam = channel.unary_unary(
                '/model_services.TensorTransportService/UnloadFromRam',
                request_serializer=model__services__pb2.UnloadFromRamRequest.SerializeToString,
                response_deserializer=model__services__pb2.TensorTransportRequestResponse.FromString,
                _registered_method=True)
        self.LoadToGpu = channel.unary_unary(
                '/model_services.TensorTransportService/LoadToGpu',
                request_serializer=model__services__pb2.LoadToGpuRequest.SerializeToString,
                response_deserializer=model__services__pb2.TensorTransportRequestResponse.FromString,
                _registered_method=True)
        self.OffloadToRam = channel.unary_unary(
                '/model_services.TensorTransportService/OffloadToRam',
                request_serializer=model__services__pb2.OffloadToRamRequest.SerializeToString,
                response_deserializer=model__services__pb2.TensorTransportRequestResponse.FromString,
                _registered_method=True)
        self.LoadFromRam = channel.unary_unary(
                '/model_services.TensorTransportService/LoadFromRam',
                request_serializer=model__services__pb2.LoadFromRamRequest.SerializeToString,
                response_deserializer=model__services__pb2.TensorTransportRequestResponse.FromString,
                _registered_method=True)
        self.WriteToDisk = channel.unary_unary(
                '/model_services.TensorTransportService/WriteToDisk',
                request_serializer=model__services__pb2.WriteToDiskRequest.SerializeToString,
                response_deserializer=model__services__pb2.TensorTransportRequestResponse.FromString,
                _registered_method=True)


class TensorTransportServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetModelStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadToRam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnloadFromRam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadToGpu(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OffloadToRam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadFromRam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteToDisk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TensorTransportServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetModelStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelStatuses,
                    request_deserializer=model__services__pb2.GetModelStatusesRequest.FromString,
                    response_serializer=model__services__pb2.GetModelStatusesResponse.SerializeToString,
            ),
            'GetJobStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatuses,
                    request_deserializer=model__services__pb2.GetJobStatusesRequest.FromString,
                    response_serializer=model__services__pb2.GetJobStatusesResponse.SerializeToString,
            ),
            'LoadToRam': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadToRam,
                    request_deserializer=model__services__pb2.LoadToRamRequest.FromString,
                    response_serializer=model__services__pb2.TensorTransportRequestResponse.SerializeToString,
            ),
            'UnloadFromRam': grpc.unary_unary_rpc_method_handler(
                    servicer.UnloadFromRam,
                    request_deserializer=model__services__pb2.UnloadFromRamRequest.FromString,
                    response_serializer=model__services__pb2.TensorTransportRequestResponse.SerializeToString,
            ),
            'LoadToGpu': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadToGpu,
                    request_deserializer=model__services__pb2.LoadToGpuRequest.FromString,
                    response_serializer=model__services__pb2.TensorTransportRequestResponse.SerializeToString,
            ),
            'OffloadToRam': grpc.unary_unary_rpc_method_handler(
                    servicer.OffloadToRam,
                    request_deserializer=model__services__pb2.OffloadToRamRequest.FromString,
                    response_serializer=model__services__pb2.TensorTransportRequestResponse.SerializeToString,
            ),
            'LoadFromRam': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadFromRam,
                    request_deserializer=model__services__pb2.LoadFromRamRequest.FromString,
                    response_serializer=model__services__pb2.TensorTransportRequestResponse.SerializeToString,
            ),
            'WriteToDisk': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteToDisk,
                    request_deserializer=model__services__pb2.WriteToDiskRequest.FromString,
                    response_serializer=model__services__pb2.TensorTransportRequestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model_services.TensorTransportService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('model_services.TensorTransportService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TensorTransportService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetModelStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/GetModelStatuses',
            model__services__pb2.GetModelStatusesRequest.SerializeToString,
            model__services__pb2.GetModelStatusesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJobStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/GetJobStatuses',
            model__services__pb2.GetJobStatusesRequest.SerializeToString,
            model__services__pb2.GetJobStatusesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadToRam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/LoadToRam',
            model__services__pb2.LoadToRamRequest.SerializeToString,
            model__services__pb2.TensorTransportRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnloadFromRam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/UnloadFromRam',
            model__services__pb2.UnloadFromRamRequest.SerializeToString,
            model__services__pb2.TensorTransportRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadToGpu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/LoadToGpu',
            model__services__pb2.LoadToGpuRequest.SerializeToString,
            model__services__pb2.TensorTransportRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OffloadToRam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/OffloadToRam',
            model__services__pb2.OffloadToRamRequest.SerializeToString,
            model__services__pb2.TensorTransportRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoadFromRam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/LoadFromRam',
            model__services__pb2.LoadFromRamRequest.SerializeToString,
            model__services__pb2.TensorTransportRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteToDisk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.TensorTransportService/WriteToDisk',
            model__services__pb2.WriteToDiskRequest.SerializeToString,
            model__services__pb2.TensorTransportRequestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ModelRegistryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListModels = channel.unary_unary(
                '/model_services.ModelRegistryService/ListModels',
                request_serializer=model__services__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=model__services__pb2.ListModelsResponse.FromString,
                _registered_method=True)
        self.PullModel = channel.unary_unary(
                '/model_services.ModelRegistryService/PullModel',
                request_serializer=model__services__pb2.PullModelRequest.SerializeToString,
                response_deserializer=model__services__pb2.PullModelResponse.FromString,
                _registered_method=True)
        self.RemoveModel = channel.unary_unary(
                '/model_services.ModelRegistryService/RemoveModel',
                request_serializer=model__services__pb2.RemoveModelRequest.SerializeToString,
                response_deserializer=model__services__pb2.RemoveModelResponse.FromString,
                _registered_method=True)
        self.GetModelInfo = channel.unary_unary(
                '/model_services.ModelRegistryService/GetModelInfo',
                request_serializer=model__services__pb2.GetModelInfoRequest.SerializeToString,
                response_deserializer=model__services__pb2.GetModelInfoResponse.FromString,
                _registered_method=True)
        self.UpdateModelStatus = channel.unary_unary(
                '/model_services.ModelRegistryService/UpdateModelStatus',
                request_serializer=model__services__pb2.UpdateModelStatusRequest.SerializeToString,
                response_deserializer=model__services__pb2.UpdateModelStatusResponse.FromString,
                _registered_method=True)


class ModelRegistryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PullModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModelStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelRegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=model__services__pb2.ListModelsRequest.FromString,
                    response_serializer=model__services__pb2.ListModelsResponse.SerializeToString,
            ),
            'PullModel': grpc.unary_unary_rpc_method_handler(
                    servicer.PullModel,
                    request_deserializer=model__services__pb2.PullModelRequest.FromString,
                    response_serializer=model__services__pb2.PullModelResponse.SerializeToString,
            ),
            'RemoveModel': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveModel,
                    request_deserializer=model__services__pb2.RemoveModelRequest.FromString,
                    response_serializer=model__services__pb2.RemoveModelResponse.SerializeToString,
            ),
            'GetModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelInfo,
                    request_deserializer=model__services__pb2.GetModelInfoRequest.FromString,
                    response_serializer=model__services__pb2.GetModelInfoResponse.SerializeToString,
            ),
            'UpdateModelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateModelStatus,
                    request_deserializer=model__services__pb2.UpdateModelStatusRequest.FromString,
                    response_serializer=model__services__pb2.UpdateModelStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model_services.ModelRegistryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('model_services.ModelRegistryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelRegistryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.ModelRegistryService/ListModels',
            model__services__pb2.ListModelsRequest.SerializeToString,
            model__services__pb2.ListModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PullModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.ModelRegistryService/PullModel',
            model__services__pb2.PullModelRequest.SerializeToString,
            model__services__pb2.PullModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.ModelRegistryService/RemoveModel',
            model__services__pb2.RemoveModelRequest.SerializeToString,
            model__services__pb2.RemoveModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.ModelRegistryService/GetModelInfo',
            model__services__pb2.GetModelInfoRequest.SerializeToString,
            model__services__pb2.GetModelInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateModelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_services.ModelRegistryService/UpdateModelStatus',
            model__services__pb2.UpdateModelStatusRequest.SerializeToString,
            model__services__pb2.UpdateModelStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
