"""
Django settings for ecoki_app project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'uyubwfm76)t#zz@z*yluz*^3a(1f@2q9n&z_ve-)ds-qtyf3%*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    ### DEC
    'ecoki_dashboard_active.apps.EcokiDashboardActiveConfig',
    
    # The general purpose templates
    'adminlte3',
    # Optional: Skin for the admin interface
    'adminlte3_theme',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'bootstrap4',

    #'django_plotly_dash.apps.DjangoPlotlyDashConfig',
    'dpd_static_support',
    'rest_framework',
    'markdownify.apps.MarkdownifyConfig',
    'ckeditor' , 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    
    'whitenoise.middleware.WhiteNoiseMiddleware',
    
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    #'django_plotly_dash.middleware.BaseMiddleware',
    #'django_plotly_dash.middleware.ExternalRedirectionMiddleware',

    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecoki_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            ### DEC: ADD YOUR DIRECTORY HERE LIKE SO:
            BASE_DIR + '/ecoki_app/templates/',
            BASE_DIR + '/ecoki_dashboard_active/templates/',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'ecoki_app.custom_context_processors.pipelines_adder',
            ],
        },
    },
]

#WSGI_APPLICATION = 'ecoki_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'ecoki_dashboard_active/db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'de-de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (os.path.join(BASE_DIR, "ecoki_app/templates/static"),)

#STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_FINDERS = [

    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',

    #'django_plotly_dash.finders.DashAssetFinder',
    #'django_plotly_dash.finders.DashComponentFinder',
    #'django_plotly_dash.finders.DashAppDirectoryFinder',
]

#CORS_ORIGIN_WHITELIST = 'localhost:8000' #whitelists the localhost to run
# PLOTLY_DASH = {
#
#     # Route used for the message pipe websocket connection
#     "ws_route" :   "dpd/ws/channel",
#
#     # Route used for direct http insertion of pipe messages
#     "http_route" : "dpd/views",
#
#     # Flag controlling existince of http poke endpoint
#     "http_poke_enabled" : True,
#
#     # Insert data for the demo when migrating
#     "insert_demo_migrations" : False,
#
#     # Timeout for caching of initial arguments in seconds
#     "cache_timeout_initial_arguments": 60,
#
#     # Name of view wrapping function
#     "view_decorator": "django_plotly_dash.access.login_required",
#
#     # Flag to control location of initial argument storage
#     "cache_arguments": True,
#
#     # Flag controlling local serving of assets
#     "serve_locally": True,
# }



# Plotly components containing static content that should
# be handled by the Django staticfiles infrastructure

# PLOTLY_COMPONENTS = [
#
#     # Common components
#     'dash_core_components',
#     'dash_html_components',
#     'dash_renderer',
#     'dash_table',
#     'dash_admin_components',
#
#
#
#     # django-plotly-dash components
#     'dpd_components',
#     # static support if serving local assets
#     'dpd_static_support',
#
#     # Other components, as needed
#     'dash_bootstrap_components',
# ]

# BOD
DATA_UPLOAD_MAX_MEMORY_SIZE = 60485760

MARKDOWNIFY = {
    "default": {
        "STRIP": True,
        "BLEACH": False
    }
}