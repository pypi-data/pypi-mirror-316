# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

METRIC_ROIS_FROM_EXTREMA_METADATA = Metadata(
    id="8077c16d8f1d062ca939cbb2744aaee3511e4ec7.boutiques",
    name="metric-rois-from-extrema",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


class MetricRoisFromExtremaOutputs(typing.NamedTuple):
    """
    Output object returned when calling `metric_rois_from_extrema(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    metric_out: OutputPathType
    """the output metric file"""


def metric_rois_from_extrema(
    surface: InputPathType,
    metric: InputPathType,
    limit: float,
    metric_out: str,
    opt_gaussian_sigma: float | None = None,
    opt_roi_roi_metric: InputPathType | None = None,
    opt_overlap_logic_method: str | None = None,
    opt_column_column: str | None = None,
    runner: Runner | None = None,
) -> MetricRoisFromExtremaOutputs:
    """
    Create metric roi maps from extrema maps.
    
    For each nonzero value in each map, make a map with an ROI around that
    location. If the -gaussian option is specified, then normalized gaussian
    kernels are output instead of ROIs. The <method> argument to -overlap-logic
    must be one of ALLOW, CLOSEST, or EXCLUDE. ALLOW is the default, and means
    that ROIs are treated independently and may overlap. CLOSEST means that ROIs
    may not overlap, and that no ROI contains vertices that are closer to a
    different seed vertex. EXCLUDE means that ROIs may not overlap, and that any
    vertex within range of more than one ROI does not belong to any ROI.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        surface: the surface to use for geodesic distance.
        metric: the input metric file.
        limit: geodesic distance limit from vertex, in mm.
        metric_out: the output metric file.
        opt_gaussian_sigma: generate a gaussian kernel instead of a flat ROI:\
            the sigma for the gaussian kernel, in mm.
        opt_roi_roi_metric: select a region of interest to use: the area to\
            use, as a metric.
        opt_overlap_logic_method: how to handle overlapping ROIs, default\
            ALLOW: the method of resolving overlaps.
        opt_column_column: select a single input column to use: the column\
            number or name.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MetricRoisFromExtremaOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(METRIC_ROIS_FROM_EXTREMA_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-metric-rois-from-extrema")
    cargs.append(execution.input_file(surface))
    cargs.append(execution.input_file(metric))
    cargs.append(str(limit))
    cargs.append(metric_out)
    if opt_gaussian_sigma is not None:
        cargs.extend([
            "-gaussian",
            str(opt_gaussian_sigma)
        ])
    if opt_roi_roi_metric is not None:
        cargs.extend([
            "-roi",
            execution.input_file(opt_roi_roi_metric)
        ])
    if opt_overlap_logic_method is not None:
        cargs.extend([
            "-overlap-logic",
            opt_overlap_logic_method
        ])
    if opt_column_column is not None:
        cargs.extend([
            "-column",
            opt_column_column
        ])
    ret = MetricRoisFromExtremaOutputs(
        root=execution.output_file("."),
        metric_out=execution.output_file(metric_out),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "METRIC_ROIS_FROM_EXTREMA_METADATA",
    "MetricRoisFromExtremaOutputs",
    "metric_rois_from_extrema",
]
