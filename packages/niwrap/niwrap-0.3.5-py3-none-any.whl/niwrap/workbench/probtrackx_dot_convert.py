# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

PROBTRACKX_DOT_CONVERT_METADATA = Metadata(
    id="a166bee9e05b7717d215d29b5221c732cd06e6fb.boutiques",
    name="probtrackx-dot-convert",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


@dataclasses.dataclass
class ProbtrackxDotConvertRowVoxels:
    """
    the output mapping along a row will be voxels.
    """
    voxel_list_file: str
    """a text file containing IJK indices for the voxels used"""
    label_vol: InputPathType
    """a label volume with the dimensions and sform used, with structure
    labels"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            execution: The execution object.
        Returns:
            Command line arguments
        """
        cargs = []
        cargs.append("-row-voxels")
        cargs.append(self.voxel_list_file)
        cargs.append(execution.input_file(self.label_vol))
        return cargs


@dataclasses.dataclass
class ProbtrackxDotConvertRowCifti:
    """
    take the mapping along a row from a cifti file.
    """
    cifti: InputPathType
    """the cifti file to take the mapping from"""
    direction: str
    """which dimension to take the mapping along, ROW or COLUMN"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            execution: The execution object.
        Returns:
            Command line arguments
        """
        cargs = []
        cargs.append("-row-cifti")
        cargs.append(execution.input_file(self.cifti))
        cargs.append(self.direction)
        return cargs


@dataclasses.dataclass
class ProbtrackxDotConvertColVoxels:
    """
    the output mapping along a column will be voxels.
    """
    voxel_list_file: str
    """a text file containing IJK indices for the voxels used"""
    label_vol: InputPathType
    """a label volume with the dimensions and sform used, with structure
    labels"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            execution: The execution object.
        Returns:
            Command line arguments
        """
        cargs = []
        cargs.append("-col-voxels")
        cargs.append(self.voxel_list_file)
        cargs.append(execution.input_file(self.label_vol))
        return cargs


@dataclasses.dataclass
class ProbtrackxDotConvertColCifti:
    """
    take the mapping along a column from a cifti file.
    """
    cifti: InputPathType
    """the cifti file to take the mapping from"""
    direction: str
    """which dimension to take the mapping along, ROW or COLUMN"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            execution: The execution object.
        Returns:
            Command line arguments
        """
        cargs = []
        cargs.append("-col-cifti")
        cargs.append(execution.input_file(self.cifti))
        cargs.append(self.direction)
        return cargs


class ProbtrackxDotConvertOutputs(typing.NamedTuple):
    """
    Output object returned when calling `probtrackx_dot_convert(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    cifti_out: OutputPathType
    """output cifti file"""


def probtrackx_dot_convert(
    dot_file: str,
    cifti_out: str,
    row_voxels: ProbtrackxDotConvertRowVoxels | None = None,
    opt_row_surface_roi_metric: InputPathType | None = None,
    row_cifti: ProbtrackxDotConvertRowCifti | None = None,
    col_voxels: ProbtrackxDotConvertColVoxels | None = None,
    opt_col_surface_roi_metric: InputPathType | None = None,
    col_cifti: ProbtrackxDotConvertColCifti | None = None,
    opt_transpose: bool = False,
    opt_make_symmetric: bool = False,
    runner: Runner | None = None,
) -> ProbtrackxDotConvertOutputs:
    """
    Convert a .dot file from probtrackx to cifti.
    
    NOTE: exactly one -row option and one -col option must be used.
    
    If the input file does not have its indexes sorted in the correct ordering,
    this command may take longer than expected. Specifying -transpose will
    transpose the input matrix before trying to put its values into the cifti
    file, which is currently needed for at least matrix2 in order to display it
    as intended. How the cifti file is displayed is based on which -row option
    is specified: if -row-voxels is specified, then it will display data on
    volume slices. The label names in the label volume(s) must have the
    following names, other names are ignored:
    
    
    CORTEX_LEFT
    CORTEX_RIGHT
    CEREBELLUM
    ACCUMBENS_LEFT
    ACCUMBENS_RIGHT
    ALL_GREY_MATTER
    ALL_WHITE_MATTER
    AMYGDALA_LEFT
    AMYGDALA_RIGHT
    BRAIN_STEM
    CAUDATE_LEFT
    CAUDATE_RIGHT
    CEREBELLAR_WHITE_MATTER_LEFT
    CEREBELLAR_WHITE_MATTER_RIGHT
    CEREBELLUM_LEFT
    CEREBELLUM_RIGHT
    CEREBRAL_WHITE_MATTER_LEFT
    CEREBRAL_WHITE_MATTER_RIGHT
    CORTEX
    DIENCEPHALON_VENTRAL_LEFT
    DIENCEPHALON_VENTRAL_RIGHT
    HIPPOCAMPUS_LEFT
    HIPPOCAMPUS_RIGHT
    INVALID
    OTHER
    OTHER_GREY_MATTER
    OTHER_WHITE_MATTER
    PALLIDUM_LEFT
    PALLIDUM_RIGHT
    PUTAMEN_LEFT
    PUTAMEN_RIGHT
    THALAMUS_LEFT
    THALAMUS_RIGHT.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        dot_file: input .dot file.
        cifti_out: output cifti file.
        row_voxels: the output mapping along a row will be voxels.
        opt_row_surface_roi_metric: the output mapping along a row will be\
            surface vertices: a metric file with positive values on all vertices\
            used.
        row_cifti: take the mapping along a row from a cifti file.
        col_voxels: the output mapping along a column will be voxels.
        opt_col_surface_roi_metric: the output mapping along a column will be\
            surface vertices: a metric file with positive values on all vertices\
            used.
        col_cifti: take the mapping along a column from a cifti file.
        opt_transpose: transpose the input matrix.
        opt_make_symmetric: transform half-square input into full matrix output.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `ProbtrackxDotConvertOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(PROBTRACKX_DOT_CONVERT_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-probtrackx-dot-convert")
    cargs.append(dot_file)
    cargs.append(cifti_out)
    if row_voxels is not None:
        cargs.extend(row_voxels.run(execution))
    if opt_row_surface_roi_metric is not None:
        cargs.extend([
            "-row-surface",
            execution.input_file(opt_row_surface_roi_metric)
        ])
    if row_cifti is not None:
        cargs.extend(row_cifti.run(execution))
    if col_voxels is not None:
        cargs.extend(col_voxels.run(execution))
    if opt_col_surface_roi_metric is not None:
        cargs.extend([
            "-col-surface",
            execution.input_file(opt_col_surface_roi_metric)
        ])
    if col_cifti is not None:
        cargs.extend(col_cifti.run(execution))
    if opt_transpose:
        cargs.append("-transpose")
    if opt_make_symmetric:
        cargs.append("-make-symmetric")
    ret = ProbtrackxDotConvertOutputs(
        root=execution.output_file("."),
        cifti_out=execution.output_file(cifti_out),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "PROBTRACKX_DOT_CONVERT_METADATA",
    "ProbtrackxDotConvertColCifti",
    "ProbtrackxDotConvertColVoxels",
    "ProbtrackxDotConvertOutputs",
    "ProbtrackxDotConvertRowCifti",
    "ProbtrackxDotConvertRowVoxels",
    "probtrackx_dot_convert",
]
