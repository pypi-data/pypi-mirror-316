# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

VOLUME_REDUCE_METADATA = Metadata(
    id="00b070cbd951ede68c79c38901e32520aed29ba6.boutiques",
    name="volume-reduce",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


@dataclasses.dataclass
class VolumeReduceExcludeOutliers:
    """
    exclude non-numeric values and outliers by standard deviation.
    """
    sigma_below: float
    """number of standard deviations below the mean to include"""
    sigma_above: float
    """number of standard deviations above the mean to include"""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            execution: The execution object.
        Returns:
            Command line arguments
        """
        cargs = []
        cargs.append("-exclude-outliers")
        cargs.append(str(self.sigma_below))
        cargs.append(str(self.sigma_above))
        return cargs


class VolumeReduceOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_reduce(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    volume_out: OutputPathType
    """the output volume"""


def volume_reduce(
    volume_in: InputPathType,
    operation: str,
    volume_out: str,
    exclude_outliers: VolumeReduceExcludeOutliers | None = None,
    opt_only_numeric: bool = False,
    runner: Runner | None = None,
) -> VolumeReduceOutputs:
    """
    Perform reduction operation across subvolumes.
    
    For each voxel, takes the data across subvolumes as a vector, and performs
    the specified reduction on it, putting the result into the single output
    volume at that voxel. The reduction operators are as follows:
    
    MAX: the maximum value
    MIN: the minimum value
    INDEXMAX: the 1-based index of the maximum value
    INDEXMIN: the 1-based index of the minimum value
    SUM: add all values
    PRODUCT: multiply all values
    MEAN: the mean of the data
    STDEV: the standard deviation (N denominator)
    SAMPSTDEV: the sample standard deviation (N-1 denominator)
    VARIANCE: the variance of the data
    TSNR: mean divided by sample standard deviation (N-1 denominator)
    COV: sample standard deviation (N-1 denominator) divided by mean
    L2NORM: square root of sum of squares
    MEDIAN: the median of the data
    MODE: the mode of the data
    COUNT_NONZERO: the number of nonzero elements in the data
    .
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        volume_in: the volume file to reduce.
        operation: the reduction operator to use.
        volume_out: the output volume.
        exclude_outliers: exclude non-numeric values and outliers by standard\
            deviation.
        opt_only_numeric: exclude non-numeric values.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VolumeReduceOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VOLUME_REDUCE_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-reduce")
    cargs.append(execution.input_file(volume_in))
    cargs.append(operation)
    cargs.append(volume_out)
    if exclude_outliers is not None:
        cargs.extend(exclude_outliers.run(execution))
    if opt_only_numeric:
        cargs.append("-only-numeric")
    ret = VolumeReduceOutputs(
        root=execution.output_file("."),
        volume_out=execution.output_file(volume_out),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VOLUME_REDUCE_METADATA",
    "VolumeReduceExcludeOutliers",
    "VolumeReduceOutputs",
    "volume_reduce",
]
