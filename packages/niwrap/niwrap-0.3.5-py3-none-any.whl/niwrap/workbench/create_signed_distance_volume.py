# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

CREATE_SIGNED_DISTANCE_VOLUME_METADATA = Metadata(
    id="731fd28e261e758f0a5e308e118201b414f3a4c8.boutiques",
    name="create-signed-distance-volume",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


class CreateSignedDistanceVolumeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `create_signed_distance_volume(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    outvol: OutputPathType
    """the output volume"""
    opt_roi_out_roi_vol: OutputPathType | None
    """output an roi volume of where the output has a computed value: the output
    roi volume"""


def create_signed_distance_volume(
    surface: InputPathType,
    refspace: str,
    outvol: str,
    opt_roi_out_roi_vol: str | None = None,
    opt_fill_value_value: float | None = None,
    opt_exact_limit_dist: float | None = None,
    opt_approx_limit_dist: float | None = None,
    opt_approx_neighborhood_num: int | None = None,
    opt_winding_method: str | None = None,
    runner: Runner | None = None,
) -> CreateSignedDistanceVolumeOutputs:
    """
    Create signed distance volume from surface.
    
    Computes the signed distance function of the surface. Exact distance is
    calculated by finding the closest point on any surface triangle to the
    center of the voxel. Approximate distance is calculated starting with these
    distances, using dijkstra's method with a neighborhood of voxels. Specifying
    too small of an exact distance may produce unexpected results. Valid
    specifiers for winding methods are as follows:
    
    EVEN_ODD (default)
    NEGATIVE
    NONZERO
    NORMALS
    
    The NORMALS method uses the normals of triangles and edges, or the closest
    triangle hit by a ray from the point. This method may be slightly faster,
    but is only reliable for a closed surface that does not cross through
    itself. All other methods count entry (positive) and exit (negative)
    crossings of a vertical ray from the point, then counts as inside if the
    total is odd, negative, or nonzero, respectively.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        surface: the input surface.
        refspace: a volume in the desired output space (dims, spacing, origin).
        outvol: the output volume.
        opt_roi_out_roi_vol: output an roi volume of where the output has a\
            computed value: the output roi volume.
        opt_fill_value_value: specify a value to put in all voxels that don't\
            get assigned a distance: value to fill with (default 0).
        opt_exact_limit_dist: specify distance for exact output: distance in mm\
            (default 5).
        opt_approx_limit_dist: specify distance for approximate output:\
            distance in mm (default 20).
        opt_approx_neighborhood_num: voxel neighborhood for approximate\
            calculation: size of neighborhood cube measured from center to face, in\
            voxels (default 2 = 5x5x5).
        opt_winding_method: winding method for point inside surface test: name\
            of the method (default EVEN_ODD).
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `CreateSignedDistanceVolumeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(CREATE_SIGNED_DISTANCE_VOLUME_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-create-signed-distance-volume")
    cargs.append(execution.input_file(surface))
    cargs.append(refspace)
    cargs.append(outvol)
    if opt_roi_out_roi_vol is not None:
        cargs.extend([
            "-roi-out",
            opt_roi_out_roi_vol
        ])
    if opt_fill_value_value is not None:
        cargs.extend([
            "-fill-value",
            str(opt_fill_value_value)
        ])
    if opt_exact_limit_dist is not None:
        cargs.extend([
            "-exact-limit",
            str(opt_exact_limit_dist)
        ])
    if opt_approx_limit_dist is not None:
        cargs.extend([
            "-approx-limit",
            str(opt_approx_limit_dist)
        ])
    if opt_approx_neighborhood_num is not None:
        cargs.extend([
            "-approx-neighborhood",
            str(opt_approx_neighborhood_num)
        ])
    if opt_winding_method is not None:
        cargs.extend([
            "-winding",
            opt_winding_method
        ])
    ret = CreateSignedDistanceVolumeOutputs(
        root=execution.output_file("."),
        outvol=execution.output_file(outvol),
        opt_roi_out_roi_vol=execution.output_file(opt_roi_out_roi_vol) if (opt_roi_out_roi_vol is not None) else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "CREATE_SIGNED_DISTANCE_VOLUME_METADATA",
    "CreateSignedDistanceVolumeOutputs",
    "create_signed_distance_volume",
]
