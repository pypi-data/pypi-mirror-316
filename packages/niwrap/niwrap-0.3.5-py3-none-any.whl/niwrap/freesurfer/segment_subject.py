# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

SEGMENT_SUBJECT_METADATA = Metadata(
    id="5ab5fa41476c4d8921b2a5ed52d0505305a8ad2b.boutiques",
    name="segment_subject",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


class SegmentSubjectOutputs(typing.NamedTuple):
    """
    Output object returned when calling `segment_subject(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_xfm_file: OutputPathType
    """Output transformation file"""


def segment_subject(
    input_volume: InputPathType,
    output_xfm: str,
    log_file: str | None = None,
    help_flag: bool = False,
    debug_flag: bool = False,
    version_flag: bool = False,
    runner: Runner | None = None,
) -> SegmentSubjectOutputs:
    """
    Front-end for MINCs mritotal to compute the Talairach transform that maps the
    input volume to the MNI305 space.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_volume: Input volume.
        output_xfm: Output transformation file.
        log_file: Log file. Default is outdir/talarach.log.
        help_flag: Print help and exit.
        debug_flag: Turn on debugging.
        version_flag: Print version and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `SegmentSubjectOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(SEGMENT_SUBJECT_METADATA)
    cargs = []
    cargs.append("mri_nu_correct.mni")
    cargs.extend([
        "--i",
        execution.input_file(input_volume)
    ])
    cargs.extend([
        "--xfm",
        output_xfm
    ])
    if log_file is not None:
        cargs.extend([
            "--log",
            log_file
        ])
    if help_flag:
        cargs.append("--help")
    if debug_flag:
        cargs.append("--debug")
    if version_flag:
        cargs.append("--version")
    ret = SegmentSubjectOutputs(
        root=execution.output_file("."),
        output_xfm_file=execution.output_file(output_xfm),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "SEGMENT_SUBJECT_METADATA",
    "SegmentSubjectOutputs",
    "segment_subject",
]
