# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

MRI_ADD_NEW_TP_METADATA = Metadata(
    id="c092850ac196635799818218f41e6c048de46b98.boutiques",
    name="mri_add_new_tp",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


class MriAddNewTpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mri_add_new_tp(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def mri_add_new_tp(
    base_id: str,
    newtp_id: str,
    runner: Runner | None = None,
) -> MriAddNewTpOutputs:
    """
    Adds a new time point to the base/template without re-creating the base. Only
    the new time point needs to be run longitudinally.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        base_id: The ID of the base template.
        newtp_id: The ID of the new time point to be added.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MriAddNewTpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRI_ADD_NEW_TP_METADATA)
    cargs = []
    cargs.append("mri_add_new_tp")
    cargs.append(base_id)
    cargs.append(newtp_id)
    ret = MriAddNewTpOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MRI_ADD_NEW_TP_METADATA",
    "MriAddNewTpOutputs",
    "mri_add_new_tp",
]
