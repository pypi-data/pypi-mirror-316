# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

HISTO_SYNTHESIZE_METADATA = Metadata(
    id="ebfa527b23cadea769992b1ad756ebe6c1f58512.boutiques",
    name="histo_synthesize",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


class HistoSynthesizeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `histo_synthesize(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_synthetic_histo: OutputPathType
    """Output file of the synthetic histo volume."""


def histo_synthesize(
    mri_volume: InputPathType,
    histo_volume: InputPathType,
    synthetic_histo: str,
    runner: Runner | None = None,
) -> HistoSynthesizeOutputs:
    """
    Tool for synthesizing histology-like volumes from MRI data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        mri_volume: Input MRI volume file.
        histo_volume: Input HISTO volume file.
        synthetic_histo: Output synthetic histo volume file.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `HistoSynthesizeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(HISTO_SYNTHESIZE_METADATA)
    cargs = []
    cargs.append("histo_synthesize")
    cargs.append("[OPTIONS]")
    cargs.append(execution.input_file(mri_volume))
    cargs.append(execution.input_file(histo_volume))
    cargs.append(synthetic_histo)
    ret = HistoSynthesizeOutputs(
        root=execution.output_file("."),
        output_synthetic_histo=execution.output_file(synthetic_histo),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "HISTO_SYNTHESIZE_METADATA",
    "HistoSynthesizeOutputs",
    "histo_synthesize",
]
