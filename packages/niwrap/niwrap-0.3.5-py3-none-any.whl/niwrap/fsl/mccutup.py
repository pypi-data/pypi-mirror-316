# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

MCCUTUP_METADATA = Metadata(
    id="3bcabc27a5688982bd8610840860d2e83796bc90.boutiques",
    name="mccutup",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


class MccutupOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mccutup(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output: OutputPathType | None
    """Output file"""


def mccutup(
    input_: InputPathType,
    output_file: str | None = None,
    param1: str | None = None,
    param2: str | None = None,
    runner: Runner | None = None,
) -> MccutupOutputs:
    """
    FSL mccutup tool.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        input_: Input file.
        output_file: Specify output file name.
        param1: Parameter 1 description.
        param2: Parameter 2 description.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MccutupOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MCCUTUP_METADATA)
    cargs = []
    cargs.append("mccutup")
    cargs.append(execution.input_file(input_))
    if output_file is not None:
        cargs.extend([
            "--output",
            output_file
        ])
    if param1 is not None:
        cargs.extend([
            "--param1",
            param1
        ])
    if param2 is not None:
        cargs.extend([
            "--param2",
            param2
        ])
    ret = MccutupOutputs(
        root=execution.output_file("."),
        output=execution.output_file(output_file) if (output_file is not None) else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MCCUTUP_METADATA",
    "MccutupOutputs",
    "mccutup",
]
