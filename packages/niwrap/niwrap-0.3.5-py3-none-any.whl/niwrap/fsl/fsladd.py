# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

FSLADD_METADATA = Metadata(
    id="f07330b46587f5e604d840221b21e17467d9b5f6.boutiques",
    name="fsladd",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


class FsladdOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fsladd(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    resulting_output: OutputPathType
    """Resulting output file"""


def fsladd(
    output_file: str,
    volume_list: list[InputPathType],
    mean_flag: bool = False,
    scale_flag: bool = False,
    runner: Runner | None = None,
) -> FsladdOutputs:
    """
    Tool for adding or averaging multiple input volumes.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_file: Output volume file.
        volume_list: List of input volumes.
        mean_flag: Calculate mean instead of sum.
        scale_flag: Scale each input image mean to 1000 before processing.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FsladdOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLADD_METADATA)
    cargs = []
    cargs.append("fsladd")
    cargs.append(output_file)
    if mean_flag:
        cargs.append("-m")
    if scale_flag:
        cargs.append("-s")
    cargs.extend([execution.input_file(f) for f in volume_list])
    ret = FsladdOutputs(
        root=execution.output_file("."),
        resulting_output=execution.output_file(output_file),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FSLADD_METADATA",
    "FsladdOutputs",
    "fsladd",
]
