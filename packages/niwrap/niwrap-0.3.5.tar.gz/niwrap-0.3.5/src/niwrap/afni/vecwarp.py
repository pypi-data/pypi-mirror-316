# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

VECWARP_METADATA = Metadata(
    id="b6a386dcbdfb7b07edd1e2d0325362df44cdb19e.boutiques",
    name="Vecwarp",
    package="afni",
    container_image_tag="afni/afni_make_build:AFNI_24.2.06",
)


class VecwarpOutputs(typing.NamedTuple):
    """
    Output object returned when calling `vecwarp(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_file: OutputPathType | None
    """The output file containing the transformed 3-vectors."""


def vecwarp(
    apar: InputPathType | None = None,
    matvec: InputPathType | None = None,
    forward: bool = False,
    backward: bool = False,
    input_: InputPathType | None = None,
    output: str | None = None,
    force: bool = False,
    runner: Runner | None = None,
) -> VecwarpOutputs:
    """
    Transforms (warps) a list of 3-vectors into another list of 3-vectors according
    to the specified options.
    
    Author: AFNI Developers
    
    URL: https://afni.nimh.nih.gov/
    
    Args:
        apar: Use the AFNI dataset 'aaa' as the source of the transformation;\
            this dataset must be in +acpc or +tlrc coordinates, and must contain\
            the attributes WARP_TYPE and WARP_DATA which describe the forward\
            transformation from +orig coordinates to the 'aaa' coordinate system.
        matvec: Read an affine transformation matrix-vector from file 'mmm',\
            which must be in the specified format.
        forward: To apply the forward transformation. If neither -forward nor\
            -backward is given, -forward is the default.
        backward: To apply the backward transformation.
        input_: Read input 3-vectors from the file 'iii' (from stdin if 'iii'\
            is '-' or the -input option is missing).
        output: Write the output to file 'ooo' (to stdout if 'ooo' is '-', or\
            if the -output option is missing).
        force: If the output file already exists, use -force to overwrite it.\
            If -force is used, it must come before -output on the command line.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VecwarpOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VECWARP_METADATA)
    cargs = []
    cargs.append("Vecwarp")
    if apar is not None:
        cargs.extend([
            "-apar",
            execution.input_file(apar)
        ])
    if matvec is not None:
        cargs.extend([
            "-matvec",
            execution.input_file(matvec)
        ])
    if forward:
        cargs.append("-forward")
    if backward:
        cargs.append("-backward")
    if input_ is not None:
        cargs.extend([
            "-input",
            execution.input_file(input_)
        ])
    if output is not None:
        cargs.extend([
            "-output",
            output
        ])
    if force:
        cargs.append("-force")
    ret = VecwarpOutputs(
        root=execution.output_file("."),
        output_file=execution.output_file(output) if (output is not None) else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VECWARP_METADATA",
    "VecwarpOutputs",
    "vecwarp",
]
