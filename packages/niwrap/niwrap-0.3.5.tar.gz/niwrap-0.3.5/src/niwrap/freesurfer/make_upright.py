# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

MAKE_UPRIGHT_METADATA = Metadata(
    id="f69f1f73df7f80db3bbc666008c56b37f2fb8894.boutiques",
    name="make_upright",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


class MakeUprightOutputs(typing.NamedTuple):
    """
    Output object returned when calling `make_upright(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    registered_image: OutputPathType
    """Registered upright MRI image"""


def make_upright(
    input_image: InputPathType,
    output_image: str,
    transformation_map: InputPathType,
    runner: Runner | None = None,
) -> MakeUprightOutputs:
    """
    Registers MRI input to the left/right reversed version using mri_robust_register
    and making use of the half-way space, resulting in an upright, forward facing
    head position.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_image: Input MRI image file in .mgz format.
        output_image: Output MRI image file in .mgz format.
        transformation_map: Transformation map file in .lta format.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MakeUprightOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MAKE_UPRIGHT_METADATA)
    cargs = []
    cargs.append("make_upright")
    cargs.append(execution.input_file(input_image))
    cargs.append(output_image)
    cargs.append(execution.input_file(transformation_map))
    ret = MakeUprightOutputs(
        root=execution.output_file("."),
        registered_image=execution.output_file(output_image),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MAKE_UPRIGHT_METADATA",
    "MakeUprightOutputs",
    "make_upright",
]
