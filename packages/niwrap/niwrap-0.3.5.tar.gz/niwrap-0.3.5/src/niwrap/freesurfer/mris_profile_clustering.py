# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

MRIS_PROFILE_CLUSTERING_METADATA = Metadata(
    id="1c62a3900080cd0e8bb349d786478f4b3b3ddb1d.boutiques",
    name="mris_profileClustering",
    package="freesurfer",
    container_image_tag="freesurfer/freesurfer:7.4.1",
)


class MrisProfileClusteringOutputs(typing.NamedTuple):
    """
    Output object returned when calling `mris_profile_clustering(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    clustering_output: OutputPathType
    """File with the clustering results."""


def mris_profile_clustering(
    input_file: InputPathType,
    output_file: str,
    other_options: str | None = None,
    runner: Runner | None = None,
) -> MrisProfileClusteringOutputs:
    """
    A tool from Freesurfer for clustering based on profile data.
    
    Author: FreeSurfer Developers
    
    URL: https://github.com/freesurfer/freesurfer
    
    Args:
        input_file: Input file required for clustering.
        output_file: Output file to store clustering results.
        other_options: Other various options for tuning the clustering process.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `MrisProfileClusteringOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(MRIS_PROFILE_CLUSTERING_METADATA)
    cargs = []
    cargs.append("mris_profileClustering")
    cargs.append(execution.input_file(input_file))
    cargs.append(output_file)
    if other_options is not None:
        cargs.append(other_options)
    ret = MrisProfileClusteringOutputs(
        root=execution.output_file("."),
        clustering_output=execution.output_file(output_file),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "MRIS_PROFILE_CLUSTERING_METADATA",
    "MrisProfileClusteringOutputs",
    "mris_profile_clustering",
]
