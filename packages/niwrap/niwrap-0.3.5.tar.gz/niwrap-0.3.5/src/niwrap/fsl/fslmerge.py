# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

FSLMERGE_METADATA = Metadata(
    id="5d8ea7aca79fd0b196c00441d4f31c201a3f63e6.boutiques",
    name="fslmerge",
    package="fsl",
    container_image_tag="brainlife/fsl:6.0.4-patched2",
)


class FslmergeOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslmerge(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    out_file: OutputPathType
    """Output concatenated image file"""


def fslmerge(
    output_file: str,
    input_files: list[InputPathType],
    merge_time: bool = False,
    merge_set_tr: bool = False,
    tr_value: float | None = None,
    runner: Runner | None = None,
) -> FslmergeOutputs:
    """
    FSL tool to concatenate images in various dimensions.
    
    Author: FMRIB Analysis Group, University of Oxford
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki
    
    Args:
        output_file: Output concatenated image file.
        input_files: Input image files to concatenate.
        merge_time: Concatenate images in time (4th dimension).
        merge_set_tr: Concatenate images in time and set the output image tr to\
            the provided value.
        tr_value: TR value in seconds, used with the -tr flag.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `FslmergeOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLMERGE_METADATA)
    cargs = []
    cargs.append("fslmerge")
    if merge_time:
        cargs.append("-t")
    if merge_set_tr:
        cargs.append("-tr")
    cargs.append(output_file)
    cargs.extend([execution.input_file(f) for f in input_files])
    if tr_value is not None:
        cargs.append(str(tr_value))
    ret = FslmergeOutputs(
        root=execution.output_file("."),
        out_file=execution.output_file(output_file),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FSLMERGE_METADATA",
    "FslmergeOutputs",
    "fslmerge",
]
