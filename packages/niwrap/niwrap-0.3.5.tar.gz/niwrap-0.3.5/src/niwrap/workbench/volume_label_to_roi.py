# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

VOLUME_LABEL_TO_ROI_METADATA = Metadata(
    id="b3cda0fa9bc982ba11f500591ea9473a5a0a4fc2.boutiques",
    name="volume-label-to-roi",
    package="workbench",
    container_image_tag="brainlife/connectome_workbench:1.5.0-freesurfer-update",
)


class VolumeLabelToRoiOutputs(typing.NamedTuple):
    """
    Output object returned when calling `volume_label_to_roi(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    volume_out: OutputPathType
    """the output volume file"""


def volume_label_to_roi(
    label_in: InputPathType,
    volume_out: str,
    opt_name_label_name: str | None = None,
    opt_key_label_key: int | None = None,
    opt_map_map: str | None = None,
    runner: Runner | None = None,
) -> VolumeLabelToRoiOutputs:
    """
    Make a volume label into an roi volume.
    
    For each map in <label-in>, a map is created in <volume-out> where all
    locations labeled with <label-name> or with a key of <label-key> are given a
    value of 1, and all other locations are given 0. Exactly one of -name and
    -key must be specified. Specify -map to use only one map from <label-in>.
    
    Author: Connectome Workbench Developers
    
    URL: https://github.com/Washington-University/workbench
    
    Args:
        label_in: the input volume label file.
        volume_out: the output volume file.
        opt_name_label_name: select label by name: the label name that you want\
            an roi of.
        opt_key_label_key: select label by key: the label key that you want an\
            roi of.
        opt_map_map: select a single label map to use: the map number or name.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `VolumeLabelToRoiOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(VOLUME_LABEL_TO_ROI_METADATA)
    cargs = []
    cargs.append("wb_command")
    cargs.append("-volume-label-to-roi")
    cargs.append(execution.input_file(label_in))
    cargs.append(volume_out)
    if opt_name_label_name is not None:
        cargs.extend([
            "-name",
            opt_name_label_name
        ])
    if opt_key_label_key is not None:
        cargs.extend([
            "-key",
            str(opt_key_label_key)
        ])
    if opt_map_map is not None:
        cargs.extend([
            "-map",
            opt_map_map
        ])
    ret = VolumeLabelToRoiOutputs(
        root=execution.output_file("."),
        volume_out=execution.output_file(volume_out),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "VOLUME_LABEL_TO_ROI_METADATA",
    "VolumeLabelToRoiOutputs",
    "volume_label_to_roi",
]
