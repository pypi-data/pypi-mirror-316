# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

LABELSTATS_METADATA = Metadata(
    id="254f5ddf0636d16c200b150f7e9d225ebb08df1b.boutiques",
    name="labelstats",
    package="mrtrix",
    container_image_tag="mrtrix3/mrtrix3:3.0.4",
)


@dataclasses.dataclass
class LabelstatsConfig:
    """
    temporarily set the value of an MRtrix config file entry.
    """
    key: str
    """temporarily set the value of an MRtrix config file entry."""
    value: str
    """temporarily set the value of an MRtrix config file entry."""
    
    def run(
        self,
        execution: Execution,
    ) -> list[str]:
        """
        Build command line arguments. This method is called by the main command.
        
        Args:
            execution: The execution object.
        Returns:
            Command line arguments
        """
        cargs = []
        cargs.append("-config")
        cargs.append(self.key)
        cargs.append(self.value)
        return cargs


class LabelstatsOutputs(typing.NamedTuple):
    """
    Output object returned when calling `labelstats(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""


def labelstats(
    input_: InputPathType,
    output: str | None = None,
    voxelspace: bool = False,
    info: bool = False,
    quiet: bool = False,
    debug: bool = False,
    force: bool = False,
    nthreads: int | None = None,
    config: list[LabelstatsConfig] | None = None,
    help_: bool = False,
    version: bool = False,
    runner: Runner | None = None,
) -> LabelstatsOutputs:
    """
    Compute statistics of parcels within a label image.
    
    
    
    References:
    
    .
    
    Author: MRTrix3 Developers
    
    URL: https://www.mrtrix.org/
    
    Args:
        input_: the input label image.
        output: output only the field specified; options are: mass,centre.
        voxelspace: report parcel centres of mass in voxel space rather than\
            scanner space.
        info: display information messages.
        quiet: do not display information messages or progress status;\
            alternatively, this can be achieved by setting the MRTRIX_QUIET\
            environment variable to a non-empty string.
        debug: display debugging messages.
        force: force overwrite of output files (caution: using the same file as\
            input and output might cause unexpected behaviour).
        nthreads: use this number of threads in multi-threaded applications\
            (set to 0 to disable multi-threading).
        config: temporarily set the value of an MRtrix config file entry.
        help_: display this information page and exit.
        version: display version information and exit.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `LabelstatsOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(LABELSTATS_METADATA)
    cargs = []
    cargs.append("labelstats")
    if output is not None:
        cargs.extend([
            "-output",
            output
        ])
    if voxelspace:
        cargs.append("-voxelspace")
    if info:
        cargs.append("-info")
    if quiet:
        cargs.append("-quiet")
    if debug:
        cargs.append("-debug")
    if force:
        cargs.append("-force")
    if nthreads is not None:
        cargs.extend([
            "-nthreads",
            str(nthreads)
        ])
    if config is not None:
        cargs.extend([a for c in [s.run(execution) for s in config] for a in c])
    if help_:
        cargs.append("-help")
    if version:
        cargs.append("-version")
    cargs.append(execution.input_file(input_))
    ret = LabelstatsOutputs(
        root=execution.output_file("."),
    )
    execution.run(cargs)
    return ret


__all__ = [
    "LABELSTATS_METADATA",
    "LabelstatsConfig",
    "LabelstatsOutputs",
    "labelstats",
]
