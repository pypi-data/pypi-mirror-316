# coding: utf-8

"""
    .txt API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from base.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class JSONSchemaStatus(BaseModel):
    """
    JSONSchemaStatus
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The JSON schema name.")
    js_id: StrictStr = Field(description="The JSON schema indentifier.")
    status_url: Annotated[str, Field(min_length=1, strict=True, max_length=2083)] = Field(description="The URL for retrieving compilation status.")
    status: Status
    compilation_duration: Optional[StrictInt] = None
    detail: Optional[StrictStr] = None
    completion_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]] = None
    __properties: ClassVar[List[str]] = ["name", "js_id", "status_url", "status", "compilation_duration", "detail", "completion_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JSONSchemaStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if compilation_duration (nullable) is None
        # and model_fields_set contains the field
        if self.compilation_duration is None and "compilation_duration" in self.model_fields_set:
            _dict['compilation_duration'] = None

        # set to None if detail (nullable) is None
        # and model_fields_set contains the field
        if self.detail is None and "detail" in self.model_fields_set:
            _dict['detail'] = None

        # set to None if completion_url (nullable) is None
        # and model_fields_set contains the field
        if self.completion_url is None and "completion_url" in self.model_fields_set:
            _dict['completion_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JSONSchemaStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "js_id": obj.get("js_id"),
            "status_url": obj.get("status_url"),
            "status": obj.get("status"),
            "compilation_duration": obj.get("compilation_duration"),
            "detail": obj.get("detail"),
            "completion_url": obj.get("completion_url")
        })
        return _obj


