# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from mtm.sppb import git_pb2 as mtm_dot_sppb_dot_git__pb2
from mtm.sppb import mtm_pb2 as mtm_dot_sppb_dot_mtm__pb2


class GitServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GitList = channel.unary_unary(
                '/sppb.GitService/GitList',
                request_serializer=mtm_dot_sppb_dot_mtm__pb2.CommontListReq.SerializeToString,
                response_deserializer=mtm_dot_sppb_dot_mtm__pb2.CommontListRes.FromString,
                _registered_method=True)
        self.GitGet = channel.unary_unary(
                '/sppb.GitService/GitGet',
                request_serializer=mtm_dot_sppb_dot_git__pb2.GitGetReq.SerializeToString,
                response_deserializer=mtm_dot_sppb_dot_git__pb2.GitInfo.FromString,
                _registered_method=True)
        self.GitPull = channel.unary_unary(
                '/sppb.GitService/GitPull',
                request_serializer=mtm_dot_sppb_dot_git__pb2.GitPullReq.SerializeToString,
                response_deserializer=mtm_dot_sppb_dot_git__pb2.GitPullRes.FromString,
                _registered_method=True)
        self.GitSetup = channel.unary_unary(
                '/sppb.GitService/GitSetup',
                request_serializer=mtm_dot_sppb_dot_git__pb2.GitSetupReq.SerializeToString,
                response_deserializer=mtm_dot_sppb_dot_git__pb2.GitSetupRes.FromString,
                _registered_method=True)
        self.GitStart = channel.unary_unary(
                '/sppb.GitService/GitStart',
                request_serializer=mtm_dot_sppb_dot_git__pb2.GitStartReq.SerializeToString,
                response_deserializer=mtm_dot_sppb_dot_git__pb2.GitStartRes.FromString,
                _registered_method=True)
        self.GitStop = channel.unary_unary(
                '/sppb.GitService/GitStop',
                request_serializer=mtm_dot_sppb_dot_git__pb2.GitStopReq.SerializeToString,
                response_deserializer=mtm_dot_sppb_dot_git__pb2.GitStopRes.FromString,
                _registered_method=True)


class GitServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GitList(self, request, context):
        """列出git项目
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GitGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GitPull(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GitSetup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GitStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GitStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GitServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GitList': grpc.unary_unary_rpc_method_handler(
                    servicer.GitList,
                    request_deserializer=mtm_dot_sppb_dot_mtm__pb2.CommontListReq.FromString,
                    response_serializer=mtm_dot_sppb_dot_mtm__pb2.CommontListRes.SerializeToString,
            ),
            'GitGet': grpc.unary_unary_rpc_method_handler(
                    servicer.GitGet,
                    request_deserializer=mtm_dot_sppb_dot_git__pb2.GitGetReq.FromString,
                    response_serializer=mtm_dot_sppb_dot_git__pb2.GitInfo.SerializeToString,
            ),
            'GitPull': grpc.unary_unary_rpc_method_handler(
                    servicer.GitPull,
                    request_deserializer=mtm_dot_sppb_dot_git__pb2.GitPullReq.FromString,
                    response_serializer=mtm_dot_sppb_dot_git__pb2.GitPullRes.SerializeToString,
            ),
            'GitSetup': grpc.unary_unary_rpc_method_handler(
                    servicer.GitSetup,
                    request_deserializer=mtm_dot_sppb_dot_git__pb2.GitSetupReq.FromString,
                    response_serializer=mtm_dot_sppb_dot_git__pb2.GitSetupRes.SerializeToString,
            ),
            'GitStart': grpc.unary_unary_rpc_method_handler(
                    servicer.GitStart,
                    request_deserializer=mtm_dot_sppb_dot_git__pb2.GitStartReq.FromString,
                    response_serializer=mtm_dot_sppb_dot_git__pb2.GitStartRes.SerializeToString,
            ),
            'GitStop': grpc.unary_unary_rpc_method_handler(
                    servicer.GitStop,
                    request_deserializer=mtm_dot_sppb_dot_git__pb2.GitStopReq.FromString,
                    response_serializer=mtm_dot_sppb_dot_git__pb2.GitStopRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sppb.GitService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sppb.GitService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GitService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GitList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sppb.GitService/GitList',
            mtm_dot_sppb_dot_mtm__pb2.CommontListReq.SerializeToString,
            mtm_dot_sppb_dot_mtm__pb2.CommontListRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GitGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sppb.GitService/GitGet',
            mtm_dot_sppb_dot_git__pb2.GitGetReq.SerializeToString,
            mtm_dot_sppb_dot_git__pb2.GitInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GitPull(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sppb.GitService/GitPull',
            mtm_dot_sppb_dot_git__pb2.GitPullReq.SerializeToString,
            mtm_dot_sppb_dot_git__pb2.GitPullRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GitSetup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sppb.GitService/GitSetup',
            mtm_dot_sppb_dot_git__pb2.GitSetupReq.SerializeToString,
            mtm_dot_sppb_dot_git__pb2.GitSetupRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GitStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sppb.GitService/GitStart',
            mtm_dot_sppb_dot_git__pb2.GitStartReq.SerializeToString,
            mtm_dot_sppb_dot_git__pb2.GitStartRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GitStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sppb.GitService/GitStop',
            mtm_dot_sppb_dot_git__pb2.GitStopReq.SerializeToString,
            mtm_dot_sppb_dot_git__pb2.GitStopRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
