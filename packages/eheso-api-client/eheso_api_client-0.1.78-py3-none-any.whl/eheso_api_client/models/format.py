# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import json
import pprint
import re  # noqa: F401
from aenum import Enum, no_arg





class Format(str, Enum):
    """
    The format in which the data should be returned.  The available formats are:    - \"default\": this returns a so-called field-based structure.      This field-based structure is a nested object where the fieldIds      define the nested properties. Each field is represented by an object that     may have either a `v` property or a `c` property, like so: `{SOME: { FIELD { v: 1 }}}`.     The `v` property is the value of the field, while the `c` property is the code,      if there was no value for that field (e.g. \"m\" for \"missing\").   - \"flat\": this returns a flat array of objects, where each object represents a row.        The object has properties that correspond to the fieldIds, like so: `{ \"SOME.FIELD\": 1 }`.       The `.c` and `.v` properties are not present in this format, so it is possible to        get a string value for a number field, because the value it is actually a code.    - \"sql\": this is similar to the \"flat\" format, but the fieldIds        don't have the dot notation. The dots are replaced with `_`       to make the fieldIds SQL-friendly, like so: `{ \"SOME_FIELD\": 1 }`. 
    """

    """
    allowed enum values
    """
    DETAILED = 'detailed'
    FLAT = 'flat'
    SQL = 'sql'

    @classmethod
    def from_json(cls, json_str: str) -> Format:
        """Create an instance of Format from a JSON string"""
        return Format(json.loads(json_str))


