# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class LayerResponseInner(BaseModel):
    """
    LayerResponseInner
    """
    layer_id: Optional[StrictStr] = Field(default=None, alias="layerId", description="The identifier for the layer.")
    description: Optional[StrictStr] = Field(default=None, description="A description of the layer.")
    countries: Optional[StrictStr] = Field(default=None, description="List of countries covered by this layer.")
    field_count: Optional[StrictInt] = Field(default=None, alias="fieldCount", description="The number of fields in the layer.")
    field_group_count: Optional[StrictInt] = Field(default=None, alias="fieldGroupCount", description="The number of field groups in the layer.")
    __properties = ["layerId", "description", "countries", "fieldCount", "fieldGroupCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LayerResponseInner:
        """Create an instance of LayerResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LayerResponseInner:
        """Create an instance of LayerResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LayerResponseInner.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in LayerResponseInner) in the input: " + obj)

        _obj = LayerResponseInner.parse_obj({
            "layer_id": obj.get("layerId"),
            "description": obj.get("description"),
            "countries": obj.get("countries"),
            "field_count": obj.get("fieldCount"),
            "field_group_count": obj.get("fieldGroupCount")
        })
        return _obj


