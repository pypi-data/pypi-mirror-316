# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class FieldInfoBasicResponseInfo(BaseModel):
    """
    FieldInfoBasicResponseInfo
    """
    category: Optional[StrictStr] = Field(default=None, description="Category of the field")
    sub_category: Optional[StrictStr] = Field(default=None, alias="subCategory", description="Sub-category of the field")
    source: Optional[StrictStr] = Field(default=None, description="Data source")
    definition: Optional[StrictStr] = Field(default=None, description="More information on the data definition if necessary")
    indic_type: Optional[StrictStr] = Field(default=None, alias="indicType", description="Indicator type. Possible values are: Scoreboard core indicator (S), Country profile indicator (CY), Additional indictor for download (D) vs. only calculation indicator (C)")
    __properties = ["category", "subCategory", "source", "definition", "indicType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FieldInfoBasicResponseInfo:
        """Create an instance of FieldInfoBasicResponseInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FieldInfoBasicResponseInfo:
        """Create an instance of FieldInfoBasicResponseInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FieldInfoBasicResponseInfo.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in FieldInfoBasicResponseInfo) in the input: " + obj)

        _obj = FieldInfoBasicResponseInfo.parse_obj({
            "category": obj.get("category"),
            "sub_category": obj.get("subCategory"),
            "source": obj.get("source"),
            "definition": obj.get("definition"),
            "indic_type": obj.get("indicType")
        })
        return _obj


