# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from eheso_api_client.models.field_info_detailed_response_info import FieldInfoDetailedResponseInfo

class FieldInfoDetailedResponse(BaseModel):
    """
    FieldInfoDetailedResponse
    """
    layer_id: Optional[StrictStr] = Field(default=None, alias="layerId", description="The identifier for the layer.")
    field_id: Optional[StrictStr] = Field(default=None, alias="fieldId", description="The identifier for the field.")
    field_name: Optional[StrictStr] = Field(default=None, alias="fieldName", description="The name of the field.")
    field_type: Optional[StrictStr] = Field(default=None, alias="fieldType", description="The data type of the field.")
    field_sub_type: Optional[StrictStr] = Field(default=None, alias="fieldSubType", description="Some fields have a sub-type. E.g. year is a subtype of number.")
    is_calculated: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="isCalculated", description="Indicates if the field is calculated or not. Can be 0 (not calculated) or 1 (calculated).")
    info: Optional[FieldInfoDetailedResponseInfo] = None
    codes: Optional[Dict[str, Any]] = Field(default=None, description="Optional object with flexible keys and values.")
    additional_properties: Dict[str, Any] = {}
    __properties = ["layerId", "fieldId", "fieldName", "fieldType", "fieldSubType", "isCalculated", "info", "codes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FieldInfoDetailedResponse:
        """Create an instance of FieldInfoDetailedResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FieldInfoDetailedResponse:
        """Create an instance of FieldInfoDetailedResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FieldInfoDetailedResponse.parse_obj(obj)

        _obj = FieldInfoDetailedResponse.parse_obj({
            "layer_id": obj.get("layerId"),
            "field_id": obj.get("fieldId"),
            "field_name": obj.get("fieldName"),
            "field_type": obj.get("fieldType"),
            "field_sub_type": obj.get("fieldSubType"),
            "is_calculated": obj.get("isCalculated"),
            "info": FieldInfoDetailedResponseInfo.from_dict(obj.get("info")) if obj.get("info") is not None else None,
            "codes": obj.get("codes")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


