# generated by datamodel-codegen:
#   filename:  properties_directory/structural/basis.json
#   version:   0.25.5

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field


class AtomicElements(BaseModel):
    id: float
    value: str
    occurrence: Optional[float] = None
    """
    Occurrence is for fractional occupations
    """
    oxidationState: Optional[float] = None


class Label(BaseModel):
    id: Optional[float] = None
    value: Optional[float] = None


class AtomicCoordinate(BaseModel):
    id: Optional[float] = None
    value: Optional[Union[List[float], List[bool]]] = Field(None, title="vector schema")


class AtomicId(BaseModel):
    id: Optional[int] = None
    """
    integer id of this entry
    """


class BondType(Enum):
    single = "single"
    double = "double"
    triple = "triple"
    quadruple = "quadruple"
    aromatic = "aromatic"
    tautomeric = "tautomeric"
    dative = "dative"
    other = "other"


class BondsSchemaItem(BaseModel):
    atomPair: Optional[List[AtomicId]] = Field(None, max_length=2, min_length=2, title="atomic ids")
    """
    indices of the two connected atoms
    """
    bondType: Optional[BondType] = None


class BasisSchema(BaseModel):
    elements: List[AtomicElements]
    labels: Optional[List[Label]] = None
    """
    Optional numeric label (e.g., 1, 2, as in Fe1, Fe2) to distinguish same atomic species to attach different spin magnetic moment.
    """
    coordinates: List[AtomicCoordinate]
    name: Optional[str] = None
    units: Optional[str] = None
    bonds: Optional[List[BondsSchemaItem]] = Field(None, title="bonds schema")
