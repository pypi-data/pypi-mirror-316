# generated by datamodel-codegen:
#   filename:  material.json
#   version:   0.25.5

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel, confloat
from typing_extensions import Literal


class AtomicElements(BaseModel):
    id: float
    value: str
    occurrence: Optional[float] = None
    """
    Occurrence is for fractional occupations
    """
    oxidationState: Optional[float] = None


class Label(BaseModel):
    id: Optional[float] = None
    value: Optional[float] = None


class AtomicCoordinate(BaseModel):
    id: Optional[float] = None
    value: Optional[Union[List[float], List[bool]]] = Field(None, title="vector schema")


class AtomicId(BaseModel):
    id: Optional[int] = None
    """
    integer id of this entry
    """


class BondType(Enum):
    single = "single"
    double = "double"
    triple = "triple"
    quadruple = "quadruple"
    aromatic = "aromatic"
    tautomeric = "tautomeric"
    dative = "dative"
    other = "other"


class BondsSchemaItem(BaseModel):
    atomPair: Optional[List[AtomicId]] = Field(None, max_length=2, min_length=2, title="atomic ids")
    """
    indices of the two connected atoms
    """
    bondType: Optional[BondType] = None


class BasisSchema(BaseModel):
    elements: List[AtomicElements]
    labels: Optional[List[Label]] = None
    """
    Optional numeric label (e.g., 1, 2, as in Fe1, Fe2) to distinguish same atomic species to attach different spin magnetic moment.
    """
    coordinates: List[AtomicCoordinate]
    name: Optional[str] = None
    units: Optional[str] = None
    bonds: Optional[List[BondsSchemaItem]] = Field(None, title="bonds schema")


class Name(Enum):
    lattice = "lattice"


class Units(Enum):
    km = "km"
    m = "m"
    pm = "pm"
    nm = "nm"
    angstrom = "angstrom"
    a_u_ = "a.u."
    bohr = "bohr"
    fractional = "fractional"
    crystal = "crystal"
    cartesian = "cartesian"
    alat = "alat"


class LatticeExplicitUnit(BaseModel):
    alat: Optional[float] = 1
    """
    lattice parameter for fractional coordinates
    """
    units: Optional[Units] = None
    a: List[float] = Field(..., max_length=3, min_length=3, title="array of 3 number elements schema")
    b: List[float] = Field(..., max_length=3, min_length=3, title="array of 3 number elements schema")
    c: List[float] = Field(..., max_length=3, min_length=3, title="array of 3 number elements schema")


class LatticeTypeSchema(Enum):
    CUB = "CUB"
    BCC = "BCC"
    FCC = "FCC"
    TET = "TET"
    MCL = "MCL"
    ORC = "ORC"
    ORCC = "ORCC"
    ORCF = "ORCF"
    ORCI = "ORCI"
    HEX = "HEX"
    BCT = "BCT"
    TRI = "TRI"
    MCLC = "MCLC"
    RHL = "RHL"


class Length(Enum):
    angstrom = "angstrom"
    bohr = "bohr"


class Angle(Enum):
    degree = "degree"
    radian = "radian"


class Units41(BaseModel):
    length: Optional[Length] = None
    angle: Optional[Angle] = None


class LatticeSchema(BaseModel):
    name: Optional[Name] = None
    vectors: Optional[LatticeExplicitUnit] = Field(None, title="lattice explicit unit")
    type: LatticeTypeSchema = Field(..., title="lattice type schema")
    units: Optional[Units41] = None
    a: float
    """
    length of the first lattice vector
    """
    b: float
    """
    length of the second lattice vector
    """
    c: float
    """
    length of the third lattice vector
    """
    alpha: float
    """
    angle between first and second lattice vector
    """
    beta: float
    """
    angle between second and third lattice vector
    """
    gamma: float
    """
    angle between first and third lattice vector
    """


class Name128(Enum):
    volume = "volume"


class Units42(Enum):
    angstrom_3 = "angstrom^3"


class VolumeSchema(BaseModel):
    name: Literal["0#-datamodel-code-generator-#-object-#-special-#"]
    units: Optional[Units42] = None
    value: float


class Name129(Enum):
    density = "density"


class Units43(Enum):
    g_cm_3 = "g/cm^3"


class DensitySchema(BaseModel):
    name: Literal["1#-datamodel-code-generator-#-object-#-special-#"]
    units: Optional[Units43] = None
    value: float


class Units44(Enum):
    angstrom = "angstrom"


class ScalarSchema(BaseModel):
    units: Optional[Units44] = None
    value: float


class Name130(Enum):
    symmetry = "symmetry"


class SymmetrySchema(BaseModel):
    pointGroupSymbol: Optional[str] = None
    """
    point group symbol in Schoenflies notation
    """
    spaceGroupSymbol: Optional[str] = None
    """
    space group symbol in Hermannâ€“Mauguin notation
    """
    tolerance: Optional[ScalarSchema] = Field(None, title="scalar schema")
    """
    tolerance used for symmetry calculation
    """
    name: Literal["2#-datamodel-code-generator-#-object-#-special-#"]


class Name131(Enum):
    elemental_ratio = "elemental_ratio"


class ElementalRatio(BaseModel):
    name: Literal["3#-datamodel-code-generator-#-object-#-special-#"]
    value: confloat(ge=0.0, le=1.0)
    element: Optional[str] = None
    """
    the element this ratio is for
    """


class Name132(Enum):
    p_norm = "p-norm"


class PNorm(BaseModel):
    name: Literal["4#-datamodel-code-generator-#-object-#-special-#"]
    degree: Optional[int] = None
    """
    degree of the dimensionality of the norm
    """
    value: float


class Name133(Enum):
    inchi = "inchi"


class InChIRepresentationSchema(BaseModel):
    name: Literal["5#-datamodel-code-generator-#-object-#-special-#"]
    value: str


class Name134(Enum):
    inchi_key = "inchi_key"


class InChIKeyRepresentationSchema(BaseModel):
    name: Literal["6#-datamodel-code-generator-#-object-#-special-#"]
    value: str


class DerivedPropertiesSchema(
    RootModel[
        Union[
            VolumeSchema,
            DensitySchema,
            SymmetrySchema,
            ElementalRatio,
            PNorm,
            InChIRepresentationSchema,
            InChIKeyRepresentationSchema,
        ]
    ]
):
    root: Union[
        VolumeSchema,
        DensitySchema,
        SymmetrySchema,
        ElementalRatio,
        PNorm,
        InChIRepresentationSchema,
        InChIKeyRepresentationSchema,
    ] = Field(..., discriminator="name")


class DatabaseSourceSchema(BaseModel):
    id: Union[str, float]
    """
    ID string for the materials uploaded from a third party source inside the third party source. For materialsproject.org an example ID is mp-32
    """
    source: str
    """
    Third party source name, e.g. materials project, 2dmatpedia, ICSD, etc.
    """
    origin: bool
    """
    Deprecated. To be removed. A flag that is true when material is initially imported from a third party * (as opposed to being independently designed from scratch).
    """
    data: Optional[Dict[str, Any]] = None
    """
    Original response from external source.
    """
    doi: Optional[str] = None
    """
    Digital Object Identifier, e.g. 10.1088/0953-8984/25/10/105506
    """
    url: Optional[str] = None
    """
    The URL of the original record, e.g. https://next-gen.materialsproject.org/materials/mp-48; ToDo: update to use URI type per https://json-schema.org/understanding-json-schema/reference/string#resource-identifiers
    """


class FileSourceSchema(BaseModel):
    extension: Optional[str] = None
    """
    file extension
    """
    filename: str
    """
    file name without extension
    """
    text: str
    """
    file content as raw text
    """
    hash: str
    """
    MD5 hash based on file content
    """


class Name135(Enum):
    default = "default"
    atomsTooClose = "atomsTooClose"
    atomsOverlap = "atomsOverlap"


class Severity(Enum):
    info = "info"
    warning = "warning"
    error = "error"


class ConsistencyCheck(BaseModel):
    key: str
    """
    Key of the property of the entity on which the consistency check is performed in Mongo dot notation, e.g. 'basis.coordinates.1'
    """
    name: Name135
    """
    Name of the consistency check that is performed, which is listed in an enum.
    """
    severity: Severity
    """
    Severity level of the problem, which is used in UI to differentiate.
    """
    message: str
    """
    Message generated by the consistency check describing the problem.
    """


class MaterialSchema(BaseModel):
    formula: Optional[str] = None
    """
    reduced chemical formula
    """
    unitCellFormula: Optional[str] = None
    """
    chemical formula based on the number of atoms of each element in the supercell
    """
    basis: BasisSchema = Field(..., title="basis schema")
    lattice: LatticeSchema = Field(..., title="lattice schema")
    derivedProperties: Optional[List[DerivedPropertiesSchema]] = Field(None, title="derived properties schema")
    external: Optional[DatabaseSourceSchema] = Field(None, title="database source schema")
    """
    information about a database source
    """
    src: Optional[FileSourceSchema] = Field(None, title="file source schema")
    """
    file source with the information inside
    """
    scaledHash: Optional[str] = None
    """
    Hash string for a scaled structure with lattice vector a set to 1 (eg. for materials under pressure).
    """
    icsdId: Optional[int] = None
    """
    Corresponding ICSD id of the material
    """
    isNonPeriodic: Optional[bool] = None
    """
    Whether to work in the finite molecular picture (usually with atomic orbital basis)
    """
    field_id: Optional[str] = Field(None, alias="_id")
    """
    entity identity
    """
    slug: Optional[str] = None
    """
    entity slug
    """
    systemName: Optional[str] = None
    consistencyChecks: Optional[List[ConsistencyCheck]] = None
    schemaVersion: Optional[str] = "2022.8.16"
    """
    entity's schema version. Used to distinct between different schemas.
    """
    name: Optional[str] = None
    """
    entity name
    """
    isDefault: Optional[bool] = False
    """
    Identifies that entity is defaultable
    """
    metadata: Optional[Dict[str, Any]] = None
