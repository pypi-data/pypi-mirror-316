# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from typing import Dict, List, TypedDict

from .baseStruct import BaseParser


T_OngoingPage = TypedDict("T_OngoingPage", {"url": str, "title": str, "thumbnail": str, "counts": str})

T_SearchPage = TypedDict("T_SearchPage", {"url": str, "title": str, "thumbnail": str, "counts": str})

T_EpisodesView = TypedDict("T_EpisodesView", {"title": str, "url": str})

T_AnimePage = TypedDict(
    "T_AnimePage", {"title": str, "description": str, "thumbnail": str, "episodes": List["T_EpisodesView"]}
)

T_SourceView = Dict[str, str]

T_SourcePage = TypedDict("T_SourcePage", {"videos": T_SourceView})


class OngoingPage(BaseParser):
    """
        usage:

        POST https://jut.su/anime/ongoing/
        ajax_load=yes&start_from_page=1&show_search=&anime_of_user=



    [
      {
        "url": "String",
        "title": "String",
        "thumbnail": "String",
        "counts": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_OngoingPage"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_OngoingPage"]:
        return [
            T_OngoingPage(
                **{
                    "url": self._parse_url(el),
                    "title": self._parse_title(el),
                    "thumbnail": self._parse_thumbnail(el),
                    "counts": self._parse_counts(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".all_anime_global")
        return var

    def _parse_url(self, el):
        var = self._css(el, "a")
        var_1 = self._attr(var, "href")
        var_2 = self._str_format(var_1, "https://jut.su{}")
        return var_2

    def _parse_title(self, el):
        var = self._css(el, ".aaname")
        var_1 = self._attr_text(var)
        return var_1

    def _parse_thumbnail(self, el):
        var = self._css(el, ".all_anime_image")
        var_1 = self._attr(var, "style")
        var_2 = self._re_match(var_1, "'(https?://.*?)'", 1)
        return var_2

    def _parse_counts(self, el):
        var = self._css_all(el, ".aailines")
        var_1 = self._attr_text_all(var)
        var_2 = [self._str_trim(i, "\r\n") for i in var_1]
        var_3 = self._arr_join(var_2, " ")
        return var_3


class SearchPage(BaseParser):
    """

        POST https://jut.su/anime/
        ajax_load=yes&start_from_page=1&show_search=<QUERY>&anime_of_user=

        EXAMPLE:
            POST https://jut.su/anime/
            ajax_load=yes&start_from_page=1&show_search=LA&anime_of_user=


    [
      {
        "url": "String",
        "title": "String",
        "thumbnail": "String",
        "counts": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_SearchPage"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_SearchPage"]:
        return [
            T_SearchPage(
                **{
                    "url": self._parse_url(el),
                    "title": self._parse_title(el),
                    "thumbnail": self._parse_thumbnail(el),
                    "counts": self._parse_counts(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".all_anime_global")
        return var

    def _parse_url(self, el):
        var = self._css(el, "a")
        var_1 = self._attr(var, "href")
        var_2 = self._str_format(var_1, "https://jut.su{}")
        return var_2

    def _parse_title(self, el):
        var = self._css(el, ".aaname")
        var_1 = self._attr_text(var)
        return var_1

    def _parse_thumbnail(self, el):
        var = self._css(el, ".all_anime_image")
        var_1 = self._attr(var, "style")
        var_2 = self._re_match(var_1, "'(https?://.*?)'", 1)
        return var_2

    def _parse_counts(self, el):
        var = self._css_all(el, ".aailines")
        var_1 = self._attr_text_all(var)
        var_2 = [self._str_trim(i, "\r\n") for i in var_1]
        var_3 = self._arr_join(var_2, " ")
        return var_3


class EpisodesView(BaseParser):
    """


    [
      {
        "title": "String",
        "url": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_EpisodesView"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_EpisodesView"]:
        return [
            T_EpisodesView(
                **{
                    "title": self._parse_title(el),
                    "url": self._parse_url(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".video")
        return var

    def _parse_title(self, el):
        var = self._attr_text(el)
        var_1 = self._str_trim(var, " ")
        return var_1

    def _parse_url(self, el):
        var = self._attr(el, "href")
        var_1 = self._str_format(var, "https://jut.su{}")
        return var_1


class AnimePage(BaseParser):
    """

        GET https://jut.su/<ANIME PATH>

        EXAMPLE:
            GET https://jut.su/kime-no-yaiba/


    {
      "title": "String",
      "description": "String",
      "thumbnail": "String",
      "episodes": [
        {
          "title": "String",
          "url": "String"
        },
        "..."
      ]
    }
    """

    def parse(self) -> T_AnimePage:
        return self._run_parse()

    def _run_parse(self) -> T_AnimePage:
        return T_AnimePage(
            **{
                "title": self._parse_title(self.__selector__),
                "description": self._parse_description(self.__selector__),
                "thumbnail": self._parse_thumbnail(self.__selector__),
                "episodes": self._parse_episodes(self.__selector__),
            }
        )

    def _parse_title(self, el):
        var = self._css(el, ".anime_padding_for_title")
        var_1 = self._attr_text(var)
        var_2 = self._re_match(var_1, "Смотреть (.*?) все", 1)
        return var_2

    def _parse_description(self, el):
        var = self._css_all(el, ".uv_rounded_bottom span")
        var_1 = self._attr_text_all(var)
        var_2 = self._arr_join(var_1, " ")
        return var_2

    def _parse_thumbnail(self, el):
        var = self._css(el, ".all_anime_title")
        var_1 = self._attr(var, "style")
        var_2 = self._re_match(var_1, "'(https?://.*?)'", 1)
        return var_2

    def _parse_episodes(self, el):
        var = self._nested_parser(el, EpisodesView)
        return var


class SourceView(BaseParser):
    """


    {
      "K": "V",
      "...": "..."
    }
    """

    def parse(self) -> T_SourceView:
        return self._run_parse()

    def _run_parse(self) -> T_SourceView:
        return {self._parse_key(el): self._parse_value(el) for el in self._part_document(self.__selector__)}

    def _parse_key(self, el):
        try:
            var = self._attr(el, "res")
            return var
        except Exception:
            return "null"

    def _parse_value(self, el):
        try:
            var = self._attr(el, "src")
            return var
        except Exception:
            return None

    def _part_document(self, el):
        var = self._css_all(el, "#my-player > source")
        return var


class SourcePage(BaseParser):
    """

        GET https://jut.su/<ANIME PATH>/<SEASON?>/episode-<NUM>.html

        NOTE: VIDEO PLAY REQUEST SHOULD HAVE THE SAME USER-AGENT AS AN API CLIENT

        eg:

        cl = Client(headers={"user-agent": "X"})

        ...

        s = SourcePage(doc).parse()

        mpv s["url_1080"] # 403, FORBIDDEN

        mpv s["url_1080"] --user-agent="Y" # 403, FORBIDDEN

        mpv s["url_1080"] --user-agent="X" # 200, OK

        EXAMPLE:
            GET https://jut.su/kime-no-yaiba/season-1/episode-1.html

        ISSUES:
            CHECK 'null' KEY in 'video'. if it contains - videos not available

            check block reasons regex patterns:

            - 'block_video_text_str_everywhere\\+' - К сожалению, это видео недоступно.
            - 'block_video_text_str\\+' - К сожалению, в России это видео недоступно.


    {
      "videos": {
        "QUALITY": "URL"
      }
    }
    """

    def parse(self) -> T_SourcePage:
        return self._run_parse()

    def _run_parse(self) -> T_SourcePage:
        return T_SourcePage(
            **{
                "videos": self._parse_videos(self.__selector__),
            }
        )

    def _parse_videos(self, el):
        var = self._nested_parser(el, SourceView)
        return var
