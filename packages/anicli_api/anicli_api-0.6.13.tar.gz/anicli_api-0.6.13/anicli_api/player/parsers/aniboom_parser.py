# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from typing import TypedDict

from .baseStruct import BaseParser


T_AniboomPage = TypedDict("T_AniboomPage", {"data_parameters": str, "hls": str, "dash": str})


class AniboomPage(BaseParser):
    """
        Extract MPD and M3U8 urls

        Required `referer="https://animego.org/` HEADER

        USAGE:
            1. GET <PLAYER_LINK> (e.g. https://aniboom.one/embed/6BmMbB7MxWO?episode=1&translation=30)
            2. PARSE. If pre-unescape response before parse - css selector may not find attribute
            3. For video playing, url required next headers:

            - Referer="https://aniboom.one/"
            - Accept-Language="ru-RU"  # INCREASE DOWNLOAD SPEED with this static value
            - Origin="https://aniboom.one"
        ISSUES:
            - 403 Forbidden if request sent not from CIS region
            - KEYS SHOULD BE STARTED IN Title case else hls/mpd links returns 403 error
            - Sometimes, aniboom backend missing MPD key and returns M3U8 url. Check this value before usage:

            https://github.com/vypivshiy/ani-cli-ru/issues/29

            Expected json signature (LOOK at dash.src and hls.src keys):

            { ...
            "dash":"{"src":"https:.../abcdef.mpd",        "type":"application\\/dash+xml"}",
            "hls":"{"src":"https:...\\/master_device.m3u8",
            "type":"application\\/x-mpegURL"}"

            ... }

            MAYBE returns this:

             { ...
            "dash":"{"src":"https:...master_device.m3u8",        "type":"application\\/dash+xml"}",
            "hls":"{"src":"https:...master_device.m3u8",
            "type":"application\\/x-mpegURL"}"

            ... }





    {
      "data_parameters": "String",
      "hls": "String",
      "dash": "String"
    }
    """

    def parse(self) -> T_AniboomPage:
        return self._run_parse()

    def _run_parse(self) -> T_AniboomPage:
        return T_AniboomPage(
            **{
                "data_parameters": self._parse_data_parameters(self.__selector__),
                "hls": self._parse_hls(self.__selector__),
                "dash": self._parse_dash(self.__selector__),
            }
        )

    def _parse_data_parameters(self, el):
        var = self._css(el, "#video")
        var_1 = self._attr(var, "data-parameters")
        var_2 = self._str_replace(var_1, "\\", "")
        var_3 = self._str_replace(var_2, "&quot;", '"')
        return var_3

    def _parse_hls(self, el):
        var = self._css(el, "#video")
        var_1 = self._attr(var, "data-parameters")
        var_2 = self._str_replace(var_1, "\\", "")
        var_3 = self._str_replace(var_2, "&quot;", '"')
        var_4 = self._re_match(var_3, '"hls":"{"src":"(https?.*?\\.m3u8)"', 1)
        return var_4

    def _parse_dash(self, el):
        var = self._css(el, "#video")
        var_1 = self._attr(var, "data-parameters")
        var_2 = self._str_replace(var_1, "\\", "")
        var_3 = self._str_replace(var_2, "&quot;", '"')
        var_4 = self._re_match(var_3, '"dash":"{"src":"(https?.*?\\.(?:mpd|m3u8))"', 1)
        return var_4
