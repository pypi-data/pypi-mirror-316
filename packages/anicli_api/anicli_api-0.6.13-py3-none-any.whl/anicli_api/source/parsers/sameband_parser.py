# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from typing import List, TypedDict

from .baseStruct import BaseParser


T_OngoingPage = TypedDict("T_OngoingPage", {"url": str, "title": str, "thumbnail": str})

T_SearchPage = TypedDict("T_SearchPage", {"title": str, "thumbnail": str, "url": str})

T_AnimePage = TypedDict(
    "T_AnimePage", {"title": str, "alt_title": str, "description": str, "thumbnail": str, "player_url": str}
)

T_PlaylistURLPage = TypedDict("T_PlaylistURLPage", {"playlist_url": str})


class OngoingPage(BaseParser):
    """
        GET https://sameband.studio/novinki

    [
      {
        "url": "String",
        "title": "String",
        "thumbnail": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_OngoingPage"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_OngoingPage"]:
        return [
            T_OngoingPage(
                **{
                    "url": self._parse_url(el),
                    "title": self._parse_title(el),
                    "thumbnail": self._parse_thumbnail(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".col-auto")
        return var

    def _parse_url(self, el):
        var = self._css(el, "a")
        var_1 = self._attr(var, "href")
        return var_1

    def _parse_title(self, el):
        var = self._css(el, ".col-auto .poster")
        var_1 = self._attr(var, "title")
        return var_1

    def _parse_thumbnail(self, el):
        var = self._css(el, "img.swiper-lazy")
        var_1 = self._attr(var, "src")
        var_2 = self._str_format(var_1, "https://sameband.studio{}")
        return var_2


class SearchPage(BaseParser):
    """

        POST https://sameband.studio/index.php?do=search
        do=search&subaction=search&search_start=0&full_search=0&result_from=1&story=<QUERY>

        NOTE:
            search query len should be 4 or more characters. And in manual tests, works only cyrillic queries

        EXAMPLE:
            POST https://sameband.studio/index.php?do=search
        do=search&subaction=search&search_start=0&full_search=0&result_from=1&story=ВЕДЬ


    [
      {
        "title": "String",
        "thumbnail": "String",
        "url": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_SearchPage"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_SearchPage"]:
        return [
            T_SearchPage(
                **{
                    "title": self._parse_title(el),
                    "thumbnail": self._parse_thumbnail(el),
                    "url": self._parse_url(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".col-auto")
        return var

    def _parse_title(self, el):
        var = self._css(el, ".col-auto .poster")
        var_1 = self._attr(var, "title")
        return var_1

    def _parse_thumbnail(self, el):
        var = self._css(el, "img.swiper-lazy")
        var_1 = self._attr(var, "src")
        var_2 = self._str_format(var_1, "https://sameband.studio{}")
        return var_2

    def _parse_url(self, el):
        var = self._css(el, ".image")
        var_1 = self._attr(var, "href")
        return var_1


class AnimePage(BaseParser):
    """

        GET https://sameband.studio/anime/<ANIME PATH>.html

        EXAMPLE:
            # https://sameband.studio/anime/20-госпожа-кагуя-3.html
            GET https://sameband.studio/anime/20-%D0%B3%D0%BE%D1%81%D0%BF%D0%BE%D0%B6%D0%B0-%D0%BA%D0%B0%D0%B3%D1%83%D1%8F-3.html


    {
      "title": "String",
      "alt_title": "String",
      "description": "String",
      "thumbnail": "String",
      "player_url": "String"
    }
    """

    def parse(self) -> T_AnimePage:
        return self._run_parse()

    def _run_parse(self) -> T_AnimePage:
        return T_AnimePage(
            **{
                "title": self._parse_title(self.__selector__),
                "alt_title": self._parse_alt_title(self.__selector__),
                "description": self._parse_description(self.__selector__),
                "thumbnail": self._parse_thumbnail(self.__selector__),
                "player_url": self._parse_player_url(self.__selector__),
            }
        )

    def _parse_title(self, el):
        var = self._css(el, "h1.m-0")
        var_1 = self._attr_text(var)
        return var_1

    def _parse_alt_title(self, el):
        var = self._css(el, ".help")
        var_1 = self._attr_text(var)
        return var_1

    def _parse_description(self, el):
        var = self._css_all(el, ".limiter span")
        var_1 = self._attr_text_all(var)
        var_2 = self._arr_join(var_1, " ")
        return var_2

    def _parse_thumbnail(self, el):
        var = self._css(el, ".image > img")
        var_1 = self._attr(var, "src")
        var_2 = self._str_format(var_1, "https://sameband.studio{}")
        return var_2

    def _parse_player_url(self, el):
        var = self._css(el, ".player > .player-content > iframe")
        var_1 = self._attr(var, "src")
        var_2 = self._str_format(var_1, "https://sameband.studio{}")
        return var_2


class PlaylistURLPage(BaseParser):
    """
        GET https://sameband.studio/pl/a/<PLAYLIST NAME>.html

        EXAMPLE:
            GET https://sameband.studio/pl/a/Mashle_2nd_Season.html


    {
      "playlist_url": "String"
    }
    """

    def parse(self) -> T_PlaylistURLPage:
        return self._run_parse()

    def _run_parse(self) -> T_PlaylistURLPage:
        return T_PlaylistURLPage(
            **{
                "playlist_url": self._parse_playlist_url(self.__selector__),
            }
        )

    def _parse_playlist_url(self, el):
        var = self._attr_raw(el)
        var_1 = self._re_match(var, "var\\s*player\\s*=[^>]+file:[\\\"']([^>]+)[\\\"']", 1)
        var_2 = self._str_format(var_1, "https://sameband.studio{}")
        return var_2
