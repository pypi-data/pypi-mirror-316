# Auto generated code by ssc_gen
# WARNING: Any manual changes made to this file will be lost when this
# is run again. Do not edit this file unless you know what you are doing.

from typing import Dict, List, TypedDict

from .baseStruct import BaseParser


T_OngoingPage = TypedDict("T_OngoingPage", {"url": str, "title": str, "thumbnail": str})

T_SearchPage = TypedDict("T_SearchPage", {"url": str, "title": str, "thumbnail": str})

T_AnimePage = TypedDict("T_AnimePage", {"title": str, "description": str, "thumbnail": str, "news_id": str})

T_EpisodeDubbersView = Dict[str, str]

T_EpisodesPage = TypedDict("T_EpisodesPage", {"dubbers": T_EpisodeDubbersView, "player_url": str})

T_SourceKodikEpisodesView = TypedDict(
    "T_SourceKodikEpisodesView", {"value": str, "data_id": str, "data_hash": str, "data_title": str}
)

T_SourceKodikTranslationsView = TypedDict(
    "T_SourceKodikTranslationsView",
    {
        "value": str,
        "data_id": str,
        "data_translation_type": str,
        "data_media_id": str,
        "data_media_hash": str,
        "data_media_type": str,
        "data_title": str,
        "data_episode_count": str,
    },
)

T_SourceKodikSerialPage = TypedDict(
    "T_SourceKodikSerialPage",
    {"episodes": List["T_SourceKodikEpisodesView"], "translations": List["T_SourceKodikTranslationsView"]},
)


class OngoingPage(BaseParser):
    """
        Get all available ongoings from main page

        GET https://animego.pro/ongoing


    [
      {
        "url": "String",
        "title": "String",
        "thumbnail": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_OngoingPage"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_OngoingPage"]:
        return [
            T_OngoingPage(
                **{
                    "url": self._parse_url(el),
                    "title": self._parse_title(el),
                    "thumbnail": self._parse_thumbnail(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".card")
        return var

    def _parse_url(self, el):
        var = self._css(el, ".card .card__title > a")
        var_1 = self._attr(var, "href")
        return var_1

    def _parse_title(self, el):
        var = self._css(el, ".card .card__title > a")
        var_1 = self._attr_text(var)
        return var_1

    def _parse_thumbnail(self, el):
        var = self._css(el, ".card img")
        var_1 = self._attr(var, "src")
        var_2 = self._str_ltrim(var_1, "https://animego-online.org")
        var_3 = self._str_format(var_2, "https://animego.pro{}")
        return var_3


class SearchPage(BaseParser):
    """
        Get all search results by query

        POST https://animego.pro
        do=search&subaction=search&story=QUERY


    [
      {
        "url": "String",
        "title": "String",
        "thumbnail": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_SearchPage"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_SearchPage"]:
        return [
            T_SearchPage(
                **{
                    "url": self._parse_url(el),
                    "title": self._parse_title(el),
                    "thumbnail": self._parse_thumbnail(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".card")
        return var

    def _parse_url(self, el):
        var = self._css(el, ".card .card__title > a")
        var_1 = self._attr(var, "href")
        return var_1

    def _parse_title(self, el):
        var = self._css(el, ".card .card__title > a")
        var_1 = self._attr_text(var)
        return var_1

    def _parse_thumbnail(self, el):
        var = self._css(el, ".card img")
        var_1 = self._attr(var, "src")
        var_2 = self._str_ltrim(var_1, "https://animego-online.org")
        var_3 = self._str_format(var_2, "https://animego.pro{}")
        return var_3


class AnimePage(BaseParser):
    """
        Anime page information. anime path contains in SearchView.url or Ongoing.url

        GET https://animego.pro/<ANIME_PATH>

        EXAMPLE:

            GET https://animego.pro/3374-serial-experiments-lain.html


    {
      "title": "String",
      "description": "String",
      "thumbnail": "String",
      "news_id": "String"
    }
    """

    def parse(self) -> T_AnimePage:
        return self._run_parse()

    def _run_parse(self) -> T_AnimePage:
        return T_AnimePage(
            **{
                "title": self._parse_title(self.__selector__),
                "description": self._parse_description(self.__selector__),
                "thumbnail": self._parse_thumbnail(self.__selector__),
                "news_id": self._parse_news_id(self.__selector__),
            }
        )

    def _parse_title(self, el):
        var = self._css(el, ".page__header h1")
        var_1 = self._attr_text(var)
        return var_1

    def _parse_description(self, el):
        var = self._css_all(el, ".clearfix")
        var_1 = self._attr_text_all(var)
        var_2 = self._arr_join(var_1, " ")
        return var_2

    def _parse_thumbnail(self, el):
        var = self._css(el, ".pmovie__poster > img")
        var_1 = self._attr(var, "src")
        var_2 = self._str_ltrim(var_1, "https://animego-online.org")
        var_3 = self._str_format(var_2, "https://animego.pro{}")
        return var_3

    def _parse_news_id(self, el):
        var = self._css(el, "#kodik_player_ajax")
        var_1 = self._attr(var, "data-news_id")
        return var_1


class EpisodeDubbersView(BaseParser):
    """


    {
      "K": "V",
      "...": "..."
    }
    """

    def parse(self) -> T_EpisodeDubbersView:
        return self._run_parse()

    def _run_parse(self) -> T_EpisodeDubbersView:
        return {self._parse_key(el): self._parse_value(el) for el in self._part_document(self.__selector__)}

    def _parse_key(self, el):
        var = self._attr(el, "data-this_translator")
        return var

    def _parse_value(self, el):
        var = self._attr_text(el)
        return var

    def _part_document(self, el):
        var = self._css_all(el, "#translators-list > li")
        return var


class EpisodesPage(BaseParser):
    """
        Representation dubbers, and video url data

        Prepare:
          1. get news_id from Anime object
          2. POST 'https://animego.pro/engine/ajax/controller.php?mod=kodik_playlist_ajax'
            news_id=<AnimeView.news_id>&action=load_player
          3. send request to /serial/ link, DROP param only_translations
        EXAMPLE:

            # SOURCE:
                https://animego.pro/6240-loop-7-kaime-no-akuyaku-reijou-wa-moto-tekikoku-de-jiyuukimama-na-hanayome-seikatsu-o-mankitsu-suru.html

            POST https://animego.pro/engine/ajax/controller.php?mod=kodik_playlist_ajax
            news_id=6240&action=load_player


    {
      "dubbers": {
        "K": "V",
        "...": "..."
      },
      "player_url": "String"
    }
    """

    def parse(self) -> T_EpisodesPage:
        return self._run_parse()

    def _run_parse(self) -> T_EpisodesPage:
        return T_EpisodesPage(
            **{
                "dubbers": self._parse_dubbers(self.__selector__),
                "player_url": self._parse_player_url(self.__selector__),
            }
        )

    def _parse_dubbers(self, el):
        var = self._nested_parser(el, EpisodeDubbersView)
        return var

    def _parse_player_url(self, el):
        var = self._css(el, "#player_kodik > iframe")
        var_1 = self._attr(var, "src")
        var_2 = self._str_format(var_1, "https:{}")
        return var_2


class SourceKodikEpisodesView(BaseParser):
    """


    [
      {
        "value": "String",
        "data_id": "String",
        "data_hash": "String",
        "data_title": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_SourceKodikEpisodesView"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_SourceKodikEpisodesView"]:
        return [
            T_SourceKodikEpisodesView(
                **{
                    "value": self._parse_value(el),
                    "data_id": self._parse_data_id(el),
                    "data_hash": self._parse_data_hash(el),
                    "data_title": self._parse_data_title(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".serial-series-box > select > option")
        return var

    def _parse_value(self, el):
        var = self._attr(el, "value")
        return var

    def _parse_data_id(self, el):
        var = self._attr(el, "data-id")
        return var

    def _parse_data_hash(self, el):
        var = self._attr(el, "data-hash")
        return var

    def _parse_data_title(self, el):
        var = self._attr(el, "data-title")
        var_1 = self._str_trim(var, " ")
        return var_1


class SourceKodikTranslationsView(BaseParser):
    """


    [
      {
        "value": "String",
        "data_id": "String",
        "data_translation_type": "String",
        "data_media_id": "String",
        "data_media_hash": "String",
        "data_media_type": "String",
        "data_title": "String",
        "data_episode_count": "String"
      },
      "..."
    ]
    """

    def parse(self) -> List["T_SourceKodikTranslationsView"]:
        return self._run_parse()

    def _run_parse(self) -> List["T_SourceKodikTranslationsView"]:
        return [
            T_SourceKodikTranslationsView(
                **{
                    "value": self._parse_value(el),
                    "data_id": self._parse_data_id(el),
                    "data_translation_type": self._parse_data_translation_type(el),
                    "data_media_id": self._parse_data_media_id(el),
                    "data_media_hash": self._parse_data_media_hash(el),
                    "data_media_type": self._parse_data_media_type(el),
                    "data_title": self._parse_data_title(el),
                    "data_episode_count": self._parse_data_episode_count(el),
                }
            )
            for el in self._part_document(self.__selector__)
        ]

    def _part_document(self, el):
        var = self._css_all(el, ".serial-translations-box > select > option")
        return var

    def _parse_value(self, el):
        var = self._attr(el, "value")
        return var

    def _parse_data_id(self, el):
        var = self._attr(el, "data-id")
        return var

    def _parse_data_translation_type(self, el):
        var = self._attr(el, "data-translation-type")
        return var

    def _parse_data_media_id(self, el):
        var = self._attr(el, "data-media-id")
        return var

    def _parse_data_media_hash(self, el):
        var = self._attr(el, "data-media-hash")
        return var

    def _parse_data_media_type(self, el):
        var = self._attr(el, "data-media-type")
        return var

    def _parse_data_title(self, el):
        var = self._attr(el, "data-title")
        return var

    def _parse_data_episode_count(self, el):
        var = self._attr(el, "data-episode-count")
        return var


class SourceKodikSerialPage(BaseParser):
    """
        extract videos from kodik serial path. this values helps create video player link

        Example:
             SERIAL, bot SERIA path====vvvvv
            - GET 'https://kodik.info/serial/58496/d2a8737db86989de0863bac5c14ce18b/720p?translations=false&only_translations=1895'


    {
      "episodes": [
        {
          "value": "String",
          "data_id": "String",
          "data_hash": "String",
          "data_title": "String"
        },
        "..."
      ],
      "translations": [
        {
          "value": "String",
          "data_id": "String",
          "data_translation_type": "String",
          "data_media_id": "String",
          "data_media_hash": "String",
          "data_media_type": "String",
          "data_title": "String",
          "data_episode_count": "String"
        },
        "..."
      ]
    }
    """

    def parse(self) -> T_SourceKodikSerialPage:
        return self._run_parse()

    def _run_parse(self) -> T_SourceKodikSerialPage:
        return T_SourceKodikSerialPage(
            **{
                "episodes": self._parse_episodes(self.__selector__),
                "translations": self._parse_translations(self.__selector__),
            }
        )

    def _parse_episodes(self, el):
        var = self._nested_parser(el, SourceKodikEpisodesView)
        return var

    def _parse_translations(self, el):
        var = self._nested_parser(el, SourceKodikTranslationsView)
        return var
