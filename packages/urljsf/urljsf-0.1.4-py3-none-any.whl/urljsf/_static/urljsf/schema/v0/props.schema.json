{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/Props",
  "definitions": {
    "Props": {
      "type": "object",
      "description": "JSON-compatible default values for `rjsf` [Form.props][props].\n\n[props]: https://rjsf-team.github.io/react-jsonschema-form/docs/api-reference/form-props",
      "properties": {
        "acceptCharset": {
          "type": "string",
          "description": "The value of this prop will be passed to the `accept-charset` HTML attribute on the form"
        },
        "action": {
          "type": "string",
          "description": "The value of this prop will be passed to the `action` HTML attribute on the form\n\nNOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()` and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar."
        },
        "autoComplete": {
          "type": "string",
          "description": "The value of this prop will be passed to the `autocomplete` HTML attribute on the form"
        },
        "className": {
          "type": "string",
          "description": "The value of this prop will be passed to the `class` HTML attribute on the form"
        },
        "disabled": {
          "type": "boolean",
          "description": "It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`"
        },
        "enctype": {
          "type": "string",
          "description": "The value of this prop will be passed to the `enctype` HTML attribute on the form"
        },
        "extraErrorsBlockSubmit": {
          "type": "boolean",
          "description": "If set to true, causes the `extraErrors` to become blocking when the form is submitted"
        },
        "focusOnFirstError": {
          "type": "boolean",
          "description": "If set to true, then the first field with an error will receive the focus when the form is submitted with errors"
        },
        "formContext": {
          "type": "object",
          "description": "globals for custom UI"
        },
        "formData": {
          "type": "object",
          "description": "The data for the form, used to prefill a form with existing data"
        },
        "id": {
          "type": "string",
          "description": "The value of this prop will be passed to the `id` HTML attribute on the form"
        },
        "idPrefix": {
          "type": "string",
          "description": "To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids; Default is `root`"
        },
        "idSeparator": {
          "type": "string",
          "description": "To avoid using a path separator that is present in field names, it is possible to change the separator used for ids (Default is `_`)"
        },
        "liveOmit": {
          "type": "boolean",
          "description": "If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field will be removed whenever `onChange` is called. Set to `false` by default"
        },
        "liveValidate": {
          "type": "boolean",
          "description": "If set to true, the form will perform validation and show any validation errors whenever the form data is changed, rather than just on submit"
        },
        "method": {
          "type": "string",
          "description": "The value of this prop will be passed to the `method` HTML attribute on the form"
        },
        "name": {
          "type": "string",
          "description": "The value of this prop will be passed to the `name` HTML attribute on the form"
        },
        "noHtml5Validate": {
          "type": "boolean",
          "description": "If set to true, turns off HTML5 validation on the form; Set to `false` by default"
        },
        "omitExtraData": {
          "type": "boolean",
          "description": "If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is called. Set to `false` by default."
        },
        "readonly": {
          "type": "boolean",
          "description": "It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly` parameter in `uiSchema`"
        },
        "schema": {
          "type": "object",
          "description": "The JSON schema object for the form"
        },
        "showErrorList": {
          "type": ["boolean", "string"],
          "description": "When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also show. When set to false, only inline input validation errors will be shown. Set to `top` by default",
          "enum": [false, "top", "bottom"]
        },
        "tagName": {
          "type": "string",
          "description": "It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no longer work"
        },
        "target": {
          "type": "string",
          "description": "The value of this prop will be passed to the `target` HTML attribute on the form"
        },
        "uiSchema": {
          "$ref": "#/definitions/UISchema",
          "description": "The uiSchema for the form"
        }
      },
      "additionalProperties": false
    },
    "UISchema": {
      "type": "object",
      "properties": {
        "items": {
          "$ref": "#/definitions/UISchema",
          "description": "An array of objects representing the items in the array"
        },
        "ui:field": {
          "type": "string",
          "description": "Allows RJSF to override the default field implementation by specifying either the name of a field that is used to look up an implementation from the `fields` list or an actual one-off `Field` component implementation itself"
        },
        "ui:fieldReplacesAnyOrOneOf": {
          "type": "boolean"
        },
        "ui:options": {
          "type": "object",
          "description": "An object that contains all the potential UI options in a single object",
          "properties": {
            "title": {
              "type": "string",
              "description": "We know that for title, it will be a string, if it is provided"
            },
            "description": {
              "type": "string",
              "description": "We know that for description, it will be a string, if it is provided"
            },
            "classNames": {
              "type": "string",
              "description": "Any classnames that the user wants to be applied to a field in the ui"
            },
            "disabled": {
              "type": "boolean",
              "description": "Flag, if set to `true`, will mark all child widgets from a given field as disabled"
            },
            "emptyValue": {
              "description": "The default value to use when an input for a field is empty",
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {}
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {}
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "type": "null"
                }
              ]
            },
            "enumDisabled": {
              "type": "array",
              "description": "Will disable any of the enum options specified in the array (by value)",
              "items": {
                "type": ["string", "number", "boolean"]
              }
            },
            "enumNames": {
              "description": "Allows a user to provide a list of labels for enum values in the schema",
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "string"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "array",
                      "items": {}
                    }
                  ]
                },
                {
                  "type": "null"
                }
              ]
            },
            "filePreview": {
              "type": "boolean",
              "description": "Flag, if set to `true`, will cause the `FileWidget` to show a preview (with download for non-image files)"
            },
            "help": {
              "type": "string",
              "description": "Used to add text next to a field to guide the end user in filling it in"
            },
            "hideError": {
              "type": "boolean",
              "description": "Flag, if set to `true`, will hide the default error display for the given field AND all of its child fields in the hierarchy"
            },
            "inline": {
              "type": "boolean",
              "description": "Flag, if set to `true`, will mark a list of checkboxes as displayed all on one line instead of one per row"
            },
            "inputType": {
              "type": "string",
              "description": "Used to change the input type (for example, `tel` or `email`) for an <input>"
            },
            "order": {
              "description": "This property allows you to reorder the properties that are shown for a particular object",
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "number"
                },
                {
                  "type": "string"
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "object",
                      "properties": {}
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "array",
                      "items": {}
                    }
                  ]
                },
                {
                  "type": "null"
                }
              ]
            },
            "placeholder": {
              "type": "string",
              "description": "We know that for placeholder, it will be a string, if it is provided"
            },
            "readonly": {
              "type": "boolean",
              "description": "Flag, if set to `true`, will mark all child widgets from a given field as read-only"
            },
            "rows": {
              "type": "number",
              "description": "Provides a means to set the initial height of a textarea widget"
            },
            "style": {
              "type": "object"
            },
            "urljsf:grid": {
              "type": "object",
              "description": "custom overrides for urlsjf grid",
              "properties": {
                "addButton": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "children": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "default": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            "widget": {
              "type": "string"
            }
          }
        },
        "ui:rootFieldId": {
          "type": "string"
        }
      },
      "additionalProperties": {
        "anyOf": [
          {
            "$ref": "#/definitions/UISchema"
          },
          {}
        ]
      }
    }
  }
}
