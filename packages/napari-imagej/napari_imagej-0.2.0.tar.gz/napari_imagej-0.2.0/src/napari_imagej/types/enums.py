"""
A module used to automatically generate python Enums from java Enums.
"""

from enum import Enum
from functools import lru_cache
from typing import Dict

from napari_imagej.java import jc

_ENUMS: Dict["jc.Enum", Enum] = {}


@lru_cache(maxsize=None)
def py_enum_for(java_type: "jc.Enum"):
    """
    Generates a Python Enum equivalent to java_type
    This function caches inputs, to prevent duplicates.
    :param java_type: a Java Enum
    :return: a Python Enum, with the same name and values as java_type
    """

    # Ensure we have an Enum
    if not java_type.isEnum():
        return None
    # Construct a Python enum equivalent to the java one
    value = str(java_type.getSimpleName())
    names = {str(v): v for v in java_type.getEnumConstants()}
    py_enum = Enum(value=value, names=names)

    # Keep track of it for later
    _ENUMS[py_enum] = java_type
    return py_enum


def _is_autogenerated_enum(obj: Enum) -> bool:
    """
    Returns true if obj is an Enum that this module auto-generated.
    :param obj: an object that may or may not be an Enum
    :return: true iff obj is an enum this module automatically generated.
    """
    return isinstance(obj, Enum) and type(obj) in _ENUMS.keys()
