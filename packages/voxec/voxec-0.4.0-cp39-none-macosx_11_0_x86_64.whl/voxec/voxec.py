# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _voxec
else:
    import _voxec

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class voxel_desc_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_size_in_bits(self):
        return _voxec.voxel_desc_t_get_size_in_bits(self)
    __swig_destroy__ = _voxec.delete_voxel_desc_t

# Register voxel_desc_t in _voxec:
_voxec.voxel_desc_t_swigregister(voxel_desc_t)
class bit_t(voxel_desc_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_value = _voxec.bit_t_min_value
    max_value = _voxec.bit_t_max_value
    size_in_bits = _voxec.bit_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.bit_t_get_size_in_bits(self)

    def __init__(self):
        _voxec.bit_t_swiginit(self, _voxec.new_bit_t())
    __swig_destroy__ = _voxec.delete_bit_t

# Register bit_t in _voxec:
_voxec.bit_t_swigregister(bit_t)
class voxel_uint8_t(voxel_desc_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_value = _voxec.voxel_uint8_t_min_value
    max_value = _voxec.voxel_uint8_t_max_value
    size_in_bits = _voxec.voxel_uint8_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.voxel_uint8_t_get_size_in_bits(self)

    def __init__(self):
        _voxec.voxel_uint8_t_swiginit(self, _voxec.new_voxel_uint8_t())
    __swig_destroy__ = _voxec.delete_voxel_uint8_t

# Register voxel_uint8_t in _voxec:
_voxec.voxel_uint8_t_swigregister(voxel_uint8_t)
class voxel_uint32_t(voxel_desc_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_value = _voxec.voxel_uint32_t_min_value
    max_value = _voxec.voxel_uint32_t_max_value
    size_in_bits = _voxec.voxel_uint32_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.voxel_uint32_t_get_size_in_bits(self)

    def __init__(self):
        _voxec.voxel_uint32_t_swiginit(self, _voxec.new_voxel_uint32_t())
    __swig_destroy__ = _voxec.delete_voxel_uint32_t

# Register voxel_uint32_t in _voxec:
_voxec.voxel_uint32_t_swigregister(voxel_uint32_t)
class normal_and_curvature_t(voxel_desc_t):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    min_value = _voxec.normal_and_curvature_t_min_value
    max_value = _voxec.normal_and_curvature_t_max_value
    size_in_bits = _voxec.normal_and_curvature_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.normal_and_curvature_t_get_size_in_bits(self)

    def __init__(self):
        _voxec.normal_and_curvature_t_swiginit(self, _voxec.new_normal_and_curvature_t())
    __swig_destroy__ = _voxec.delete_normal_and_curvature_t

# Register normal_and_curvature_t in _voxec:
_voxec.normal_and_curvature_t_swigregister(normal_and_curvature_t)
file_part_meta = _voxec.file_part_meta
file_part_index = _voxec.file_part_index
file_part_contents = _voxec.file_part_contents
file_part_primitives = _voxec.file_part_primitives
CK_EMPTY = _voxec.CK_EMPTY
CK_EXPLICIT = _voxec.CK_EXPLICIT
CK_PLANAR = _voxec.CK_PLANAR
CK_CONSTANT = _voxec.CK_CONSTANT
class abstract_voxel_storage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value_bits(self):
        return _voxec.abstract_voxel_storage_value_bits(self)
    __swig_destroy__ = _voxec.delete_abstract_voxel_storage

    def write(self, arg2, arg3):
        return _voxec.abstract_voxel_storage_write(self, arg2, arg3)

    def Get(self, *args):
        return _voxec.abstract_voxel_storage_Get(self, *args)

    def Set(self, *args):
        return _voxec.abstract_voxel_storage_Set(self, *args)

    def GetVoxelX(self, x, i):
        return _voxec.abstract_voxel_storage_GetVoxelX(self, x, i)

    def GetVoxelY(self, y, j):
        return _voxec.abstract_voxel_storage_GetVoxelY(self, y, j)

    def GetVoxelZ(self, z, k):
        return _voxec.abstract_voxel_storage_GetVoxelZ(self, z, k)

    def GetCenter(self, i, j, k, x, y, z):
        return _voxec.abstract_voxel_storage_GetCenter(self, i, j, k, x, y, z)

    def GetNbX(self):
        return _voxec.abstract_voxel_storage_GetNbX(self)

    def GetNbY(self):
        return _voxec.abstract_voxel_storage_GetNbY(self)

    def GetNbZ(self):
        return _voxec.abstract_voxel_storage_GetNbZ(self)

    def extents(self):
        return _voxec.abstract_voxel_storage_extents(self)

    def inverted(self, location=None):
        return _voxec.abstract_voxel_storage_inverted(self, location)

    def boolean_union(self, other):
        return _voxec.abstract_voxel_storage_boolean_union(self, other)

    def boolean_subtraction(self, other):
        return _voxec.abstract_voxel_storage_boolean_subtraction(self, other)

    def boolean_intersection(self, other):
        return _voxec.abstract_voxel_storage_boolean_intersection(self, other)

    def boolean_union_inplace(self, other):
        return _voxec.abstract_voxel_storage_boolean_union_inplace(self, other)

    def boolean_subtraction_inplace(self, other):
        return _voxec.abstract_voxel_storage_boolean_subtraction_inplace(self, other)

    def boolean_intersection_inplace(self, other):
        return _voxec.abstract_voxel_storage_boolean_intersection_inplace(self, other)

    def is_explicit(self):
        return _voxec.abstract_voxel_storage_is_explicit(self)

    def is_constant(self):
        return _voxec.abstract_voxel_storage_is_constant(self)

    def make_explicit(self, location=None):
        return _voxec.abstract_voxel_storage_make_explicit(self, location)

    def empty_copy(self):
        return _voxec.abstract_voxel_storage_empty_copy(self)

    def empty_copy_as(self, fmt):
        return _voxec.abstract_voxel_storage_empty_copy_as(self, fmt)

    def copy(self, location=None):
        return _voxec.abstract_voxel_storage_copy(self, location)

    def copy_as(self, fmt, location=None):
        return _voxec.abstract_voxel_storage_copy_as(self, fmt, location)

    def ray_intersect_n(self, pos, dir):
        return _voxec.abstract_voxel_storage_ray_intersect_n(self, pos, dir)

    def count(self):
        return _voxec.abstract_voxel_storage_count(self)

    def bounds(self):
        return _voxec.abstract_voxel_storage_bounds(self)

    def original_bounds(self):
        return _voxec.abstract_voxel_storage_original_bounds(self)

    def encode(self):
        return _voxec.abstract_voxel_storage_encode(self)

    def release(self, c):
        return _voxec.abstract_voxel_storage_release(self, c)

    def components(self):
        return _voxec.abstract_voxel_storage_components(self)

    def get_domain_buffer(self):
        return _voxec.abstract_voxel_storage_get_domain_buffer(self)

    def get_domain(self):
        return _voxec.abstract_voxel_storage_get_domain(self)

    def set(self, i, j, k, v):
        return _voxec.abstract_voxel_storage_set(self, i, j, k, v)

    def get(self, *args):
        return _voxec.abstract_voxel_storage_get(self, *args)

    def world_bounds(self):
        return _voxec.abstract_voxel_storage_world_bounds(self)

# Register abstract_voxel_storage in _voxec:
_voxec.abstract_voxel_storage_swigregister(abstract_voxel_storage)
class set_voxel_iterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, storage, current):
        _voxec.set_voxel_iterator_swiginit(self, _voxec.new_set_voxel_iterator(storage, current))

    def neighbour(self, d):
        return _voxec.set_voxel_iterator_neighbour(self, d)

    def value(self, arg2):
        return _voxec.set_voxel_iterator_value(self, arg2)

    def neighbour_value(self, d, arg3):
        return _voxec.set_voxel_iterator_neighbour_value(self, d, arg3)

    def __eq__(self, other):
        return _voxec.set_voxel_iterator___eq__(self, other)

    def __ne__(self, other):
        return _voxec.set_voxel_iterator___ne__(self, other)

    def __ref__(self):
        return _voxec.set_voxel_iterator___ref__(self)
    __swig_destroy__ = _voxec.delete_set_voxel_iterator

# Register set_voxel_iterator in _voxec:
_voxec.set_voxel_iterator_swigregister(set_voxel_iterator)
class obj_export_helper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stream = property(_voxec.obj_export_helper_stream_get, _voxec.obj_export_helper_stream_set)
    vert_counter = property(_voxec.obj_export_helper_vert_counter_get, _voxec.obj_export_helper_vert_counter_set)
    normals_emitted = property(_voxec.obj_export_helper_normals_emitted_get, _voxec.obj_export_helper_normals_emitted_set)

    def __init__(self, fs, n=1):
        _voxec.obj_export_helper_swiginit(self, _voxec.new_obj_export_helper(fs, n))
    __swig_destroy__ = _voxec.delete_obj_export_helper

# Register obj_export_helper in _voxec:
_voxec.obj_export_helper_swigregister(obj_export_helper)
class regular_voxel_storage(abstract_voxel_storage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def begin(self):
        return _voxec.regular_voxel_storage_begin(self)

    def end(self):
        return _voxec.regular_voxel_storage_end(self)

    def GetVoxelX(self, x, i):
        return _voxec.regular_voxel_storage_GetVoxelX(self, x, i)

    def GetVoxelY(self, y, j):
        return _voxec.regular_voxel_storage_GetVoxelY(self, y, j)

    def GetVoxelZ(self, z, k):
        return _voxec.regular_voxel_storage_GetVoxelZ(self, z, k)

    def GetCenter(self, i, j, k, x, y, z):
        return _voxec.regular_voxel_storage_GetCenter(self, i, j, k, x, y, z)

    def GetNbX(self):
        return _voxec.regular_voxel_storage_GetNbX(self)

    def GetNbY(self):
        return _voxec.regular_voxel_storage_GetNbY(self)

    def GetNbZ(self):
        return _voxec.regular_voxel_storage_GetNbZ(self)

    def voxel_size(self):
        return _voxec.regular_voxel_storage_voxel_size(self)

    def origin(self):
        return _voxec.regular_voxel_storage_origin(self)

    def obj_export(self, *args):
        return _voxec.regular_voxel_storage_obj_export(self, *args)
    __swig_destroy__ = _voxec.delete_regular_voxel_storage

# Register regular_voxel_storage in _voxec:
_voxec.regular_voxel_storage_swigregister(regular_voxel_storage)
class abstract_chunked_voxel_storage(regular_voxel_storage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def chunk_size(self):
        return _voxec.abstract_chunked_voxel_storage_chunk_size(self)

    def num_chunks(self):
        return _voxec.abstract_chunked_voxel_storage_num_chunks(self)

    def grid_offset(self):
        return _voxec.abstract_chunked_voxel_storage_grid_offset(self)

    def lock_bounds(self):
        return _voxec.abstract_chunked_voxel_storage_lock_bounds(self)

    def unlock_bounds(self):
        return _voxec.abstract_chunked_voxel_storage_unlock_bounds(self)

    def get_chunk(self, pos):
        return _voxec.abstract_chunked_voxel_storage_get_chunk(self, pos)

    def get_or_create_chunk(self, pos):
        return _voxec.abstract_chunked_voxel_storage_get_or_create_chunk(self, pos)

    def set_chunk(self, pos, arg3):
        return _voxec.abstract_chunked_voxel_storage_set_chunk(self, pos, arg3)

    def Set(self, *args):
        return _voxec.abstract_chunked_voxel_storage_Set(self, *args)

    def boolean_union(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_union(self, other_)

    def boolean_subtraction(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_subtraction(self, other_)

    def boolean_intersection(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_intersection(self, other_)

    def boolean_union_inplace(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_union_inplace(self, other_)

    def boolean_subtraction_inplace(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_subtraction_inplace(self, other_)

    def boolean_intersection_inplace(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_intersection_inplace(self, other_)

    def create_constant(self, c, value):
        return _voxec.abstract_chunked_voxel_storage_create_constant(self, c, value)

    def create_plane_primitive(self, c, axis, offset):
        return _voxec.abstract_chunked_voxel_storage_create_plane_primitive(self, c, axis, offset)

    def bounds(self):
        return _voxec.abstract_chunked_voxel_storage_bounds(self)

    def write(self, p, os):
        return _voxec.abstract_chunked_voxel_storage_write(self, p, os)
    __swig_destroy__ = _voxec.delete_abstract_chunked_voxel_storage

# Register abstract_chunked_voxel_storage in _voxec:
_voxec.abstract_chunked_voxel_storage_swigregister(abstract_chunked_voxel_storage)
class memory_mapped_chunked_voxel_storage(abstract_chunked_voxel_storage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _voxec.memory_mapped_chunked_voxel_storage_swiginit(self, _voxec.new_memory_mapped_chunked_voxel_storage(*args))

    def header_size(self):
        return _voxec.memory_mapped_chunked_voxel_storage_header_size(self)

    def count(self):
        return _voxec.memory_mapped_chunked_voxel_storage_count(self)

    def get_chunk(self, xyz):
        return _voxec.memory_mapped_chunked_voxel_storage_get_chunk(self, xyz)

    def Get(self, *args):
        return _voxec.memory_mapped_chunked_voxel_storage_Get(self, *args)

    def empty_copy(self):
        return _voxec.memory_mapped_chunked_voxel_storage_empty_copy(self)

    def empty_copy_as(self, fmt):
        return _voxec.memory_mapped_chunked_voxel_storage_empty_copy_as(self, fmt)

    def copy(self, location=None):
        return _voxec.memory_mapped_chunked_voxel_storage_copy(self, location)

    def copy_as(self, fmt, location=None):
        return _voxec.memory_mapped_chunked_voxel_storage_copy_as(self, fmt, location)

    def get_or_create_chunk(self, ijk):
        return _voxec.memory_mapped_chunked_voxel_storage_get_or_create_chunk(self, ijk)

    def set_chunk(self, ijk, s):
        return _voxec.memory_mapped_chunked_voxel_storage_set_chunk(self, ijk, s)
    __swig_destroy__ = _voxec.delete_memory_mapped_chunked_voxel_storage

# Register memory_mapped_chunked_voxel_storage in _voxec:
_voxec.memory_mapped_chunked_voxel_storage_swigregister(memory_mapped_chunked_voxel_storage)
class voxel_region(regular_voxel_storage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def base(self):
        return _voxec.voxel_region_base(self)

    def bounds(self):
        return _voxec.voxel_region_bounds(self)

    def original_bounds(self):
        return _voxec.voxel_region_original_bounds(self)

    @staticmethod
    def make(base_, i, N):
        return _voxec.voxel_region_make(base_, i, N)

    def write(self, arg2, arg3):
        return _voxec.voxel_region_write(self, arg2, arg3)

    def Get(self, *args):
        return _voxec.voxel_region_Get(self, *args)

    def inverted(self, location=None):
        return _voxec.voxel_region_inverted(self, location)

    def Set(self, *args):
        return _voxec.voxel_region_Set(self, *args)

    def boolean_union(self, other):
        return _voxec.voxel_region_boolean_union(self, other)

    def boolean_subtraction(self, other):
        return _voxec.voxel_region_boolean_subtraction(self, other)

    def boolean_intersection(self, other):
        return _voxec.voxel_region_boolean_intersection(self, other)

    def boolean_union_inplace(self, other_):
        return _voxec.voxel_region_boolean_union_inplace(self, other_)

    def boolean_subtraction_inplace(self, other_):
        return _voxec.voxel_region_boolean_subtraction_inplace(self, other_)

    def boolean_intersection_inplace(self, other_):
        return _voxec.voxel_region_boolean_intersection_inplace(self, other_)

    def make_explicit(self, location=None):
        return _voxec.voxel_region_make_explicit(self, location)

    def empty_copy(self):
        return _voxec.voxel_region_empty_copy(self)

    def copy(self, location=None):
        return _voxec.voxel_region_copy(self, location)

    def empty_copy_as(self, fmt):
        return _voxec.voxel_region_empty_copy_as(self, fmt)

    def copy_as(self, fmt, location=None):
        return _voxec.voxel_region_copy_as(self, fmt, location)

    def count(self):
        return _voxec.voxel_region_count(self)
    __swig_destroy__ = _voxec.delete_voxel_region

# Register voxel_region in _voxec:
_voxec.voxel_region_swigregister(voxel_region)

def storage_for(bounds, max_extents=1024, padding=0, chunk_size=64):
    return _voxec.storage_for(bounds, max_extents, padding, chunk_size)
class context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    scope = property(_voxec.context_scope_get, _voxec.context_scope_set)

    def __init__(self):
        _voxec.context_swiginit(self, _voxec.new_context())

    def set(self, *args):
        return _voxec.context_set(self, *args)
    __swig_destroy__ = _voxec.delete_context

# Register context in _voxec:
_voxec.context_swigregister(context)

def run_(name, args, kwargs, ctx=None, silent=False):
    return _voxec.run_(name, args, kwargs, ctx, silent)

