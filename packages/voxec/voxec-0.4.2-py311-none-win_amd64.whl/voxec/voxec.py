# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_voxec')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_voxec')
    _voxec = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_voxec', [dirname(__file__)])
        except ImportError:
            import _voxec
            return _voxec
        try:
            _mod = imp.load_module('_voxec', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _voxec = swig_import_helper()
    del swig_import_helper
else:
    import _voxec
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class voxel_desc_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, voxel_desc_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, voxel_desc_t, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def get_size_in_bits(self):
        return _voxec.voxel_desc_t_get_size_in_bits(self)
    __swig_destroy__ = _voxec.delete_voxel_desc_t
    __del__ = lambda self: None
voxel_desc_t_swigregister = _voxec.voxel_desc_t_swigregister
voxel_desc_t_swigregister(voxel_desc_t)

class bit_t(voxel_desc_t):
    __swig_setmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bit_t, name, value)
    __swig_getmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, bit_t, name)
    __repr__ = _swig_repr
    min_value = _voxec.bit_t_min_value
    max_value = _voxec.bit_t_max_value
    size_in_bits = _voxec.bit_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.bit_t_get_size_in_bits(self)

    def __init__(self):
        this = _voxec.new_bit_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _voxec.delete_bit_t
    __del__ = lambda self: None
bit_t_swigregister = _voxec.bit_t_swigregister
bit_t_swigregister(bit_t)

class voxel_uint8_t(voxel_desc_t):
    __swig_setmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, voxel_uint8_t, name, value)
    __swig_getmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, voxel_uint8_t, name)
    __repr__ = _swig_repr
    min_value = _voxec.voxel_uint8_t_min_value
    max_value = _voxec.voxel_uint8_t_max_value
    size_in_bits = _voxec.voxel_uint8_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.voxel_uint8_t_get_size_in_bits(self)

    def __init__(self):
        this = _voxec.new_voxel_uint8_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _voxec.delete_voxel_uint8_t
    __del__ = lambda self: None
voxel_uint8_t_swigregister = _voxec.voxel_uint8_t_swigregister
voxel_uint8_t_swigregister(voxel_uint8_t)

class voxel_uint32_t(voxel_desc_t):
    __swig_setmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, voxel_uint32_t, name, value)
    __swig_getmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, voxel_uint32_t, name)
    __repr__ = _swig_repr
    min_value = _voxec.voxel_uint32_t_min_value
    max_value = _voxec.voxel_uint32_t_max_value
    size_in_bits = _voxec.voxel_uint32_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.voxel_uint32_t_get_size_in_bits(self)

    def __init__(self):
        this = _voxec.new_voxel_uint32_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _voxec.delete_voxel_uint32_t
    __del__ = lambda self: None
voxel_uint32_t_swigregister = _voxec.voxel_uint32_t_swigregister
voxel_uint32_t_swigregister(voxel_uint32_t)

class normal_and_curvature_t(voxel_desc_t):
    __swig_setmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, normal_and_curvature_t, name, value)
    __swig_getmethods__ = {}
    for _s in [voxel_desc_t]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, normal_and_curvature_t, name)
    __repr__ = _swig_repr
    min_value = _voxec.normal_and_curvature_t_min_value
    max_value = _voxec.normal_and_curvature_t_max_value
    size_in_bits = _voxec.normal_and_curvature_t_size_in_bits

    def get_size_in_bits(self):
        return _voxec.normal_and_curvature_t_get_size_in_bits(self)

    def __init__(self):
        this = _voxec.new_normal_and_curvature_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _voxec.delete_normal_and_curvature_t
    __del__ = lambda self: None
normal_and_curvature_t_swigregister = _voxec.normal_and_curvature_t_swigregister
normal_and_curvature_t_swigregister(normal_and_curvature_t)

file_part_meta = _voxec.file_part_meta
file_part_index = _voxec.file_part_index
file_part_contents = _voxec.file_part_contents
file_part_primitives = _voxec.file_part_primitives
CK_EMPTY = _voxec.CK_EMPTY
CK_EXPLICIT = _voxec.CK_EXPLICIT
CK_PLANAR = _voxec.CK_PLANAR
CK_CONSTANT = _voxec.CK_CONSTANT
class abstract_voxel_storage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, abstract_voxel_storage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, abstract_voxel_storage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def value_bits(self):
        return _voxec.abstract_voxel_storage_value_bits(self)
    __swig_destroy__ = _voxec.delete_abstract_voxel_storage
    __del__ = lambda self: None

    def write(self, arg2, arg3):
        return _voxec.abstract_voxel_storage_write(self, arg2, arg3)

    def Get(self, *args):
        return _voxec.abstract_voxel_storage_Get(self, *args)

    def Set(self, *args):
        return _voxec.abstract_voxel_storage_Set(self, *args)

    def GetVoxelX(self, x, i):
        return _voxec.abstract_voxel_storage_GetVoxelX(self, x, i)

    def GetVoxelY(self, y, j):
        return _voxec.abstract_voxel_storage_GetVoxelY(self, y, j)

    def GetVoxelZ(self, z, k):
        return _voxec.abstract_voxel_storage_GetVoxelZ(self, z, k)

    def GetCenter(self, i, j, k, x, y, z):
        return _voxec.abstract_voxel_storage_GetCenter(self, i, j, k, x, y, z)

    def GetNbX(self):
        return _voxec.abstract_voxel_storage_GetNbX(self)

    def GetNbY(self):
        return _voxec.abstract_voxel_storage_GetNbY(self)

    def GetNbZ(self):
        return _voxec.abstract_voxel_storage_GetNbZ(self)

    def extents(self):
        return _voxec.abstract_voxel_storage_extents(self)

    def inverted(self, location=None):
        return _voxec.abstract_voxel_storage_inverted(self, location)

    def boolean_union(self, other):
        return _voxec.abstract_voxel_storage_boolean_union(self, other)

    def boolean_subtraction(self, other):
        return _voxec.abstract_voxel_storage_boolean_subtraction(self, other)

    def boolean_intersection(self, other):
        return _voxec.abstract_voxel_storage_boolean_intersection(self, other)

    def boolean_union_inplace(self, other):
        return _voxec.abstract_voxel_storage_boolean_union_inplace(self, other)

    def boolean_subtraction_inplace(self, other):
        return _voxec.abstract_voxel_storage_boolean_subtraction_inplace(self, other)

    def boolean_intersection_inplace(self, other):
        return _voxec.abstract_voxel_storage_boolean_intersection_inplace(self, other)

    def is_explicit(self):
        return _voxec.abstract_voxel_storage_is_explicit(self)

    def is_constant(self):
        return _voxec.abstract_voxel_storage_is_constant(self)

    def make_explicit(self, location=None):
        return _voxec.abstract_voxel_storage_make_explicit(self, location)

    def empty_copy(self):
        return _voxec.abstract_voxel_storage_empty_copy(self)

    def empty_copy_as(self, fmt):
        return _voxec.abstract_voxel_storage_empty_copy_as(self, fmt)

    def copy(self, location=None):
        return _voxec.abstract_voxel_storage_copy(self, location)

    def copy_as(self, fmt, location=None):
        return _voxec.abstract_voxel_storage_copy_as(self, fmt, location)

    def ray_intersect_n(self, pos, dir):
        return _voxec.abstract_voxel_storage_ray_intersect_n(self, pos, dir)

    def count(self):
        return _voxec.abstract_voxel_storage_count(self)

    def bounds(self):
        return _voxec.abstract_voxel_storage_bounds(self)

    def original_bounds(self):
        return _voxec.abstract_voxel_storage_original_bounds(self)

    def encode(self):
        return _voxec.abstract_voxel_storage_encode(self)

    def release(self, c):
        return _voxec.abstract_voxel_storage_release(self, c)

    def components(self):
        return _voxec.abstract_voxel_storage_components(self)

    def get_domain_buffer(self):
        return _voxec.abstract_voxel_storage_get_domain_buffer(self)

    def get_domain(self):
        return _voxec.abstract_voxel_storage_get_domain(self)

    def set(self, i, j, k, v):
        return _voxec.abstract_voxel_storage_set(self, i, j, k, v)

    def get(self, *args):
        return _voxec.abstract_voxel_storage_get(self, *args)

    def world_bounds(self):
        return _voxec.abstract_voxel_storage_world_bounds(self)
abstract_voxel_storage_swigregister = _voxec.abstract_voxel_storage_swigregister
abstract_voxel_storage_swigregister(abstract_voxel_storage)

class set_voxel_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_voxel_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_voxel_iterator, name)
    __repr__ = _swig_repr

    def __init__(self, storage, current):
        this = _voxec.new_set_voxel_iterator(storage, current)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def neighbour(self, d):
        return _voxec.set_voxel_iterator_neighbour(self, d)

    def value(self, arg2):
        return _voxec.set_voxel_iterator_value(self, arg2)

    def neighbour_value(self, d, arg3):
        return _voxec.set_voxel_iterator_neighbour_value(self, d, arg3)

    def __eq__(self, other):
        return _voxec.set_voxel_iterator___eq__(self, other)

    def __ne__(self, other):
        return _voxec.set_voxel_iterator___ne__(self, other)

    def __ref__(self):
        return _voxec.set_voxel_iterator___ref__(self)
    __swig_destroy__ = _voxec.delete_set_voxel_iterator
    __del__ = lambda self: None
set_voxel_iterator_swigregister = _voxec.set_voxel_iterator_swigregister
set_voxel_iterator_swigregister(set_voxel_iterator)

class obj_export_helper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, obj_export_helper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, obj_export_helper, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _voxec.obj_export_helper_stream_set
    __swig_getmethods__["stream"] = _voxec.obj_export_helper_stream_get
    if _newclass:
        stream = _swig_property(_voxec.obj_export_helper_stream_get, _voxec.obj_export_helper_stream_set)
    __swig_setmethods__["vert_counter"] = _voxec.obj_export_helper_vert_counter_set
    __swig_getmethods__["vert_counter"] = _voxec.obj_export_helper_vert_counter_get
    if _newclass:
        vert_counter = _swig_property(_voxec.obj_export_helper_vert_counter_get, _voxec.obj_export_helper_vert_counter_set)
    __swig_setmethods__["normals_emitted"] = _voxec.obj_export_helper_normals_emitted_set
    __swig_getmethods__["normals_emitted"] = _voxec.obj_export_helper_normals_emitted_get
    if _newclass:
        normals_emitted = _swig_property(_voxec.obj_export_helper_normals_emitted_get, _voxec.obj_export_helper_normals_emitted_set)

    def __init__(self, fs, n=1):
        this = _voxec.new_obj_export_helper(fs, n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _voxec.delete_obj_export_helper
    __del__ = lambda self: None
obj_export_helper_swigregister = _voxec.obj_export_helper_swigregister
obj_export_helper_swigregister(obj_export_helper)

class regular_voxel_storage(abstract_voxel_storage):
    __swig_setmethods__ = {}
    for _s in [abstract_voxel_storage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, regular_voxel_storage, name, value)
    __swig_getmethods__ = {}
    for _s in [abstract_voxel_storage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, regular_voxel_storage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def begin(self):
        return _voxec.regular_voxel_storage_begin(self)

    def end(self):
        return _voxec.regular_voxel_storage_end(self)

    def GetVoxelX(self, x, i):
        return _voxec.regular_voxel_storage_GetVoxelX(self, x, i)

    def GetVoxelY(self, y, j):
        return _voxec.regular_voxel_storage_GetVoxelY(self, y, j)

    def GetVoxelZ(self, z, k):
        return _voxec.regular_voxel_storage_GetVoxelZ(self, z, k)

    def GetCenter(self, i, j, k, x, y, z):
        return _voxec.regular_voxel_storage_GetCenter(self, i, j, k, x, y, z)

    def GetNbX(self):
        return _voxec.regular_voxel_storage_GetNbX(self)

    def GetNbY(self):
        return _voxec.regular_voxel_storage_GetNbY(self)

    def GetNbZ(self):
        return _voxec.regular_voxel_storage_GetNbZ(self)

    def voxel_size(self):
        return _voxec.regular_voxel_storage_voxel_size(self)

    def origin(self):
        return _voxec.regular_voxel_storage_origin(self)

    def obj_export(self, *args):
        return _voxec.regular_voxel_storage_obj_export(self, *args)
    __swig_destroy__ = _voxec.delete_regular_voxel_storage
    __del__ = lambda self: None
regular_voxel_storage_swigregister = _voxec.regular_voxel_storage_swigregister
regular_voxel_storage_swigregister(regular_voxel_storage)

class abstract_chunked_voxel_storage(regular_voxel_storage):
    __swig_setmethods__ = {}
    for _s in [regular_voxel_storage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, abstract_chunked_voxel_storage, name, value)
    __swig_getmethods__ = {}
    for _s in [regular_voxel_storage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, abstract_chunked_voxel_storage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def chunk_size(self):
        return _voxec.abstract_chunked_voxel_storage_chunk_size(self)

    def num_chunks(self):
        return _voxec.abstract_chunked_voxel_storage_num_chunks(self)

    def grid_offset(self):
        return _voxec.abstract_chunked_voxel_storage_grid_offset(self)

    def lock_bounds(self):
        return _voxec.abstract_chunked_voxel_storage_lock_bounds(self)

    def unlock_bounds(self):
        return _voxec.abstract_chunked_voxel_storage_unlock_bounds(self)

    def get_chunk(self, pos):
        return _voxec.abstract_chunked_voxel_storage_get_chunk(self, pos)

    def get_or_create_chunk(self, pos):
        return _voxec.abstract_chunked_voxel_storage_get_or_create_chunk(self, pos)

    def set_chunk(self, pos, arg3):
        return _voxec.abstract_chunked_voxel_storage_set_chunk(self, pos, arg3)

    def Set(self, *args):
        return _voxec.abstract_chunked_voxel_storage_Set(self, *args)

    def boolean_union(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_union(self, other_)

    def boolean_subtraction(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_subtraction(self, other_)

    def boolean_intersection(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_intersection(self, other_)

    def boolean_union_inplace(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_union_inplace(self, other_)

    def boolean_subtraction_inplace(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_subtraction_inplace(self, other_)

    def boolean_intersection_inplace(self, other_):
        return _voxec.abstract_chunked_voxel_storage_boolean_intersection_inplace(self, other_)

    def create_constant(self, c, value):
        return _voxec.abstract_chunked_voxel_storage_create_constant(self, c, value)

    def create_plane_primitive(self, c, axis, offset):
        return _voxec.abstract_chunked_voxel_storage_create_plane_primitive(self, c, axis, offset)

    def bounds(self):
        return _voxec.abstract_chunked_voxel_storage_bounds(self)

    def write(self, p, os):
        return _voxec.abstract_chunked_voxel_storage_write(self, p, os)
    __swig_destroy__ = _voxec.delete_abstract_chunked_voxel_storage
    __del__ = lambda self: None
abstract_chunked_voxel_storage_swigregister = _voxec.abstract_chunked_voxel_storage_swigregister
abstract_chunked_voxel_storage_swigregister(abstract_chunked_voxel_storage)

class memory_mapped_chunked_voxel_storage(abstract_chunked_voxel_storage):
    __swig_setmethods__ = {}
    for _s in [abstract_chunked_voxel_storage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, memory_mapped_chunked_voxel_storage, name, value)
    __swig_getmethods__ = {}
    for _s in [abstract_chunked_voxel_storage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, memory_mapped_chunked_voxel_storage, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def header_size(self):
        return _voxec.memory_mapped_chunked_voxel_storage_header_size(self)

    def count(self):
        return _voxec.memory_mapped_chunked_voxel_storage_count(self)

    def get_chunk(self, xyz):
        return _voxec.memory_mapped_chunked_voxel_storage_get_chunk(self, xyz)

    def Get(self, *args):
        return _voxec.memory_mapped_chunked_voxel_storage_Get(self, *args)

    def empty_copy(self):
        return _voxec.memory_mapped_chunked_voxel_storage_empty_copy(self)

    def empty_copy_as(self, fmt):
        return _voxec.memory_mapped_chunked_voxel_storage_empty_copy_as(self, fmt)

    def copy(self, location=None):
        return _voxec.memory_mapped_chunked_voxel_storage_copy(self, location)

    def copy_as(self, fmt, location=None):
        return _voxec.memory_mapped_chunked_voxel_storage_copy_as(self, fmt, location)

    def get_or_create_chunk(self, ijk):
        return _voxec.memory_mapped_chunked_voxel_storage_get_or_create_chunk(self, ijk)

    def set_chunk(self, ijk, s):
        return _voxec.memory_mapped_chunked_voxel_storage_set_chunk(self, ijk, s)
    __swig_destroy__ = _voxec.delete_memory_mapped_chunked_voxel_storage
    __del__ = lambda self: None
memory_mapped_chunked_voxel_storage_swigregister = _voxec.memory_mapped_chunked_voxel_storage_swigregister
memory_mapped_chunked_voxel_storage_swigregister(memory_mapped_chunked_voxel_storage)

class voxel_region(regular_voxel_storage):
    __swig_setmethods__ = {}
    for _s in [regular_voxel_storage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, voxel_region, name, value)
    __swig_getmethods__ = {}
    for _s in [regular_voxel_storage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, voxel_region, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def base(self):
        return _voxec.voxel_region_base(self)

    def bounds(self):
        return _voxec.voxel_region_bounds(self)

    def original_bounds(self):
        return _voxec.voxel_region_original_bounds(self)
    if _newclass:
        make = staticmethod(_voxec.voxel_region_make)
    else:
        make = _voxec.voxel_region_make

    def write(self, arg2, arg3):
        return _voxec.voxel_region_write(self, arg2, arg3)

    def Get(self, *args):
        return _voxec.voxel_region_Get(self, *args)

    def inverted(self, location=None):
        return _voxec.voxel_region_inverted(self, location)

    def Set(self, *args):
        return _voxec.voxel_region_Set(self, *args)

    def boolean_union(self, other):
        return _voxec.voxel_region_boolean_union(self, other)

    def boolean_subtraction(self, other):
        return _voxec.voxel_region_boolean_subtraction(self, other)

    def boolean_intersection(self, other):
        return _voxec.voxel_region_boolean_intersection(self, other)

    def boolean_union_inplace(self, other_):
        return _voxec.voxel_region_boolean_union_inplace(self, other_)

    def boolean_subtraction_inplace(self, other_):
        return _voxec.voxel_region_boolean_subtraction_inplace(self, other_)

    def boolean_intersection_inplace(self, other_):
        return _voxec.voxel_region_boolean_intersection_inplace(self, other_)

    def make_explicit(self, location=None):
        return _voxec.voxel_region_make_explicit(self, location)

    def empty_copy(self):
        return _voxec.voxel_region_empty_copy(self)

    def copy(self, location=None):
        return _voxec.voxel_region_copy(self, location)

    def empty_copy_as(self, fmt):
        return _voxec.voxel_region_empty_copy_as(self, fmt)

    def copy_as(self, fmt, location=None):
        return _voxec.voxel_region_copy_as(self, fmt, location)

    def count(self):
        return _voxec.voxel_region_count(self)
    __swig_destroy__ = _voxec.delete_voxel_region
    __del__ = lambda self: None
voxel_region_swigregister = _voxec.voxel_region_swigregister
voxel_region_swigregister(voxel_region)

def voxel_region_make(base_, i, N):
    return _voxec.voxel_region_make(base_, i, N)
voxel_region_make = _voxec.voxel_region_make


def storage_for(bounds, max_extents=1024, padding=0, chunk_size=64):
    return _voxec.storage_for(bounds, max_extents, padding, chunk_size)
storage_for = _voxec.storage_for
class context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scope"] = _voxec.context_scope_set
    __swig_getmethods__["scope"] = _voxec.context_scope_get
    if _newclass:
        scope = _swig_property(_voxec.context_scope_get, _voxec.context_scope_set)

    def __init__(self):
        this = _voxec.new_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args):
        return _voxec.context_set(self, *args)
    __swig_destroy__ = _voxec.delete_context
    __del__ = lambda self: None
context_swigregister = _voxec.context_swigregister
context_swigregister(context)


def run_(name, args, kwargs, ctx=None, silent=False):
    return _voxec.run_(name, args, kwargs, ctx, silent)
run_ = _voxec.run_
# This file is compatible with both classic and new-style classes.


