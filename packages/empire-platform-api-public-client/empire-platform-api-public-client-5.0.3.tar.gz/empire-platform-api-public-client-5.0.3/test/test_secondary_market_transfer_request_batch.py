# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 5.0.3
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from empire_platform_api_public_client.models.secondary_market_transfer_request_batch import SecondaryMarketTransferRequestBatch  # noqa: E501

class TestSecondaryMarketTransferRequestBatch(unittest.TestCase):
    """SecondaryMarketTransferRequestBatch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecondaryMarketTransferRequestBatch:
        """Test SecondaryMarketTransferRequestBatch
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecondaryMarketTransferRequestBatch`
        """
        model = SecondaryMarketTransferRequestBatch()  # noqa: E501
        if include_optional:
            return SecondaryMarketTransferRequestBatch(
                entries = [
                    empire_platform_api_public_client.models.secondary_market_transfer_request.SecondaryMarketTransferRequest(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        timescale = 'LONG_TERM', 
                        delivery_period = empire_platform_api_public_client.models.date_period.DatePeriod(
                            start = 'Tue Jan 04 00:00:00 UTC 2022', 
                            end = 'Tue Jan 04 00:00:00 UTC 2022', ), 
                        direction = 'GB_NL', 
                        transferred_capacity = 56, 
                        requested_at = '2022-01-04T00:00Z', 
                        updated_at = '2022-01-04T00:00Z', 
                        completed_at = '2022-01-04T00:00Z', 
                        expires_at = '2022-01-04T00:00Z', 
                        sender = empire_platform_api_public_client.models.other_party.OtherParty(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', ), 
                        receiver = empire_platform_api_public_client.models.other_party.OtherParty(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', ), 
                        status = 'PENDING', )
                    ],
                total_count = 0
            )
        else:
            return SecondaryMarketTransferRequestBatch(
                entries = [
                    empire_platform_api_public_client.models.secondary_market_transfer_request.SecondaryMarketTransferRequest(
                        id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                        timescale = 'LONG_TERM', 
                        delivery_period = empire_platform_api_public_client.models.date_period.DatePeriod(
                            start = 'Tue Jan 04 00:00:00 UTC 2022', 
                            end = 'Tue Jan 04 00:00:00 UTC 2022', ), 
                        direction = 'GB_NL', 
                        transferred_capacity = 56, 
                        requested_at = '2022-01-04T00:00Z', 
                        updated_at = '2022-01-04T00:00Z', 
                        completed_at = '2022-01-04T00:00Z', 
                        expires_at = '2022-01-04T00:00Z', 
                        sender = empire_platform_api_public_client.models.other_party.OtherParty(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', ), 
                        receiver = empire_platform_api_public_client.models.other_party.OtherParty(
                            id = '8d3787bb-b9ce-4d75-9a75-074ddd5d1e09', 
                            name = '', ), 
                        status = 'PENDING', )
                    ],
                total_count = 0,
        )
        """

    def testSecondaryMarketTransferRequestBatch(self):
        """Test SecondaryMarketTransferRequestBatch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
