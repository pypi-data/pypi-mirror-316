# NOTE: This is an automatically generated file, any modifications will be discarded
[tool.poetry]
name = "RecordFlux"
version = "0.26.0"
description = "A toolset for the formal specification and generation of verifiable binary parsers, message generators and protocol state machines."
license = "Apache-2.0"
authors = [
    "Tobias Reiher <reiher@adacore.com>"
]
readme = ["README.md"]
homepage = "https://www.adacore.com/recordflux"
repository = "https://github.com/AdaCore/RecordFlux"
documentation = "https://www.adacore.com/documentation#SPARK"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Ada",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Communications",
    "Topic :: Security",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Code Generators",
    "Topic :: System :: Networking",
]
packages = [
    { include  = "rflx" },
]
include = [
    { path = "Cargo.lock", format = "sdist" },
    { path = "Cargo.toml", format = "sdist" },
    { path = "generated/adasat/*.gpr", format = "sdist" },
    { path = "generated/adasat/src/*.ad?", format = "sdist" },
    { path = "generated/gnatcoll-bindings/gmp/*.ad?", format = "sdist" },
    { path = "generated/gnatcoll-bindings/gmp/*.c", format = "sdist" },
    { path = "generated/gnatcoll-bindings/gmp/*.gpr", format = "sdist" },
    { path = "generated/gnatcoll-bindings/iconv/*.ad?", format = "sdist" },
    { path = "generated/gnatcoll-bindings/iconv/*.c", format = "sdist" },
    { path = "generated/gnatcoll-bindings/iconv/*.gpr", format = "sdist" },
    { path = "generated/langkit/langkit/support/*.ad?", format = "sdist" },
    { path = "generated/langkit/langkit/support/*.gpr", format = "sdist" },
    { path = "generated/librflxlang.gpr", format = "sdist" },
    { path = "generated/src/*", format = "sdist" },
    { path = "librapidflux/Cargo.toml", format = "sdist" },
    { path = "librapidflux/src/*.rs", format = "sdist" },
    { path = "librapidflux/src/diagnostics/*.rs", format = "sdist" },
    { path = "rapidflux/Cargo.toml", format = "sdist" },
    { path = "rapidflux/src/*.rs", format = "sdist" },
    { path = "rapidflux/src/diagnostics/*.rs", format = "sdist" },
    { path = "rflx/ide/vim/recordflux.vim" },
    { path = "rflx/ide/vscode/recordflux.vsix" },
    { path = "rflx/lang/__init__.py" },
    { path = "rflx/lang/py.typed" },
    { path = "rflx/rapidflux*.so", format = "wheel" },
]
exclude = [
    "rflx/ide/vscode/*",
    "rflx/lang/librflxlang.so",
]

[tool.poetry.build]
script = "build.py"
generate-setup-file = true

[tool.poetry.dependencies]
python = ">=3.9, <4"
attrs = ">=22.1, <24"
defusedxml = ">=0.7, <0.8"
lark = ">=1.1.8, <2"
pydantic = ">=2, <3"
pydotplus = ">=2, <3"
pygls = ">=1.1, <2"
"ruamel.yaml" = ">=0.18, <0.19"
setuptools = ">=41"  # required by z3-solver <4.12.3
z3-solver = ">=4, <4.12.3"

[tool.poetry.group.build.dependencies]
langkit = {path = "contrib/langkit"}

[tool.poetry.group.pytest.dependencies]
pytest = ">=8, <9"

[tool.poetry.group.dev.dependencies]
recordflux-devutils = {path = "devutils", extras = ["devel"]}
cobrafuzz = ">=2.2, <2.3"
cryptography = ">=43.0.1"
furo = ">=2022.4.7"
hypothesis = ">=6.14, <6.24"
pip-audit = ">=2.7.3, <3"
pynacl = ">=1.5.0, <2"
pytest-asyncio = ">=0.23.5"
pytest-timeout = ">=2, <3"
scapy = ">=2, <3"
sphinx = ">=4.5, <5"
sphinx-rtd-theme = ">=1.1.1, <1.2"
sphinxcontrib-applehelp = "==1.0.4"  # required by sphinx 4
sphinxcontrib-devhelp = "==1.0.2"  # required by sphinx 4
sphinxcontrib-htmlhelp = "==2.0.1"  # required by sphinx 4
sphinxcontrib-qthelp = "==1.0.3"  # required by sphinx 4
sphinxcontrib-serializinghtml = "==1.1.5"  # required by sphinx 4
types-Pygments = ">=2.15, <3"
types-defusedxml = ">=0.7, <0.8"

[tool.poetry.scripts]
rflx = "rflx.cli:run"

[tool.poetry-dynamic-versioning]
enable = false
bump = true

[build-system]
requires = ["poetry-core>=1", "poetry-dynamic-versioning>=1,<2", "setuptools", "wheel"]


[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | node_modules
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "F",     # pyflakes
    "E",     # pycodestyle
    "W",     # pycodestyle
    "I",     # isort
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todos
    "FIX",   # flake8-fixme
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # Perflint
    "RUF"    # ruff
]
ignore = [
    "D100",    # public-module
    "D101",    # public-class
    "D102",    # public-method
    "D103",    # public-function
    "D104",    # public-package
    "D105",    # magic-method
    "D106",    # public-nested-class
    "D107",    # public-init
    "D202",    # no-blank-line-after-function
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "E741",    # ambiguous-variable-name
    "S101",    # assert
    "S105",    # hardcoded-password-string
    "S603",    # subprocess-without-shell-equals-true
    "S607",    # start-process-with-partial-path
    "FBT001",  # boolean-positional-arg-in-function-definition
    "FBT002",  # boolean-default-value-in-function-definition
    "B011",    # assert-false
    "PT015",   # pytest-assert-always-false
    "RET503",  # implicit-return
    "TD003",   # missing-todo-link
    "FIX002",  # line-contains-todo
    "PLC0414", # useless-import-alias
    "PLC1901", # compare-to-empty-string
    "PLR2004", # magic-value-comparison
    "PLR5501", # collapsible-else-if
    "TRY003",  # raise-vanilla-args
    "RUF001",  # ambiguous-unicode-character-string
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-third-party = [
    'gi',
    'icontract',
    'pydantic',
    'pydotplus',
    'pytest',
    'z3',
]

[tool.ruff.lint.pylint]
max-args = 6
max-branches = 12
max-returns = 10
max-statements = 50

[tool.mypy]
mypy_path = 'stubs'
check_untyped_defs = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
python_version = 3.9

[[tool.mypy.overrides]]
module = [
    'astroid',
    'langkit.*',
    'pylint.*',
    'pythonfuzz.*',
    'ruamel',
    'setuptools.*',
    'setuptools_scm.*',
    'wheel.*',
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = '--tb=short'
asyncio_default_fixture_loop_scope = 'function'
filterwarnings = [
    'ignore:visit_NameConstant is deprecated; add visit_Constant:PendingDeprecationWarning',
    'ignore:visit_Str is deprecated; add visit_Constant:PendingDeprecationWarning',
]

[tool.coverage.run]
branch = true
concurrency = ['multiprocessing', 'thread']
parallel = true
sigterm = true

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    'pragma: no cover',
    'assert False',
    'assert_never',
    'def __repr__',
    'def __str__',
    'if TYPE_CHECKING:',
    'raise NotImplementedError',
    'return NotImplemented',
]
