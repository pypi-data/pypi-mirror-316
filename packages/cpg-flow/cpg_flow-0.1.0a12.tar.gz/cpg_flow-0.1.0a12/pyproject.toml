[build-system]
requires = ["setuptools>=42", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "cpg-flow"
description = "CPG Flow API for Hail Batch"
requires-python = ">=3.10,<3.11"
readme = "README.md"
license = { "file" = "LICENSE" }
dynamic = ["version"]
dependencies = [
    "cpg-utils>=5.0.11",
    # Pin Hail at CPG"s installed version
    "hail==0.2.133",
    "grpcio>=1.53.0",
    # Avoid dependency resolution backtracking, Python 3.10 compatibility
    "grpcio-status>=1.48,<1.50",
    "metamist>=6.9.0",
    "networkx>=3.4.2",
    "coloredlogs>=15.0.1",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",

    # Indicate who your project is intended for
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Bio-Informatics",

    # Pick your license as you wish
    "License :: OSI Approved :: MIT License",


    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX",
    "Operating System :: Unix",

    # Specify the Python versions you support here.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
]
keywords = ["hail", "flow", "api", "bioinformatics", "genomics"]

[project.urls]
Repository = "https://github.com/populationgenomics/cpg-flow"

[tool.ruff]
line-length = 120

extend-exclude = ["venv", ".mypy_cache", ".tox", ".venv", "build", "dist"]

# ignore pydocstyle, flake8-boolean-trap (FBT)
# select = ["A", "B", "C",  "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]
# fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]
# ignore pydocstyle, flake8-boolean-trap (FBT)
select = [
    "A",
    "B",
    "C",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "ERA",
    "EXE",
    "ICN",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "UP",
    "YTT",
]

fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "UP",
    "YTT",
]

ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "ANN201",  # Missing return type annotation for public function
    "ANN204",  # Missing type annotation for special method `__init__`
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
    "E501",    # Line length too long
    "E731",    # Do not assign a lambda expression, use a def
    "E741",    # Ambiguous variable name
    "G004",    # Logging statement uses f-string
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements
    "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    "PT018",   # Assertion should be broken down into multiple parts
    "Q000",    # Single quotes found but double quotes preferred
    "S101",    # Use of assert detected
    "SLF001",  # Private member accessed: `_preemptible`

    "ARG001", # Unused function argument
    "ARG002", # Unused method argument

    "PLR2004", # Magic value used

    "ANN001",
    "ANN202",
    "C408",
    "TID252",
    "RET504",
    "ERA001",
    "UP032",
    "RUF100",
    "ISC001",
    "PIE804",
    "F401",
    "C901",
    "W605",
    "RET505",
    "ANN003",
    "RUF013",
    "UP031",
    "RUF010",
    "B006",
    "ANN002",
    "B023",
    "EXE001",
    "G001",
    "SIM108",
    "RUF005",
    "G002",
    "PD901",
    "N999",
    "SIM118",
    "SIM102",
    "PLW2901",
    "S603",
    "ARG005",
    "PGH003",
    "B904",
    "N802",
    "ISC003",
    "ANN205",
    "S607",
    "RUF015",
    "E701",
    "N818",
    "PIE790",
    "N803",
    "A002",
    "RUF012",
    "W291",
    "S113",
    "S311",
    "N806",
    "PLR5501",
    "F403",
    "SIM115",
    "B007",
    "F841",
    "C405",
    "C419",
    "SIM300",
    "PD011",
    "UP015",
    "S602",
    "Q002",
    "ISC002",
    "COM819",
    "C416",
    "DTZ005",
    "G003",
    "S608",
    "PIE808",
    "B008",
    "S108",
    "E402",
    "S605",
    "F821",
    "RET507",
    "RET503",
    "UP030",
    "UP026",
    "PLR1714",
    "C403",
    "PLR1711",
    "PIE810",
    "DTZ011",
    "S105",
    "BLE001",
    "C401",
    "C400",
    "PLR0402",
    "SIM201",
    "RET506",
    "C417",
    "PD010",
    "PLW1510",
    "A001",
    "W292",
    "PYI024",
    "Q003",
    "S301",
    "RET501",
    "PD003",
    "SIM117",
    "RUF002",
    "UP027",
    "SIM105",
    "E713",
    "S324",
    "S310",
    "Q001",
    "UP020",
    "S506",
    "N805",
    "E712",
    "E401",
    "SIM212",
    "DTZ002",
    "UP007",
]

[tool.ruff.lint.isort]

section-order = [
    "future",
    "standard-library",
    "third-party",
    "hail",
    "cpg",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.isort.sections]
hail = ["hail", "hailtop"]

cpg = [
    "analysis_runner",
    "cpg_infra",
    "cpg_utils",
    "cpg_flow",
    "gnomad",
    "hail_scripts",
    "metamist",
]

[tool.coverage.run]
omit = ["test/*", "setup.py"]

[tool.semantic_release]
version_variables = ["src/__init__.py:__version__", ".github/workflows/docker.yaml:VERSION"]
assets = []
build_command_env = []
commit_message = "bump: {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
repo_dir = "."
no_git_verify = false
tag_format = "v{version}"
build_command = "make ci-build"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.prerelease]
match = "alpha"
prerelease_token = "alpha"
prerelease = true

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test", "chore"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
token = {env = "GITHUB_TOKEN"}
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_pypi = false
upload_to_test_pypi = true
upload_to_vcs_release = false

[tool.uv]
dev-dependencies = [
    "black>=24.10.0",
    "build>=1.2.2.post1",
    "bump2version>=1.0.1",
    "commitizen>=3.30.0",
    "coverage>=7.6.4",
    "cpg-flow",
    "hail>=0.2.133",
    "pip-audit>=2.7.3",
    "pre-commit>=4.0.1",
    "pylint>=3.3.1",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "python-semantic-release>=9.4.1",
    "toml>=0.10.2",
    "twine>=5.1.1",
]

[tool.uv.sources]
cpg-flow = { workspace = true }

[tool.setuptools_scm]
version_scheme = "only-version"
local_scheme = "node-and-date"
