[build-system]
requires = [
    "setuptools>=64",
    "setuptools_scm[toml]>=8",
    "wheel"
]
build-backend = "setuptools.build_meta"

[options]
packages = { find = { where = "src", exclude = ["tests"] } }
include_package_data = true
package_dir = { "" = "src" }
zip_safe = false

[tool.aliases]
build = "bdist_wheel"
release = "build upload"

[tool.bdist_wheel]
universal = 0

[tool.devpi.upload]
no-vcs = 1
formats = ["sdist", "bdist_wheel"]

[project]
name = "kiara_plugin.jupyter"
description = "Jupyter integration for kiara"
authors = [
    {name = "Markus Binsteiner", email = "markus@frkl.io"}
]
readme = "README.md"
requires-python = ">=3.9"
keywords = ["kiara"]
license = {text = "MPL-2.0"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.11"
]
dependencies = [
    "pip>=23.0.0",
    "importlib-metadata>=3.0.0.0,<8.0.0",
    "ipywidgets>=8.0.0",
    "ipydagred3>=0.3.7",
    "jupytext>=1.14.0",
    "black>=21.0.0",
    "rich>=0.13.0.0",
]
dynamic = ["version"]

[project.optional-dependencies]
jupyter = [
    "jupyterlab"
]
kiara = [
    "kiara_plugin.tabular>=0.5.4",
    "kiara_plugin.onboarding>=0.5.0",
]
dev_documentation = [
    "kiara[dev_documentation]"
]
dev_testing = [
    "kiara[dev_testing]",
    "kiara_plugin.core_types>=0.5.1",
    "nbconvert>=7.16.0"
]
dev_utils = [
    "kiara[dev_utils]",
]

[project.entry-points."kiara.plugin"]
jupyter = "kiara_plugin.jupyter"

[project.entry-points."kiara.data_types"]
jupyter = "kiara_plugin.jupyter.entrypoints:find_data_types"

[project.entry-points."kiara.model_classes"]
jupyter = "kiara_plugin.jupyter.entrypoints:find_model_classes"

[project.entry-points."kiara.modules"]
jupyter = "kiara_plugin.jupyter.entrypoints:find_modules"

[project.entry-points."kiara.pipelines"]
jupyter = "kiara_plugin.jupyter.entrypoints:find_pipelines"

[project.entry-points."kiara.renderers"]
jupyter = "kiara_plugin.jupyter.entrypoints:find_renderer_classes"


[project.urls]
homepage = "https://github.com/DHARPA-Project/kiara_plugin.jupyter"
documentation = "https://DHARPA-Project.github.io/kiara_plugin.jupyter"
repository = "https://github.com/DHARPA-Project/kiara_plugin.jupyter"

[tool.black]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | external
)/
'''

[tool.setuptools_scm]
write_to = "src/kiara_plugin/jupyter/version.txt"

[tool.pytest.ini_options]
pythonpath = [
    "src"
]
addopts = "--verbose"
norecursedirs = [
    "dist",
    "build",
    ".tox"
]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["kiara_plugin.jupyter"]
relative_files = true

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
]

[tool.ruff]
line-length = 88

src = ["src", "tests"]

fix = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
    ".venv"
]

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["E", "F", "RUF100", "I001", "Q", "D"]

select = [
    "E",
    "F",
    "RUF",
    "I001",
    "YTT",
    "S",
    "C4",
    "T10",
    "ISC",
    "ICN",
    "T20",
    "Q",
    "TID",
    "PD",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PIE",
]

ignore = ["E501", "S101", "SIM118", "SIM108", "PLR2004", "PLR0913", "S110", "PIE810", "PLR0911", "PLR0915", "PLR0912", "D", "D401", "PLW0603", "PLR5501", "PLW2901", "S603", "S608", "ISC001", "PLC0206", "RUF022"]
per-file-ignores = { }

[tool.ruff.lint.isort]
known-first-party = ["kiara", "kiara_plugin"]


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
mypy_path = "src"
namespace_packages = false
plugins = [
    "pydantic.mypy"
]


# mypy per-module options:
[[tool.mypy.overrides]]
module = [
    "ipydagred3.*",
    "jupytext.*",
    "appdirs.*",
    "pyarrow.*",
    "ruamel.*"
]
ignore_missing_imports = true

[tool.pixi.project]
channels = ["dharpa", "conda-forge"]
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
pip = ">=24.0,<25"

[tool.pixi.pypi-dependencies]
kiara_plugin-jupyter = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
jupyter = { features = ["jupyter"], solve-group = "default" }
#dev = { features = ["dev_utils"], solve-group = "default" }

[tool.pixi.tasks]
pre-commit-check = "pre-commit run --all-files"
tests = "py.test"
mypy = "mypy  --namespace-packages --explicit-package-base src/kiara_plugin/jupyter"
kiara = "kiara"
show-versions = "kiara --version"
delete-context = "kiara context delete"
install-dev-dependencies = "pip install --upgrade -e '.[dev_utils]'"
