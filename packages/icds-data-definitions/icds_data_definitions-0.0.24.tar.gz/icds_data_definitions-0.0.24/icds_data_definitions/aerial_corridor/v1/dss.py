# generated by datamodel-codegen:
#   filename:  dss_api.yml
#   timestamp: 2024-12-12T20:21:16+00:00
#   source: https://github.com/nasa/uam-apis/blob/x4/openapi/psu/dss_api.yml

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, PositiveFloat, confloat, conint, constr


class UUIDv4Format(BaseModel):
    root: UUID = Field(
        ...,
        description="String whose format matches a version-4 UUID according to RFC 4122.",
        example="03e5572a-f733-49af-bc14-8a18bd53ee39",
    )


class EntityID(BaseModel):
    root: UUIDv4Format = Field(
        ...,
        description="Identifier for an Entity communicated through the DSS.  Formatted as\na UUIDv4.",
        example="2f8343be-6482-4d1b-a474-16847e01af1e",
    )


class EntityOVN(BaseModel):
    root: constr(min_length=16, max_length=128) = Field(
        ...,
        description="A token associated with a particular UTM Entity+version created\nby the DSS upon creation or modification of an Entity reference and provided\nto the client creating or modifying the Entity reference.  The EntityOVN\nis stored privately by the DSS and then compared against entries in a Key\nprovided to mutate the airspace.  The EntityOVN is also provided by\nthe client whenever that client transmits the full information of the Entity\n(either via GET, or via a subscription notification).",
        example="9d158f59-80b7-4c11-9c0c-8a2b4d936b2d",
        title="EntityOVN",
    )


class SubscriptionID(BaseModel):
    root: UUIDv4Format = Field(
        ...,
        description="Identifier for a subscription communicated through the DSS.  Formatted\nas a UUIDv4.",
        example="78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f",
    )


class Key(BaseModel):
    root: List[EntityOVN] = Field(
        ...,
        description="Proof that a client has obtained the latest airspace content, used to ensure that write\noperations to the DSS occur only when the latest content is known (i.e. has been read). The\nclient is required to pass a current Key constructed from information obtained with\nprevious read operations and subsequent requests for full information, and optionally,\nsubscription updates for deconflicted write operations to the DSS.  The contents of this\ndata structure are generated by the client.\n",
    )


class Format(Enum):
    RFC3339 = "RFC3339"


class Time(BaseModel):
    value: datetime = Field(
        ...,
        description="RFC3339-formatted time/date string.  The time zone must be 'Z'.",
        example="1985-04-12T23:20:50.52Z",
    )
    format: Format


class Units(Enum):
    M = "M"


class Radius(BaseModel):
    value: PositiveFloat = Field(
        ...,
        description="Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.",
        example=300.183,
    )
    units: Units = Field(
        ...,
        description='FIXM-compatible units.  Only meters ("M") are acceptable for UTM.',
    )


class Reference(Enum):
    W84 = "W84"


class Altitude(BaseModel):
    value: confloat(ge=-8000.0, le=100000.0) = Field(
        ...,
        description="The numeric value of the altitude. Note that min and max values are\nadded as a sanity check. As use cases evolve and more options are\nmade available in terms of units of measure or reference systems,\nthese bounds may be re-evaluated.",
    )
    reference: Reference = Field(
        ...,
        description="A code indicating the reference for a vertical distance. See AIXM 5.1\nand FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate\nplans to allow other options. FIXM and AIXM allow for 'SFC' which is\nequivalent to AGL.",
    )
    units: Units = Field(
        ...,
        description="The reference quantities used to express the value of altitude. See\nFIXM 4.2. Currently, UTM only allows meters with no immediate plans\nto allow other options.",
    )


class Latitude(BaseModel):
    root: confloat(ge=-90.0, le=90.0) = Field(
        ...,
        description="Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.",
        example=34.123,
    )


class Longitude(BaseModel):
    root: confloat(ge=-180.0, le=180.0) = Field(
        ...,
        description="Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid.",
        example=-118.456,
    )


class LatLngPoint(BaseModel):
    lng: Longitude
    lat: Latitude


class Circle(BaseModel):
    center: Optional[LatLngPoint] = None
    radius: Optional[Radius] = None


class ErrorResponse(BaseModel):
    message: Optional[str] = Field(
        None,
        description="Human-readable message indicating what error occurred and/or why.",
        example="The error occurred because [...]",
    )


class SubscriptionNotificationIndex(BaseModel):
    root: conint(ge=0) = Field(
        ...,
        description="Tracks the notifications sent for a subscription so the subscriber can detect missed notifications more easily.",
    )


class UssBaseURL(BaseModel):
    root: str = Field(
        ...,
        description="The base URL of a USS implementation of part or all of the USS-USS API. Per the USS-USS API, the full URL\nof a particular resource can be constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base URL.\nAccordingly, this URL may not have a trailing '/' character.",
        example="https://uss.example.com/utm",
    )


class OperationalIntentState(Enum):
    Accepted = "Accepted"
    Activated = "Activated"
    Nonconforming = "Nonconforming"
    Contingent = "Contingent"


class OperationalIntentUssBaseURL(BaseModel):
    root: UssBaseURL = Field(
        ...,
        description="The base URL of a USS implementation that implements the parts of the USS-USS API necessary for\nproviding the details of this operational intent, and telemetry during non-conformance or contingency,\nif applicable.",
    )


class ConstraintUssBaseURL(BaseModel):
    root: UssBaseURL = Field(
        ...,
        description="The base URL of a USS implementation that implements the parts of the USS-USS API necessary for\nproviding the details of this constraint.",
    )


class UssAvailabilityState(Enum):
    Unknown = "Unknown"
    Normal = "Normal"
    Down = "Down"


class SetUssAvailabilityStatusParameters(BaseModel):
    old_version: str = Field(
        ...,
        description="Version of USS's availability to change, for consistent read-modify-write operations and consistent retry behavior.",
    )
    availability: UssAvailabilityState


class RecorderRole(Enum):
    Client = "Client"
    Server = "Server"


class ExchangeRecord(BaseModel):
    url: str = Field(..., description="Full URL of request.")
    method: str = Field(..., description='HTTP verb used by requester (e.g., "PUT," "GET," etc.).')
    headers: Optional[List[str]] = Field(
        [],
        description="Set of headers associated with request or response. Requires 'Authorization:' field (at a minimum)",
    )
    recorder_role: RecorderRole = Field(
        ...,
        description="A coded value that indicates the role of the logging USS: 'Client' (initiating a request to a remote USS) or 'Server' (handling a request from a remote USS)",
    )
    request_time: Time = Field(..., description="The time at which the request was sent/received.")
    request_body: Optional[str] = Field("", description="Base64-encoded body content sent/received as a request.")
    response_time: Optional[Time] = Field(None, description="The time at which the response was sent/received.")
    response_body: Optional[str] = Field(
        "",
        description="Base64-encoded body content sent/received in response to request.",
    )
    response_code: Optional[int] = Field(0, description="HTTP response code sent/received in response to request.")
    problem: Optional[str] = Field(
        None,
        description="Human-readable description of the problem with the exchange, if any.",
    )


class ErrorReport(BaseModel):
    report_id: Optional[constr(max_length=128)] = Field(
        None,
        description="ID assigned by the server receiving the report.  Not populated when submitting a report.",
    )
    exchange: ExchangeRecord = Field(
        ...,
        description="The request (by this USS) and response associated with the error.",
    )


class Polygon(BaseModel):
    vertices: List[LatLngPoint] = Field(..., min_items=3)


class Volume3D(BaseModel):
    outline_circle: Optional[Circle] = Field(None, description="A circular geographic shape on the surface of the earth.")
    outline_polygon: Optional[Polygon] = Field(None, description="A polygonal geographic shape on the surface of the earth.")
    altitude_lower: Optional[Altitude] = Field(
        None,
        description="Minimum bounding altitude of this volume. Must be less than altitude_upper, if specified.",
    )
    altitude_upper: Optional[Altitude] = Field(
        None,
        description="Maximum bounding altitude of this volume. Must be greater than altitude_lower, if specified.",
    )


class Volume4D(BaseModel):
    volume: Volume3D
    time_start: Optional[Time] = Field(None, description="Beginning time of this volume. Must be before time_end.")
    time_end: Optional[Time] = Field(None, description="End time of this volume. Must be after time_start.")


class SubscriptionState(BaseModel):
    subscription_id: SubscriptionID
    notification_index: SubscriptionNotificationIndex


class QuerySubscriptionParameters(BaseModel):
    area_of_interest: Optional[Volume4D] = None


class SubscriptionUssBaseURL(BaseModel):
    root: UssBaseURL = Field(
        ...,
        description="The base URL of a USS implementation of the parts of the USS-USS API necessary for\nreceiving the notifications requested by this subscription.",
    )


class OperationalIntentReference(BaseModel):
    id: EntityID
    manager: str = Field(
        ...,
        description="Created by the DSS based on creating client's ID (via access token).  Used internal\nto the DSS for restricting mutation and deletion operations to manager.  Used by USSs\nto reject operational intent update notifications originating from a USS that does not manage\nthe operational intent.",
        example="uss1",
    )
    uss_availability: UssAvailabilityState
    version: int = Field(
        ...,
        description="Numeric version of this operational intent which increments upon each change in the operational intent,\nregardless of whether any field of the operational intent reference changes.  A USS with the\ndetails of this operational intent when it was at a particular version does not need to retrieve\nthe details again until the version changes.",
        example=1,
    )
    state: OperationalIntentState
    ovn: Optional[EntityOVN] = Field(
        None,
        description="Opaque version number of this operational intent.  Populated only when the OperationalIntentReference\nis managed by the USS retrieving or providing it.  Not populated when the\nOperationalIntentReference is not managed by the USS retrieving or providing it (instead, the\nUSS must obtain the OVN from the details retrieved from the managing USS).",
    )
    time_start: Time = Field(..., description="Beginning time of operational intent.")
    time_end: Time = Field(..., description="End time of operational intent.")
    uss_base_url: OperationalIntentUssBaseURL
    subscription_id: SubscriptionID = Field(
        ...,
        description="The ID of the subscription that is ensuring the operational intent manager receives relevant\nairspace updates.",
    )


class ImplicitSubscriptionParameters(BaseModel):
    uss_base_url: SubscriptionUssBaseURL = Field(
        ...,
        description="The base URL of a USS implementation of the parts of the USS-USS API necessary for\nreceiving the notifications that the operational intent must be aware of.  This includes, at least,\nnotifications for relevant changes in operational intents.",
    )
    notify_for_constraints: Optional[bool] = Field(
        False,
        description="True if this operational intent's subscription should trigger notifications when constraints change.\nOtherwise, changes in constraints should not trigger notifications.  The scope\nutm.constraint_processing is required to set this flag true, and a USS performing the constraint\nprocessing role should set this flag true.",
    )


class GetOperationalIntentReferenceResponse(BaseModel):
    operational_intent_reference: OperationalIntentReference


class QueryOperationalIntentReferenceParameters(BaseModel):
    area_of_interest: Optional[Volume4D] = None


class QueryOperationalIntentReferenceResponse(BaseModel):
    operational_intent_references: List[OperationalIntentReference] = Field(..., description="OperationalIntentReferences in the area of interest.")


class ConstraintReference(BaseModel):
    id: EntityID
    manager: str = Field(
        ...,
        description="Created by the DSS based on creating client's ID (via access token).  Used internal\nto the DSS for restricting mutation and deletion operations to manager.  Used by USSs\nto reject constraint update notifications originating from a USS that does not manage\nthe constraint.",
        example="uss1",
    )
    uss_availability: UssAvailabilityState
    version: int = Field(
        ...,
        description="Numeric version of this constraint which increments upon each change in the constraint,\nregardless of whether any field of the constraint reference changes.  A USS with the\ndetails of this constraint when it was at a particular version does not need to retrieve\nthe details again until the version changes.",
        example=1,
    )
    ovn: Optional[EntityOVN] = Field(
        None,
        description="Opaque version number of this constraint.  Populated only when the ConstraintReference\nis managed by the USS retrieving or providing it.  Not populated when the\nConstraintReference is not managed by the USS retrieving or providing it (instead, the\nUSS must obtain the OVN from the details retrieved from the managing USS).",
    )
    time_start: Time
    time_end: Time
    uss_base_url: ConstraintUssBaseURL


class PutConstraintReferenceParameters(BaseModel):
    extents: List[Volume4D] = Field(
        ...,
        description="Spacetime extents that bound this constraint.\nThe end time may not be in the past.\nAll volumes of the constraint must be encompassed in these extents.\nHowever, these extents do not need to match the precise volumes of\nthe constraint; a single bounding extent may be provided instead,\nfor instance.",
        min_items=1,
    )
    uss_base_url: ConstraintUssBaseURL


class GetConstraintReferenceResponse(BaseModel):
    constraint_reference: ConstraintReference


class QueryConstraintReferenceParameters(BaseModel):
    area_of_interest: Optional[Volume4D] = None


class QueryConstraintReferencesResponse(BaseModel):
    constraint_references: List[ConstraintReference] = Field(..., description="ConstraintReferences in the area of interest.")


class AirspaceConflictResponse(BaseModel):
    message: Optional[str] = Field(
        None,
        description="Human-readable message indicating what error occurred and/or why.",
    )
    missing_operational_intents: Optional[List[OperationalIntentReference]] = Field(
        [],
        description="List of operational intent references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these operational intents to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.",
    )
    missing_constraints: Optional[List[ConstraintReference]] = Field(
        [],
        description="List of constraint references for which current proof of knowledge was not provided.  If this field is present and contains elements, the calling USS should query the details URLs for these constraints to obtain their details and correct OVNs.  The OVNs can be used to update the key, at which point the USS may retry this call.",
    )


class UssAvailabilityStatus(BaseModel):
    uss: str = Field(
        ...,
        description="Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.",
    )
    availability: UssAvailabilityState


class UssAvailabilityStatusResponse(BaseModel):
    version: str = Field(
        ...,
        description="Current version of USS's availability.  Used to change USS's availability.",
    )
    status: UssAvailabilityStatus


class SubscriberToNotify(BaseModel):
    subscriptions: List[SubscriptionState] = Field(..., description="Subscription(s) prompting this notification.", min_items=1)
    uss_base_url: SubscriptionUssBaseURL


class Subscription(BaseModel):
    id: SubscriptionID
    version: str = Field(
        ...,
        description="Version of the subscription that the DSS changes every time a USS changes the \nsubscription.  The DSS incrementing the notification_index does not constitute a\nchange that triggers a new version.  A USS must specify this version when modifying \nan existing subscription to ensure consistency in read-modify-write operations and \ndistributed systems.",
    )
    notification_index: SubscriptionNotificationIndex
    time_start: Optional[Time] = Field(
        None,
        description="If set, this subscription will not receive notifications involving airspace changes\nentirely before this time.",
    )
    time_end: Optional[Time] = Field(
        None,
        description="If set, this subscription will not receive notifications involving airspace changes\nentirely after this time.",
    )
    uss_base_url: SubscriptionUssBaseURL
    notify_for_operational_intents: Optional[bool] = Field(
        False,
        description="If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true.",
    )
    notify_for_constraints: Optional[bool] = Field(
        False,
        description="If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true.",
    )
    implicit_subscription: Optional[bool] = Field(
        False,
        description="True if this subscription was implicitly created by the DSS via the creation of an\noperational intent, and should therefore be deleted by the DSS when that operational intent is deleted.",
    )
    dependent_operational_intents: Optional[List[EntityID]] = Field(
        [],
        description="List of IDs for operational intents that are dependent on this subscription.",
    )


class QuerySubscriptionsResponse(BaseModel):
    subscriptions: List[Subscription] = Field(..., description="Subscriptions that overlap the specified geographic area.")


class GetSubscriptionResponse(BaseModel):
    subscription: Subscription


class PutSubscriptionParameters(BaseModel):
    extents: Volume4D = Field(
        ...,
        description="Spacetime extents of the volume to subscribe to.\nThis subscription will automatically be deleted after its end time if it has not been\nrefreshed by then. If end time is not specified, the value will be chosen automatically\nby the DSS. If start time is not specified, it will default to the time the request is\nprocessed. The end time may not be in the past.\nNote that some Entities triggering notifications may lie entirely outside the requested\narea.",
    )
    uss_base_url: SubscriptionUssBaseURL
    notify_for_operational_intents: Optional[bool] = Field(
        False,
        description="If true, trigger notifications when operational intents are created, updated, or deleted.  Otherwise, changes in operational intents should not trigger notifications.  The scope utm.strategic_coordination is required to set this flag true.",
    )
    notify_for_constraints: Optional[bool] = Field(
        False,
        description="If true, trigger notifications when constraints are created, updated, or deleted.  Otherwise, changes in constraints should not trigger notifications.  The scope utm.constraint_processing is required to set this flag true.",
    )


class PutSubscriptionResponse(BaseModel):
    subscription: Subscription
    operational_intent_references: Optional[List[OperationalIntentReference]] = Field(
        [],
        description="Operational intents in or near the subscription area at the time of creation/update,\nif `notify_for_operational_intents` is true.",
    )
    constraint_references: Optional[List[ConstraintReference]] = Field(
        [],
        description="Constraints in or near the subscription area at the time of creation/update,\nif `notify_for_constraints` is true.",
    )


class DeleteSubscriptionResponse(BaseModel):
    subscription: Subscription


class PutOperationalIntentReferenceParameters(BaseModel):
    extents: List[Volume4D] = Field(
        ...,
        description="Spacetime extents that bound this operational intent.\nStart and end times, as well as lower and upper altitudes, are required for each\nvolume. The end time may not be in the past. All volumes, both nominal and off-nominal,\nmust be encompassed in these extents. However, these extents do not need to match the\nprecise volumes of the operational intent; a single bounding extent may be provided\ninstead, for instance.",
        min_items=1,
    )
    key: Optional[Key] = Field(
        None,
        description="Proof that the USS creating or mutating this operational intent was aware of the current state of the\nairspace, with the expectation that this operational intent is therefore deconflicted from all relevant\nfeatures in the airspace.  This field is not required when declaring an operational intent Nonconforming\nor Contingent, or when there are no relevant Entities in the airspace, but is otherwise required.\nOVNs for constraints are required if and only if the USS managing this operational intent is performing\nthe constraint processing role, which is indicated by whether the subscription associated with this\noperational intent triggers notifications for constraints.  The key does not need to contain the OVN for\nthe operational intent being updated.",
    )
    state: OperationalIntentState
    uss_base_url: OperationalIntentUssBaseURL
    subscription_id: Optional[EntityID] = Field(
        None,
        description="The ID of an existing subscription that the USS will use to keep the operator informed about\nupdates to relevant airspace information.  If this field is not provided, then the\n`new_subscription` field must be provided in order to provide notification capability\nfor the operational intent.  The subscription specified by this ID must cover at least the area over\nwhich this operational intent is conducted, and it must provide notifications for operational intents.",
    )
    new_subscription: Optional[ImplicitSubscriptionParameters] = Field(
        None,
        description="If an existing subscription is not specified in `subscription_id`, then this field must be\npopulated.  When this field is populated, an implicit subscription will be created and\nassociated with this operational intent, and will generally be deleted automatically upon the\ndeletion of this operational intent.",
    )


class ChangeOperationalIntentReferenceResponse(BaseModel):
    subscribers: List[SubscriberToNotify] = Field(
        ...,
        description="DSS subscribers that this client now has the obligation to\nnotify of the operational intent changes just made.  This client must call POST\nfor each provided URL according to the USS-USS `/uss/v1/operational_intents`\npath API.  The client's own subscriptions will also be included in this list.",
    )
    operational_intent_reference: OperationalIntentReference


class ChangeConstraintReferenceResponse(BaseModel):
    subscribers: List[SubscriberToNotify] = Field(
        ...,
        description="DSS subscribers that this client now has the obligation to notify of the constraint changes just made.  This client must call POST for each provided URL according to the USS-USS `/uss/v1/constraints` path API.  The client's own subscriptions will also be included in this list.",
    )
    constraint_reference: Optional[ConstraintReference] = None
