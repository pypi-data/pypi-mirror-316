from .basic import *
import abc
from _typeshed import Incomplete
from abc import ABCMeta, abstractmethod
from typing import Any

class AbstractSystem(ABC):
    __is_playing: bool
    __current_language: Incomplete
    def __init__(self) -> None: ...
    def is_playing(self) -> bool: ...
    def stop(self) -> None: ...
    def _continue(self) -> None: ...
    def language_need_update(self) -> bool: ...
    def update_language(self) -> None: ...

class SystemWithBackgroundMusic(AbstractSystem, metaclass=abc.ABCMeta):
    __audio: Incomplete
    __bgm_path: Incomplete
    __bgm_volume: float
    def __init__(self) -> None: ...
    def stop(self) -> None: ...
    def unload_bgm(self) -> None: ...
    def set_bgm(self, path: str | None, forced: bool = False) -> None: ...
    def set_bgm_volume(self, volume: number) -> None: ...
    def play_bgm(self) -> None: ...
    @staticmethod
    def stop_bgm() -> None: ...
    @abstractmethod
    def draw(self, _surface: ImageSurface) -> None: ...
    def draw_on_screen(self) -> None: ...

class AbstractGameSystem(SystemWithBackgroundMusic, metaclass=ABCMeta):
    _chapter_type: str
    _chapter_id: int
    _project_name: Incomplete
    __initialized: bool
    def __init__(self) -> None: ...
    def is_initialized(self) -> bool: ...
    def _initialize(self, chapterType: str, chapterId: int, projectName: str | None) -> None: ...
    def get_data_of_parent_game_system(self) -> dict: ...
    @abstractmethod
    def _get_data_need_to_save(self) -> dict: ...
    @abstractmethod
    def get_data_file_path(self) -> str: ...
    @abstractmethod
    def load_progress(self, _data: dict) -> None: ...
    def load(self) -> None: ...
    def _save(self) -> None: ...

class Coordinate:
    __x: Incomplete
    __y: Incomplete
    def __init__(self, x: int_f, y: int_f) -> None: ...
    def __lt__(self, other: Coordinate) -> bool: ...
    @property
    def x(self) -> int: ...
    @property
    def left(self) -> int: ...
    def get_left(self) -> int: ...
    def set_left(self, value: int_f) -> None: ...
    def move_left(self, value: int_f) -> None: ...
    def move_right(self, value: int_f) -> None: ...
    @property
    def y(self) -> int: ...
    @property
    def top(self) -> int: ...
    def get_top(self) -> int: ...
    def set_top(self, value: int_f) -> None: ...
    def move_upward(self, value: int_f) -> None: ...
    def move_downward(self, value: int_f) -> None: ...
    @property
    def pos(self) -> tuple[int, int]: ...
    def get_pos(self) -> tuple[int, int]: ...
    def set_pos(self, _x: int_f, _y: int_f) -> None: ...
    def move_to(self, pos: tuple[int_f, int_f]) -> None: ...
    def on_pos(self, pos: object) -> bool: ...

class Position:
    __x: Incomplete
    __y: Incomplete
    def __init__(self, x: number, y: number) -> None: ...
    def __lt__(self, other: Position) -> bool: ...
    @property
    def x(self) -> number: ...
    @property
    def y(self) -> number: ...
    @property
    def pos(self) -> tuple[number, number]: ...
    def get_pos(self) -> tuple[number, number]: ...
    def set_x(self, value: number) -> None: ...
    def set_y(self, value: number) -> None: ...
    def set_pos(self, x: number, y: number) -> None: ...
    def move_to(self, pos: tuple[number, number]) -> None: ...

class GameObject2d(Coordinate, metaclass=abc.ABCMeta):
    tag: str
    def __init__(self, x: int_f, y: int_f) -> None: ...
    @property
    def width(self) -> int: ...
    @abstractmethod
    def get_width(self) -> int: ...
    @property
    def height(self) -> int: ...
    @abstractmethod
    def get_height(self) -> int: ...
    @property
    def size(self) -> tuple[int, int]: ...
    def get_size(self) -> tuple[int, int]: ...
    @property
    def right(self) -> int: ...
    def get_right(self) -> int: ...
    def set_right(self, value: int_f) -> None: ...
    @property
    def bottom(self) -> int: ...
    def get_bottom(self) -> int: ...
    def set_bottom(self, value: int_f) -> None: ...
    @property
    def centerx(self) -> int: ...
    def get_centerx(self) -> int: ...
    def set_centerx(self, centerx: int_f) -> None: ...
    @property
    def centery(self) -> int: ...
    def get_centery(self) -> int: ...
    def set_centery(self, centery: int_f) -> None: ...
    @property
    def center(self) -> tuple[int, int]: ...
    def get_center(self) -> tuple[int, int]: ...
    def set_center(self, centerx: int_f, centery: int_f) -> None: ...
    @property
    def left_center(self) -> tuple[int, int]: ...
    @property
    def right_center(self) -> tuple[int, int]: ...
    @property
    def top_center(self) -> tuple[int, int]: ...
    @property
    def bottom_center(self) -> tuple[int, int]: ...
    def is_hovered(self, off_set: tuple[int, int] | None = None) -> bool: ...
    def is_overlapped_with(self, _rect: GameObject2d) -> bool: ...
    def draw(self, _surface: ImageSurface) -> None: ...
    def draw_on_screen(self) -> None: ...
    @abstractmethod
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...
    def display_on_screen(self, offSet: tuple[int, int] = ...) -> None: ...
    def blit(self, _surface: ImageSurface, pos: tuple[int, int]) -> None: ...
    def blit_on_screen(self, pos: tuple[int, int]) -> None: ...

class Square(GameObject2d):
    __width: Incomplete
    __min_width: int
    __max_width: int
    def __init__(self, x: int_f, y: int_f, width: int_f) -> None: ...
    def get_height(self) -> int: ...
    def get_width(self) -> int: ...
    def set_width(self, value: int_f) -> None: ...
    @property
    def min_width(self) -> int: ...
    def get_min_width(self) -> int: ...
    def set_min_width(self, value: int_f) -> None: ...
    @property
    def max_width(self) -> int: ...
    def get_max_width(self) -> int: ...
    def set_max_width(self, value: int_f = -1) -> None: ...
    def draw_outline(self, _surface: ImageSurface, color: color_liked = 'red', thickness: int = 2, radius: int = -1, offSet: tuple[int, int] = ...) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class Rectangle(Square):
    __height: Incomplete
    __min_height: int
    __max_height: int
    def __init__(self, left: int_f, top: int_f, width: int_f, height: int_f) -> None: ...
    def get_height(self) -> int: ...
    def set_height(self, value: int_f) -> None: ...
    @property
    def min_height(self) -> int: ...
    def get_min_height(self) -> int: ...
    def set_min_height(self, value: int_f) -> None: ...
    @property
    def max_height(self) -> int: ...
    def get_max_height(self) -> int: ...
    def set_max_height(self, value: int_f = -1) -> None: ...
    def set_size(self, width: int_f, height: int_f) -> None: ...
    def get_rect(self) -> tuple[int, int, int, int]: ...
    def get_rectangle(self) -> Rectangle: ...

RectLiked: Incomplete
RectObject: Incomplete

class Rectangles:
    @staticmethod
    def from_tuple(tuple_rect: tuple) -> Rectangle: ...
    @classmethod
    def __comply(cls, rect: RectLiked) -> RectObject: ...
    @classmethod
    def equal(cls, rect1: RectLiked | None, rect2: RectLiked | None) -> bool: ...
    @classmethod
    def create(cls, rect: RectLiked) -> Rectangle: ...
    @classmethod
    def apply(cls, source_rect: RectLiked, apply_rect: RectLiked) -> Rectangle: ...

def convert_to_pygame_rect(rect: RectLiked) -> pygame.Rect: ...
def is_hovering(imgObject: ImageSurface, objectPos: tuple[int, int] = ...) -> bool: ...
def get_img_subsurface(img: ImageSurface, rect: RectLiked) -> ImageSurface: ...

class AbstractImageSurface(Rectangle, Hidable, metaclass=ABCMeta):
    __img: Incomplete
    tag: Incomplete
    def __init__(self, img: Any, x: int_f, y: int_f, width: int_f, height: int_f, tag: str) -> None: ...
    @property
    def path(self) -> str: ...
    def get_bounding_rect(self) -> Rectangle: ...
    @property
    def alpha(self) -> int: ...
    def get_alpha(self) -> int: ...
    def set_alpha(self, value: int) -> None: ...
    def add_alpha(self, value: int) -> None: ...
    def subtract_alpha(self, value: int) -> None: ...
    def _get_image_reference(self) -> Any: ...
    def get_image_copy(self) -> Any: ...
    def _set_image(self, newImage: Any) -> None: ...
    def update_image(self, img_path: PoI, ifConvertAlpha: bool = True) -> None: ...
    def set_width_with_original_image_size_locked(self, width: int_f) -> None: ...
    def set_height_with_original_image_size_locked(self, height: int_f) -> None: ...
    def scale_n_times(self, times: float) -> None: ...
    def rotate(self, angle: int) -> None: ...
    def is_not_null(self) -> bool: ...

class SurfaceWithLocalPos(metaclass=abc.ABCMeta):
    __local_x: int
    __local_y: int
    def __init__(self) -> None: ...
    @abstractmethod
    def get_left(self) -> int: ...
    @abstractmethod
    def get_top(self) -> int: ...
    @property
    def local_x(self) -> int: ...
    def get_local_x(self) -> int: ...
    @property
    def local_y(self) -> int: ...
    def get_local_y(self) -> int: ...
    @property
    def local_pos(self) -> tuple[int, int]: ...
    def get_local_pos(self) -> tuple[int, int]: ...
    def set_local_x(self, value: int_f) -> None: ...
    def set_local_y(self, value: int_f) -> None: ...
    def set_local_pos(self, local_x: int_f, local_y: int_f) -> None: ...
    def locally_move_to(self, local_pos: tuple[int_f, int_f]) -> None: ...
    def add_local_x(self, value: int_f) -> None: ...
    def add_local_y(self, value: int_f) -> None: ...
    def add_local_pos(self, local_x: int_f, local_y: int_f) -> None: ...
    def subtract_local_x(self, value: int_f) -> None: ...
    def subtract_local_y(self, value: int_f) -> None: ...
    def subtract_local_pos(self, local_x: int_f, local_y: int_f) -> None: ...
    @property
    def abs_x(self) -> int: ...
    def get_abs_x(self) -> int: ...
    @property
    def abs_y(self) -> int: ...
    def get_abs_y(self) -> int: ...
    @property
    def abs_pos(self) -> tuple[int, int]: ...
    def get_abs_pos(self) -> tuple[int, int]: ...

class AdvancedAbstractImageSurface(AbstractImageSurface, SurfaceWithLocalPos):
    _alpha: int
    def __init__(self, img: Any, x: int_f, y: int_f, width: int_f, height: int_f, tag: str = '') -> None: ...
    def get_alpha(self) -> int: ...
    def set_alpha(self, value: int) -> None: ...
    def _set_alpha(self, value: int, update_original: bool = True) -> None: ...

class AdvancedAbstractCachingImageSurface(AdvancedAbstractImageSurface, metaclass=abc.ABCMeta):
    _processed_img: Incomplete
    _need_update: bool
    __is_local_offset_enable: bool
    def __init__(self, img: Any, x: int_f, y: int_f, width: int_f, height: int_f, tag: str = '') -> None: ...
    @abstractmethod
    def _update_img(self) -> None: ...
    def set_local_offset_availability(self, value: bool) -> None: ...
    def get_abs_x(self) -> int: ...
    def get_abs_y(self) -> int: ...
    def update_image(self, img_path: PoI, ifConvertAlpha: bool = True) -> None: ...
    def set_alpha(self, value: int) -> None: ...
    def set_width(self, value: int_f) -> None: ...
    def set_height(self, value: int_f) -> None: ...
    def is_hovered(self, off_set: tuple[int, int] | None = None) -> bool: ...
    def add_darkness(self, value: int) -> None: ...
    def subtract_darkness(self, value: int) -> None: ...
    def rotate(self, angle: int) -> None: ...
    def flip_original_img(self, horizontal: bool = True, vertical: bool = False) -> None: ...
    def draw_abs_outline(self, _surface: ImageSurface, color: color_liked = 'red', line_width: int = 2, offSet: tuple[int, int] = ...) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class TextSurface(GameObject2d, Hidable):
    __text: Incomplete
    __size: Incomplete
    __color: Incomplete
    __bold: Incomplete
    __italic: Incomplete
    __alpha: int
    __text_surface: Incomplete
    __outline_thickness: int
    __outline_color: Incomplete
    def __init__(self, text: str, x: int_f, y: int_f, size: int_f, _color: color_liked = ..., _bold: bool = False, _italic: bool = False) -> None: ...
    def get_text(self) -> str: ...
    def get_font_size(self) -> int: ...
    def get_color(self) -> tuple[int, int, int, int]: ...
    def set_color(self, _color: color_liked) -> None: ...
    def get_bold(self) -> bool: ...
    def get_italic(self) -> bool: ...
    def get_alpha(self) -> int: ...
    def _update_text_surface(self) -> None: ...
    def _get_text_surface(self) -> ImageSurface | None: ...
    def set_outline_thickness(self, _thickness: int) -> None: ...
    def set_outline_color(self, _color: color_liked) -> None: ...
    def disable_outline(self) -> None: ...
    def set_text(self, value: str) -> None: ...
    def set_font_size(self, value: int) -> None: ...
    def set_bold(self, value: bool) -> None: ...
    def set_italic(self, value: bool) -> None: ...
    def set_alpha(self, value: int) -> None: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class ResizeWhenHoveredTextSurface(TextSurface):
    __text_when_hovered: Incomplete
    __is_hovered: bool
    def __init__(self, text: str, x: int_f, y: int_f, original_size: int_f, size_when_hovered: int_f, _color: color_liked = ..., _bold: bool = False, _italic: bool = False) -> None: ...
    def set_color(self, _color: color_liked) -> None: ...
    def set_left(self, value: int_f) -> None: ...
    def set_top(self, value: int_f) -> None: ...
    def set_text(self, value: str) -> None: ...
    def set_font_size(self, value: int) -> None: ...
    def set_bold(self, value: bool) -> None: ...
    def set_italic(self, value: bool) -> None: ...
    def set_alpha(self, value: int) -> None: ...
    def set_outline_thickness(self, _thickness: int) -> None: ...
    def set_outline_color(self, _color: color_liked) -> None: ...
    def disable_outline(self) -> None: ...
    def has_been_hovered(self) -> bool: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class StaticImage(AdvancedAbstractCachingImageSurface):
    __is_flipped_horizontally: bool
    __is_flipped_vertically: bool
    __crop_rect: Incomplete
    __bounding_rect: Incomplete
    __no_cropping_needed: bool
    def __init__(self, img: PoI, x: int_f, y: int_f, width: int_f = -1, height: int_f = -1, tag: str = '') -> None: ...
    @property
    def crop_rect(self) -> Rectangle | None: ...
    def get_crop_rect(self) -> Rectangle | None: ...
    def disable_cropping(self) -> None: ...
    _need_update: bool
    def set_crop_rect(self, rect: Rectangle | None) -> None: ...
    def flip(self, horizontal: bool = True, vertical: bool = False) -> None: ...
    def flip_if_not(self, horizontal: bool = True, vertical: bool = False) -> None: ...
    def flip_back_to_normal(self) -> None: ...
    def copy(self, deep_copy: bool = True) -> StaticImage: ...
    @staticmethod
    def new_place_holder() -> StaticImage: ...
    def get_bounding_rect(self) -> Rectangle: ...
    _processed_img: Incomplete
    def _update_img(self) -> None: ...

class MovableStaticImage(StaticImage):
    __default_x: Incomplete
    __default_y: Incomplete
    __target_x: Incomplete
    __target_y: Incomplete
    __move_speed_x: Incomplete
    __move_speed_y: Incomplete
    __is_moving_toward_target: bool
    def __init__(self, img: PoI, default_x: int_f, default_y: int_f, target_x: int_f, target_y: int_f, move_speed_x: int_f, move_speed_y: int_f, width: int_f = -1, height: int_f = -1, tag: str = '') -> None: ...
    def copy(self, deep_copy: bool = True) -> MovableStaticImage: ...
    def set_target(self, target_x: int_f, target_y: int_f, move_speed_x: int_f, move_speed_y: int_f) -> None: ...
    def switch(self) -> None: ...
    def move_toward(self) -> None: ...
    def move_back(self) -> None: ...
    def reset_position(self) -> None: ...
    def is_moving_toward_target(self) -> bool: ...
    def has_reached_target(self) -> bool: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class AnimatedImage(AdvancedAbstractImageSurface):
    __imgId: int
    __fps: Incomplete
    __countDown: int
    def __init__(self, imgList: tuple[StaticImage, ...], x: int_f, y: int_f, width: int_f, height: int_f, fps: int_f, tag: str = '') -> None: ...
    def get_fps(self) -> int: ...
    def set_fps(self, value: int_f) -> None: ...
    def copy(self, deep_copy: bool = True) -> AnimatedImage: ...
    def _get_image_reference(self) -> tuple[StaticImage, ...]: ...
    @property
    def current_image(self) -> StaticImage: ...
    def get_bounding_rect(self) -> Rectangle: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class AbstractFrame(AdvancedAbstractImageSurface, metaclass=ABCMeta):
    __rescale_icon_0: StaticImage
    __rescale_icon_45: StaticImage
    __rescale_icon_90: StaticImage
    __rescale_icon_135: StaticImage
    __rescale_icon_initialized: bool
    __mouse_hovered_offset_pos: Incomplete
    __rescale_directions: Incomplete
    __if_regenerate_window: bool
    _content_surface: Incomplete
    _if_update_needed: bool
    __if_move_local_pos: bool
    def __init__(self, x: int_f, y: int_f, width: int_f, height: int_f, tag: str = '') -> None: ...
    @staticmethod
    def _get_bar_height() -> int: ...
    @staticmethod
    def _get_outline_thickness() -> int: ...
    def __update_window_frame(self) -> None: ...
    @abstractmethod
    def _update(self) -> None: ...
    def set_width(self, value: int_f) -> None: ...
    def set_height(self, value: int_f) -> None: ...
    def __is_corner_hovered(self, side1: str, side2: str | None = None) -> bool: ...
    def _any_content_container_event(self) -> bool: ...
    def present_on(self, _surface: ImageSurface) -> None: ...

class ConfirmationDialogBox:
    __title: Incomplete
    __message: Incomplete
    __icon: Incomplete
    def __init__(self, title: str, message: str, icon: str = 'question') -> None: ...
    @staticmethod
    def ask(title: str, message: str, icon: str = 'question') -> bool: ...
    def set_title(self, title: str) -> None: ...
    def set_message(self, message: str) -> None: ...
    def set_icon(self, icon: str) -> None: ...
    def show(self) -> bool: ...

class LinpgVersionChecker:
    def __init__(self, action: str, recommended_revision: int, recommended_patch: int, recommended_version: int = 3) -> None: ...

class AbstractVideo(ABC):
    _path: Incomplete
    __video_stream: Incomplete
    _frame_rate: int
    _frame_buffer_num: Incomplete
    _starting_point: Incomplete
    _ending_point: Incomplete
    __stopped: bool
    __started: bool
    __frame_index_to_set: int
    def __init__(self, path: str, buffer_num: int, play_range: tuple[int, int] = (0, -1)) -> None: ...
    def _init(self) -> None: ...
    def set_starting_point(self, index: int) -> None: ...
    @property
    def fps(self) -> int: ...
    @property
    def frame_rate(self) -> int: ...
    def get_frame_rate(self) -> int: ...
    @property
    def frame_num(self) -> int: ...
    def get_frame_num(self) -> int: ...
    @property
    def frame_index(self) -> int: ...
    def get_frame_index(self) -> int: ...
    def set_frame_index(self, num: int) -> None: ...
    def get_percentage_played(self) -> float: ...
    def stop(self) -> None: ...
    @property
    def started(self) -> bool: ...
    def restart(self) -> None: ...
    @property
    def play_range(self) -> tuple[int, int]: ...
    def is_playing(self) -> bool: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class VideoSurface(AbstractVideo):
    __loop: Incomplete
    __looped_times: int
    __audio: Incomplete
    __audio_channel: Incomplete
    def __init__(self, path: str, loop: bool = True, with_audio: bool = True, play_range: tuple[int, int] = (0, -1), buffer_num: int = 10, cache_key: str | None = None) -> None: ...
    def copy(self) -> VideoSurface: ...
    @property
    def volume(self) -> float: ...
    def get_volume(self) -> float: ...
    def set_volume(self, value: float) -> None: ...
    def stop(self) -> None: ...
    def _init(self) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class VideoPlayer(AbstractVideo):
    __clock: Incomplete
    __audio_path: str
    def __init__(self, path: str, buffer_num: int = 6) -> None: ...
    def copy(self) -> VideoPlayer: ...
    def set_frame_index(self, num: int) -> None: ...
    def stop(self) -> None: ...
    def _init(self) -> None: ...
    def pre_init(self) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class SpriteImage:
    __PATH: Incomplete
    __SHEET: Incomplete
    __RECT_DICTIONARY: Incomplete
    def __init__(self, img_path: str) -> None: ...
    def get(self, name: str) -> ImageSurface | tuple[ImageSurface, ...]: ...
    def contain(self, name: str) -> bool: ...
    def to_dict(self) -> dict[str, ImageSurface | tuple[ImageSurface, ...]]: ...
    def copy(self) -> SpriteImage: ...
    @staticmethod
    def split_sprite_image(_image_path: str, output_directory: str, _data: dict[str, tuple[int, int, int, int, int]]) -> None: ...
    @staticmethod
    def __process_image(_path: str, max_block_size: list[int], minimize_pixels: bool) -> dict: ...
    @staticmethod
    def __put_and_document(_pos: tuple[int, int], minimize_pixels: bool, value: dict, sprite_surface: ImageSurface) -> list[int]: ...
    @classmethod
    def generate(cls, img_folder_path: str, minimize_pixels: bool = False, actionOnSameRow: bool = False, universal_width: int | None = None, universal_height: int | None = None, additional_padding: int = 0, resultFileType: str = 'png') -> None: ...
