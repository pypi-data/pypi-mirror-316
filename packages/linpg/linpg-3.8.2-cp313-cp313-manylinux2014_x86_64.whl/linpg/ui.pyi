from .core import *
from _typeshed import Incomplete
from typing import Any

_SPEECH_RECOGNITION_ENABLED: bool

class ButtonText(TextSurface):
    __text_surface_2: Incomplete
    __alpha_when_not_hover: Incomplete
    __is_hovered: bool
    def __init__(self, text: str, size: int_f, _color: color_liked = ..., _bold: bool = False, _italic: bool = False, alpha_when_not_hover: int = 255) -> None: ...
    def _update_text_surface(self) -> None: ...
    def set_is_hovered(self, value: bool) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class AbstractButton(AbstractImageSurface, metaclass=ABCMeta):
    __img2: Incomplete
    def __init__(self, img: ImageSurface, x: int, y: int, width: int = -1, height: int = -1, tag: str = '') -> None: ...
    def has_been_hovered(self) -> bool: ...
    def set_hover_img(self, img: ImageSurface) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class ButtonComponent(AbstractButton):
    __is_hovered: bool
    def __init__(self, img: ImageSurface, width: int = -1, height: int = -1, tag: str = '') -> None: ...
    def has_been_hovered(self) -> bool: ...
    def set_is_hovered(self, value: bool) -> None: ...
    @staticmethod
    def icon(path: PoI, size: tuple[int, int], alpha_when_not_hover: int = 255) -> ButtonComponent: ...
    @staticmethod
    def text(text: str, size: int_f, _color: color_liked = ..., _bold: bool = False, _italic: bool = False, alpha_when_not_hover: int = 255) -> ButtonText: ...

class Button(AbstractButton):
    __is_hovered: bool
    __icon: Incomplete
    __text: Incomplete
    __description: str
    __description_surface: Incomplete
    __resize_based_on_components: bool
    __scale_for_resizing_width: float
    __scale_for_resizing_height: int
    def __init__(self, img: ImageSurface, x: int, y: int, width: int = -1, height: int = -1, tag: str = '') -> None: ...
    @staticmethod
    def load(path: PoI, position: tuple[int, int], size: tuple[int, int], alpha_when_not_hover: int = 255) -> Button: ...
    def set_auto_resize(self, value: bool) -> None: ...
    def set_scale_for_resizing_width(self, value: number = 1.5) -> None: ...
    def set_scale_for_resizing_height(self, value: number = 2) -> None: ...
    def __check_if_resize_needed(self) -> None: ...
    def set_icon(self, _icon: ButtonComponent | None = None) -> None: ...
    def get_icon(self) -> ButtonComponent | None: ...
    def get_description(self) -> str: ...
    def set_description(self, value: str = '') -> None: ...
    def get_text(self) -> ButtonText | None: ...
    def set_text(self, text_surface: ButtonText | None = None) -> None: ...
    def has_been_hovered(self) -> bool: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class AbstractGameObjectsContainer(AbstractImageSurface, metaclass=ABCMeta):
    def __init__(self, bg_img: PoI | None, x: int_f, y: int_f, width: int, height: int, tag: str = '') -> None: ...
    def _get_container(self) -> dict | list: ...
    @property
    def item_num(self) -> int: ...
    def clear(self) -> None: ...
    def is_empty(self) -> bool: ...
    def set_width(self, value: int_f) -> None: ...
    def set_height(self, value: int_f) -> None: ...
    def update_background(self, newImg: Any) -> None: ...
    def is_background_init(self) -> bool: ...

class GameObjectsDictContainer(AbstractGameObjectsContainer):
    __items_container_dict: Incomplete
    _item_being_hovered: Incomplete
    def __init__(self, bg_img: PoI | None, x: int_f, y: int_f, width: int, height: int, tag: str = '') -> None: ...
    def __setitem__(self, key: str, new_item: object | None) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __len__(self) -> int: ...
    @property
    def item_being_hovered(self) -> str | None: ...
    def _get_container(self) -> dict: ...
    def keys(self) -> tuple: ...
    def set(self, key: str, new_item: object | None) -> None: ...
    def get(self, key: str) -> Any: ...
    def swap(self, key1: str, key2: str) -> None: ...
    def remove(self, key: str) -> None: ...
    def contain(self, key: str) -> bool: ...
    def _update(self, new_content: dict) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class GameObjectsListContainer(AbstractGameObjectsContainer):
    __items_container_list: Incomplete
    _item_being_hovered: int
    def __init__(self, bg_img: PoI | None, x: int_f, y: int_f, width: int, height: int, tag: str = '') -> None: ...
    def __getitem__(self, index: int) -> Any: ...
    def __setitem__(self, index: int, new_item: object | None) -> None: ...
    def __len__(self) -> int: ...
    @property
    def item_being_hovered(self) -> int: ...
    def _get_container(self) -> list: ...
    def append(self, new_item: object | None) -> None: ...
    def swap(self, index1: int, index2: int) -> None: ...
    def remove(self, index: int) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class DropDownList(GameObjectsDictContainer):
    __block_height: Incomplete
    __fold_choice: bool
    __chosen_item_key: str
    __DEFAULT_CONTENT: str
    __font_color: Incomplete
    __FONT: Incomplete
    outline_thickness: int
    def __init__(self, bg_img: PoI | None, x: int_f, y: int_f, font_size: int, font_color: color_liked = 'black', tag: str = '') -> None: ...
    def __recalculate_width(self) -> None: ...
    def __update_width(self, item: str | int) -> None: ...
    def update_font_size(self, font_size: int) -> None: ...
    def update_font_color(self, font_color: color_liked) -> None: ...
    def set(self, key: str, new_item: str | int) -> None: ...
    def get(self, key: str) -> str | int: ...
    def get_selected_item(self) -> str: ...
    def set_selected_item(self, key: str) -> None: ...
    def get_height(self) -> int: ...
    def remove(self, key: str) -> None: ...
    def clear(self) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class AbstractScrollBarsSurface(SurfaceWithLocalPos, metaclass=ABCMeta):
    _button_thickness: int
    _move_speed: int
    _bar_color: Incomplete
    def __init__(self) -> None: ...
    def get_surface_width(self) -> int: ...
    def get_surface_height(self) -> int: ...
    def get_left(self) -> int: ...
    def get_top(self) -> int: ...
    def get_right(self) -> int: ...
    def get_bottom(self) -> int: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def is_hovered(self, off_set: tuple[int, int] | None = None) -> bool: ...
    def get_bar_color(self) -> tuple[int, int, int, int]: ...
    def set_bar_color(self, color: color_liked) -> None: ...
    def _get_right_scroll_bar_rect(self, off_set_x: number, off_set_y: number) -> Rectangle | None: ...
    def _get_bottom_scroll_bar_rect(self, off_set_x: number, off_set_y: number) -> Rectangle | None: ...
    def _get_right_scroll_button_rect(self, off_set_x: number, off_set_y: number) -> Rectangle | None: ...
    def _get_bottom_scroll_button_rect(self, off_set_x: number, off_set_y: number) -> Rectangle | None: ...
    def display_scrollbar(self, _surface: ImageSurface, off_set: tuple[int, int] = ...) -> None: ...

class AbstractSurfaceWithScrollBar(AbstractScrollBarsSurface, metaclass=ABCMeta):
    axis_mode: Incomplete
    __scroll_bar_pos: bool
    __is_holding_scroll_button: bool
    def __init__(self) -> None: ...
    def switch_mode(self) -> None: ...
    @property
    def scroll_bar_pos(self) -> str: ...
    def get_scroll_bar_pos(self) -> str: ...
    def set_scroll_bar_pos(self, pos: str) -> None: ...
    def _get_scroll_button_rect(self, off_set_x: number, off_set_y: number) -> Rectangle | None: ...
    def _get_scroll_bar_rect(self, off_set_x: number, off_set_y: number) -> Rectangle | None: ...
    def display_scrollbar(self, _surface: ImageSurface, off_set: tuple[int, int] = ...) -> None: ...

class SurfaceContainerWithScrollBar(GameObjectsDictContainer, AbstractSurfaceWithScrollBar):
    __surface_width: int
    __surface_height: int
    padding: int
    distance_between_item: int
    axis_mode: Incomplete
    __item_per_line: int
    def __init__(self, img: PoI | None, x: int_f, y: int_f, width: int, height: int, mode: Axis = ..., tag: str = '') -> None: ...
    def get_surface_width(self) -> int: ...
    def get_surface_height(self) -> int: ...
    @property
    def item_per_line(self) -> int: ...
    def get_item_per_line(self) -> int: ...
    def set_item_per_line(self, value: int) -> None: ...
    def switch_mode(self) -> None: ...
    _item_being_hovered: Incomplete
    def display(self, _surface: ImageSurface, off_set: tuple[int, int] = ...) -> None: ...

class AbstractInputBox(GameObject2d, metaclass=ABCMeta):
    _FONT: Incomplete
    _default_width: Incomplete
    _default_height: Incomplete
    _input_box: Incomplete
    _color: Incomplete
    _text_color: Incomplete
    _active: bool
    _holder: Incomplete
    _holder_index: int
    _display_holder_timer: Incomplete
    need_save: bool
    def __init__(self, x: int_f, y: int_f, font_size: int, txt_color: color_liked, default_width: int) -> None: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def get_fontsize(self) -> int: ...
    def set_fontsize(self, font_size: int) -> None: ...
    def set_pos(self, x: int_f, y: int_f) -> None: ...

class SingleLineInputBox(AbstractInputBox):
    _text: str
    _left_ctrl_pressing: bool
    _padding: Incomplete
    def __init__(self, x: int_f, y: int_f, font_size: int, txt_color: color_liked, default_width: int = 150) -> None: ...
    need_save: bool
    def get_text(self) -> str: ...
    _holder_index: Incomplete
    def set_text(self, new_txt: str = '') -> None: ...
    def _add_text(self, _content: str) -> None: ...
    def _remove_char(self, action: Locations) -> None: ...
    def _reset_holder_index(self, mouse_x: int) -> None: ...
    def _reset_inputbox_width(self) -> None: ...
    def _check_key_down(self, event: PG_Event) -> bool: ...
    def _draw_content(self, _surface: ImageSurface, with_holder: bool = True) -> None: ...
    _active: bool
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class MultipleLinesInputBox(AbstractInputBox):
    _text: Incomplete
    __lineId: int
    __start_dictating: Incomplete
    __is_dictating: bool
    def __init__(self, x: int_f, y: int_f, font_size: int, txt_color: color_liked, default_width: int = 150) -> None: ...
    need_save: bool
    def get_text(self) -> list: ...
    def get_raw_text(self) -> str: ...
    _holder_index: Incomplete
    def set_text(self, new_txt: list = []) -> None: ...
    def set_fontsize(self, font_size: int) -> None: ...
    def _reset_inputbox_width(self) -> None: ...
    def _reset_inputbox_height(self) -> None: ...
    def _reset_inputbox_size(self) -> None: ...
    def _add_text(self, _content: str) -> None: ...
    def _remove_char(self, action: Locations) -> None: ...
    def _reset_holder_index(self, mouse_x: int, mouse_y: int) -> None: ...
    def __dictate(self) -> None: ...
    _active: bool
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class Console(SingleLineInputBox, Hidable, threading.Thread):
    _COMMAND_INDICATOR: str
    color_active: Incomplete
    color_inactive: Incomplete
    _color: Incomplete
    _active: bool
    _text_history: Incomplete
    __backward_id: int
    _txt_output: Incomplete
    __THREADING_LOCK: Incomplete
    daemon: bool
    def __init__(self, x: int_f, y: int_f, font_size: int = 32, default_width: int = 150) -> None: ...
    def safely_set_text(self, new_txt: str) -> None: ...
    __is_using_threading: bool
    _text: Incomplete
    def run(self) -> None: ...
    def _check_key_down(self, event: PG_Event) -> bool: ...
    def __execute_command(self) -> None: ...
    @staticmethod
    def __boolean_conversion(_status: str) -> bool | None: ...
    def _check_command(self, command_blocks: list[str]) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class AbstractProgressBar(AbstractImageSurface, metaclass=ABCMeta):
    __current_percentage: float
    def __init__(self, img: Any, x: int_f, y: int_f, width: int_f, height: int_f, tag: str) -> None: ...
    @property
    def percentage(self) -> float: ...
    def get_percentage(self) -> float: ...
    def set_percentage(self, value: float) -> None: ...

class ProgressBar(AbstractProgressBar):
    __color: Incomplete
    def __init__(self, x: int_f, y: int_f, max_width: int, height: int, color: color_liked, tag: str = '') -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class SimpleRectPointsBar(AbstractProgressBar):
    __FONT: FontGenerator
    __back_color: Incomplete
    __front_color: Incomplete
    __outline_color: Incomplete
    __font_color: Incomplete
    __current_point: int
    __max_point: int
    def __init__(self, x: int_f, y: int_f, max_width: int, height: int, front_color: color_liked, back_color: color_liked, outline_color: color_liked, font_color: color_liked, tag: str = '') -> None: ...
    def get_percentage(self) -> float: ...
    def set_current_point(self, value: int) -> None: ...
    def set_max_point(self, value: int) -> None: ...
    def set_color(self, front_color: color_liked, back_color: color_liked | None = None, outline_color: color_liked | None = None, font_color: color_liked | None = None) -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class ProgressBarSurface(AbstractProgressBar):
    _img2: Incomplete
    axis_mode: Incomplete
    def __init__(self, imgOnTop: PoI | None, imgOnBottom: PoI | None, x: int_f, y: int_f, max_width: int, height: int, mode: Axis = ..., tag: str = '') -> None: ...
    def copy(self, deep_copy: bool = True) -> ProgressBarSurface: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class ProgressBarAdjuster(ProgressBarSurface):
    __indicator: Incomplete
    def __init__(self, imgOnTop: PoI | None, imgOnBottom: PoI | None, indicator_img: PoI, x: int_f, y: int_f, max_width: int, height: int, indicator_width: int, indicator_height: int, mode: Axis = ..., tag: str = '') -> None: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class DynamicProgressBarSurface(ProgressBarSurface):
    _percentage_to_be: float
    __percent_update_each_time: float
    __total_update_intervals: int
    def __init__(self, imgOnTop: PoI | None, imgOnBottom: PoI | None, x: int_f, y: int_f, max_width: int, height: int, mode: Axis = ...) -> None: ...
    @property
    def accuracy(self) -> int: ...
    @property
    def percentage(self) -> float: ...
    @property
    def __real_current_percentage(self) -> number: ...
    def get_percentage(self) -> float: ...
    def set_percentage(self, value: float) -> None: ...
    def copy(self, deep_copy: bool = True) -> DynamicProgressBarSurface: ...
    def _get_img_on_top(self) -> ImageSurface: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class UiGenerator:
    __UI_TEMPLATES: Final[dict]
    @classmethod
    def __try_convert_string_to_number(cls, value: str, value_in_case_percentage: int, custom_values: dict) -> int: ...
    @classmethod
    def __convert_number(cls, item: dict, key: str, value_in_case_percentage: int, custom_values: dict) -> int: ...
    @classmethod
    def __convert_coordinate(cls, item: dict, key: str, value_in_case_center: int, value_in_case_percentage: int, custom_values: dict) -> int: ...
    @staticmethod
    def __load_text(text: str) -> str: ...
    @classmethod
    def __generate_container(cls, data: dict, custom_values: dict, max_width: int = -1, max_height: int = -1) -> GameObjectsDictContainer: ...
    @classmethod
    def __generate(cls, data: dict, custom_values: dict, max_width: int = -1, max_height: int = -1) -> GameObject2d: ...
    @classmethod
    def __get_data_in_dict(cls, data: str | dict) -> dict: ...
    @classmethod
    def generate(cls, data: str | dict, custom_values: dict = {}) -> GameObject2d: ...
    @classmethod
    def generate_container(cls, data: str | dict, custom_values: dict = {}) -> GameObjectsDictContainer: ...

UI: UiGenerator

class AbstractInternalMenu(Hidable, metaclass=ABCMeta):
    _CONTENT: Incomplete
    _initialized: bool
    _menu_name: Incomplete
    def __init__(self, menu_name: str) -> None: ...
    def initialize(self) -> None: ...
    def is_hovered(self) -> bool: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class ConfirmationWarningWindow(AbstractInternalMenu):
    @property
    def item_being_hovered(self) -> str | None: ...

class OptionMenu(AbstractInternalMenu):
    need_update: Incomplete
    def __init__(self) -> None: ...
    def initialize(self) -> None: ...
    def __ensure_initialization(self) -> None: ...
    def get_width(self) -> int: ...
    def get_height(self) -> int: ...
    def update_background(self, newImg: Any) -> None: ...
    _initialized: bool
    def draw(self, _surface: ImageSurface) -> None: ...

class PauseMenu(AbstractInternalMenu):
    __leave_warning: Incomplete
    __exit_warning: Incomplete
    __button_hovered: str
    split_point: int
    def __init__(self) -> None: ...
    def get_button_clicked(self) -> str: ...
    def initialize(self) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class SaveOrLoadSelectedProgressMenu(Hidable):
    row: int
    colum: int
    __slotId: int
    __saves: Incomplete
    __page_id: int
    __max_pages: int
    def __init__(self) -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def get_selected_slot(self) -> int: ...
    def get_selected_save(self) -> Saves.Progress | None: ...
    def __process_page_switching(self, _surface: ImageSurface) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class PauseMenuModuleForGameSystem(AbstractInternalMenu):
    OPTION_MENU: OptionMenu
    __pause_menu: Incomplete
    __select_progress_menu: Incomplete
    __save_or_load: bool
    def __init__(self) -> None: ...
    def _get_data_need_to_save(self) -> dict: ...
    def load_progress(self, _data: dict) -> None: ...
    def _fade(self, _surface: ImageSurface) -> None: ...
    def stop(self) -> None: ...
    def _update_sound_volume(self) -> None: ...
    def update_language(self) -> None: ...
    def _enable_pause_menu(self) -> None: ...
    def _disable_pause_menu(self) -> None: ...
    def _is_pause_menu_enabled(self) -> bool: ...
    def _initialize_pause_menu(self) -> None: ...
    def __close_menus(self) -> None: ...
    def _show_pause_menu(self, _surface: ImageSurface) -> None: ...
