from .ui import *
import pyvns
from _typeshed import Incomplete

class DialogNode(Button):
    __key_name: Incomplete
    __next_keys: Incomplete
    has_been_displayed: bool
    def __init__(self, key_name: str, font_size: int, next_keys: list[str], tag: str = '') -> None: ...
    @property
    def next_keys(self) -> tuple[str, ...]: ...
    def display(self, _surface: ImageSurface, offSet: tuple[int, int] = ...) -> None: ...

class DialogNavigationWindow(AbstractFrame):
    __nodes_map: Incomplete
    __current_selected_key: str
    __font_size: int
    __most_right: int
    __most_top: int
    __most_bottom: int
    def __init__(self, x: int_f, y: int_f, width: int_f, height: int_f, tag: str = '') -> None: ...
    _if_update_needed: bool
    def add_node(self, key: str, next_keys: list[str]) -> None: ...
    def read_all(self, dialogs_data: dict[str, pyvns.Dialogue]) -> None: ...
    def update_selected(self, new_current_select: str) -> None: ...
    def get_selected_key(self) -> str: ...
    def __update_node_pos(self, key: str = 'head', offset_x: int = 0, offset_y: int = 0) -> int: ...
    def __draw_node(self, _surface: ImageSurface, key: str = 'head') -> None: ...
    _content_surface: Incomplete
    def _update(self) -> None: ...
    def _any_content_container_event(self) -> bool: ...

class AbstractDialogBox(Hidable, metaclass=ABCMeta):
    _dialogue_box_max_height: Incomplete
    _dialogue_box_max_y: Incomplete
    _dialogue_box: Incomplete
    def __init__(self) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...
    def update(self, narrator: str, contents: list) -> None: ...

class EditableDialogBox(AbstractDialogBox):
    __contents: Incomplete
    __narrator: Incomplete
    def __init__(self, fontSize: int) -> None: ...
    def any_changed_was_made(self) -> bool: ...
    def get_narrator(self) -> str: ...
    def get_content(self) -> list: ...
    def update(self, narrator: str | None, contents: list | None) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class DialogBox(AbstractDialogBox):
    class __NextPageIndicatorIcon:
        __status: bool
        __x_offset: int
        __y_offset: int
        def __init__(self) -> None: ...
        def draw_to(self, _surface: ImageSurface, _x: int, _y: int, _width: int) -> None: ...
    FONT: Incomplete
    __contents: Incomplete
    __narrator: str
    __text_index: int
    __next_text_index_count: int
    __next_text_index_count_required: int
    __displayed_lines: int
    __textPlayingSound: Incomplete
    __READING_SPEED: Incomplete
    __next_page_indicator_icon: Incomplete
    __read_time: int
    __total_letters: int
    __auto_mode: bool
    __fade_out_stage: bool
    def __init__(self, fontSize: int) -> None: ...
    def reset(self) -> None: ...
    def is_all_played(self) -> bool: ...
    def play_all(self) -> None: ...
    def update(self, narrator: str | None, contents: list | None, forceNotResizeDialogueBox: bool = False) -> None: ...
    def get_sound_volume(self) -> float: ...
    def set_sound_volume(self, volume: number) -> None: ...
    def set_playing_automatically(self, value: bool) -> None: ...
    def is_update_needed(self) -> bool: ...
    @staticmethod
    def stop_playing_text_sound() -> None: ...
    def set_visible(self, visible: bool) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class ScriptCompiler(pyvns.Compiler):
    @classmethod
    def compile(cls, path: str, out_dir: str | None = None) -> None: ...
    @staticmethod
    def extract_info_from_path(_path: str) -> tuple[int, str]: ...

class DialoguesManager(pyvns.DialoguesManager):
    @property
    def previous(self) -> pyvns.Dialogue | None: ...
    @property
    def current(self) -> pyvns.Dialogue: ...
    @property
    def section(self) -> str: ...

class AbstractVisualNovelCharacterImageFilterEffect(ABC):
    def render(self, characterImage: StaticImage, _surface: ImageSurface, is_silent: bool) -> None: ...

class VisualNovelCharacterImageManager:
    __character_image: Final[dict[str, tuple[StaticImage, ...]]]
    __previous_characters: tuple[pyvns.Naming, ...]
    __last_round_image_alpha: int
    __current_characters: tuple[pyvns.Naming, ...]
    __this_round_image_alpha: int
    FILTERS: Final[dict[str, AbstractVisualNovelCharacterImageFilterEffect]]
    DARKNESS: int
    __x_correction_offset_index: int
    __x_offset_for_this_round: int
    __x_offset_for_last_round: int
    dev_mode: bool
    character_get_click: str | None
    @staticmethod
    def __GET_WIDTH() -> int: ...
    @classmethod
    def reset(cls) -> None: ...
    @classmethod
    def __display_character(cls, _name_data: pyvns.Naming, x: int, alpha: int, _surface: ImageSurface) -> None: ...
    @staticmethod
    def __estimate_x(_width: int, _num: int, _index: int) -> int: ...
    @classmethod
    def __fade_in_and_out_characters(cls, name1: pyvns.Naming, name2: pyvns.Naming, x: int, _surface: ImageSurface) -> None: ...
    @classmethod
    def __fade_in_characters_this_round(cls, _surface: ImageSurface, _start: int = 0) -> None: ...
    @classmethod
    def __fade_out_characters_last_round(cls, _surface: ImageSurface, _start: int = 0) -> None: ...
    @classmethod
    def update(cls, characterNameList: Sequence[str] | None) -> None: ...
    @classmethod
    def draw(cls, _surface: ImageSurface) -> None: ...

class AbstractVisualNovelPlayer(AbstractGameSystem, metaclass=ABCMeta):
    _content: Incomplete
    _black_bg: Incomplete
    _dialog_folder_path: str
    __background_image_name: str
    __background_image_surface: Incomplete
    _is_muted: bool
    _dialog_options_container: Incomplete
    _FONT_SIZE: Incomplete
    def __init__(self) -> None: ...
    def _get_dialog_box(self) -> AbstractDialogBox: ...
    def get_dialog_folder_location(self) -> str: ...
    def get_dialog_file_location(self, lang: str) -> str: ...
    def get_data_file_path(self) -> str: ...
    def get_default_lang(self) -> str: ...
    def _get_data_need_to_save(self) -> dict: ...
    def load_progress(self, _data: dict) -> None: ...
    def new(self, chapterType: str, chapterId: int, section: str, projectName: str | None = None, dialogId: str = 'head') -> None: ...
    def _load_content(self) -> None: ...
    def _update_background_image(self, image_name: str) -> None: ...
    def _update_scene(self, dialog_id: str) -> None: ...
    def update_language(self) -> None: ...
    def stop(self) -> None: ...
    def display_background_image(self, _surface: ImageSurface) -> None: ...
    def _get_dialog_options_container_ready(self) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class VisualNovelPlayer(AbstractVisualNovelPlayer, PauseMenuModuleForGameSystem):
    __CHOICE_TEXT: str
    __dialog_txt_system: Incomplete
    __buttons_container: Incomplete
    __is_showing_history: bool
    __history_bg_surface: Incomplete
    __history_text_surface: Incomplete
    __history_surface_local_y: int
    __history_back: Incomplete
    __disable_background_image_rendering: bool
    __dialog_options: Incomplete
    __is_fading_out: bool
    __has_reached_the_end: bool
    def __init__(self) -> None: ...
    def disable_basic_features(self) -> None: ...
    def enable_basic_features(self) -> None: ...
    def _get_data_need_to_save(self) -> dict: ...
    def _get_dialog_box(self) -> DialogBox: ...
    def _has_reached_the_end(self) -> bool: ...
    def _load_content(self) -> None: ...
    def load_progress(self, _data: dict) -> None: ...
    def new(self, chapterType: str, chapterId: int, section: str, projectName: str | None = None, dialogId: str = 'head') -> None: ...
    def _update_scene(self, dialog_id: str) -> None: ...
    def _update_sound_volume(self) -> None: ...
    def update_language(self) -> None: ...
    def continue_scene(self, dialog_id: str) -> None: ...
    def __go_to_next(self, _surface: ImageSurface) -> None: ...
    def __check_button_event(self, _surface: ImageSurface) -> bool: ...
    def play_cutscene(self, _surface: ImageSurface, fade_out_in_ms: int = 3000) -> None: ...
    def _fade(self, _surface: ImageSurface) -> None: ...
    def display_background_image(self, _surface: ImageSurface) -> None: ...
    def draw(self, _surface: ImageSurface) -> None: ...

class VisualNovelEditor(AbstractVisualNovelPlayer):
    __BACKGROUND_DESELECT_IMAGE: Final[StaticImage]
    __IS_BACKGROUND_DESELECT_IMAGE_INIT: bool
    __dialog_navigation_window: Incomplete
    __dialog_txt_system: Incomplete
    __buttons_ui_container: Incomplete
    __dialog_bgm_select: Incomplete
    __UIContainerRight_bg: Incomplete
    __UIContainerRight_npc: Incomplete
    __button_select_background: Incomplete
    __button_select_npc: Incomplete
    __no_save_warning: Incomplete
    __current_select_bg_name: str
    __current_select_bg_copy: Incomplete
    __dialog_section_selection: Incomplete
    def __init__(self) -> None: ...
    def _get_dialog_box(self) -> EditableDialogBox: ...
    __UIContainerRightImage: Incomplete
    __UIContainerRightButton: Incomplete
    __delete_npc_prompt: Incomplete
    def new(self, chapterType: str, chapterId: int, section: str, projectName: str | None = None, dialogId: str = 'head') -> None: ...
    def _get_data_need_to_save(self) -> dict: ...
    def _update_background_image(self, image_name: str) -> None: ...
    def _load_template(self) -> None: ...
    @staticmethod
    def _get_template() -> pyvns.dialogue_data_t: ...
    def _load_content(self) -> None: ...
    def __get_the_stuff_need_save(self) -> dict[str, dict[str, dict]]: ...
    def __update_ui(self) -> None: ...
    def _update_scene(self, dialog_id: str) -> None: ...
    def __add_dialog(self, dialogId: str) -> None: ...
    def __get_last_id(self) -> str: ...
    def __generate_a_new_recommended_key(self, index: int = 1) -> str: ...
    def __try_get_next_id(self, _surface: ImageSurface) -> str: ...
    _is_muted: Incomplete
    def draw(self, _surface: ImageSurface) -> None: ...

def create_new_project(dir_path: str, config_type: str = 'json') -> None: ...
