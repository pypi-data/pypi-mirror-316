from .byte import Byte
from .word import Word
from .state import State
from typing import List

invmatch = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

match = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x1, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x4, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x5, 0x9a, 0x7, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x9, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x0, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x2, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0xc, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0xb, 0xdb, 0xe0, 0x32, 0x3a, 0xa, 0x49, 0x6, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x8, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x3, 0xf6, 0xe, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0xd, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0xf, 0xb0, 0x54, 0xbb, 0x16
]

def Sbox(byte: Byte) -> Byte:
    # newByte = Byte(0)
    # c = Byte(99)
    # byte = byte.inverse()
    # for i in range(8):
    #     setbit = byte.get_bit(i) ^ byte.get_bit((i + 4) % 8) ^ byte.get_bit((i + 5) % 8) ^ byte.get_bit((i + 6) % 8) ^ byte.get_bit((i + 7) % 8) ^ c.get_bit(i)
    #     newByte.set_bit(i, setbit)
    # return newByte
    return Byte(match[byte.byte])

def inv_Sbox(byte: Byte) -> Byte:
    # for i in match:
    #     print(str(hex(i))[2:].zfill(2))
    # print(str(hex(cwbjk))[2:])
    return Byte(invmatch[byte.byte])


def subbytes(state:State) -> State:
    new_state = State([
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
    ])
    for i in range(4):
        for j in range(4):
            new_state.state[i][j] =Sbox(state.state[i][j])
    return new_state
def inv_subbytes(state:State) -> State:
    new_state = State([
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
    ])
    for i in range(4):
        for j in range(4):
            new_state.state[i][j] =inv_Sbox(state.state[i][j])
    return new_state

def shiftRows(state: State):

    new_state = State([
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
    ])
    for r in range(4):
        for c in range(4):
            new_state.state[r][c] = state.state[r][(c+r) % 4]
    return new_state

def inv_shiftRows(state: State):

    new_state = State([
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
        Word([Byte(0), Byte(0), Byte(0), Byte(0), ]),
    ])
    for r in range(4):
        for c in range(4):
            new_state.state[r][c] = state.state[r][(c-r) % 4]
    return new_state

def add_roundkey(state: State, key):
    words = state.to_word()
    new_words = [[]] * 4
    for c in range(4):
        new_word = [0] * 4
        for j in range(4):
            new_word[j] = words[c].word[j] + key[c].word[j]
        new_words[c] = Word(new_word)
    return State(new_words)


def mixcolumns(state: State):
    new_words = []
    mat = Word([Byte(2), Byte(1), Byte(1), Byte(3), ])
    for word in state.to_word():
        new_words.append(word.matmul(mat))
    return State(new_words)

def inv_mixcolumns(state: State):
    new_words = []
    mat = Word([Byte(0x0e), Byte(0x09), Byte(0x0d), Byte(0x0b)])
    for word in state.to_word():
        new_words.append(word.matmul(mat))
    return State(new_words)

def rotword(wor: Word):
    w = wor.word
    return Word([w[1], w[2], w[3], w[0]])

def subword(wor: Word):
    w = wor.word
    return Word([Sbox(w[0]), Sbox(w[1]), Sbox(w[2]), Sbox(w[3])])

if __name__ == "__main__":
    a = Byte(0xe2)
    print(Sbox(inv_Sbox(a)).byte==a.byte)
    key = [
        Word([Byte(0x54), Byte(0x68), Byte(0x61), Byte(0x74)]),
        Word([Byte(0x73), Byte(0x20), Byte(0x6D), Byte(0x79)]),
        Word([Byte(0x20), Byte(0x4B), Byte(0x75), Byte(0x6E)]),
        Word([Byte(0x67), Byte(0x20), Byte(0x46), Byte(0x75)]),
    ]

    state = State([
        Word([Byte(0x54), Byte(0x77), Byte(0x6F), Byte(0x20)]),
        Word([Byte(0x4F), Byte(0x6E), Byte(0x65), Byte(0x20)]),
        Word([Byte(0x4E), Byte(0x69), Byte(0x6E), Byte(0x65)]),
        Word([Byte(0x20), Byte(0x54), Byte(0x77), Byte(0x6F)]),
    ])


    print(add_roundkey(state, key, 0))

    word = Word([Byte(0x63), Byte(0x2f), Byte(0xaf), Byte(0xa2), ])
    mat = Word([Byte(2), Byte(1), Byte(1), Byte(3), ])
    print(shiftRows(state).to_word()[0].word)
    a = word.matmul(mat).word
    print(a)



