# Package description

[tool.poetry]
name = "gimie"
version = "0.7.2"
description = "Extract structured metadata from git repositories."
authors = ["Swiss Data Science Center <contact@datascience.ch>"]
license = "Apache-2.0"
homepage = "https://github.com/sdsc-ordes/gimie"
keywords = ["metadata", "git", "extraction", "linked-data"]
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]

# Dependency management

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
gitpython = ">=3.1.35"
PyDriller = "^2.5"
typer = "^0.7.0"
calamus = "^0.4.2"
requests = "^2.28.2"
python-dotenv = "^0.21.1"
python-dateutil = "^2.8.2"
spdx-license-list = "^3.22"
numpy = "^1.26.1"
pydantic = "^2.4.2"
scipy = "^1.11.3"
pyyaml = "^6.0.2"

[tool.poetry.group.dev.dependencies]
black = "^22.10.0"
coveralls = "^3.3.1"
pre-commit = "^3.0.0"
pytest = "^7.2.0"
pytest-cov = "^4.1.0"


[tool.poetry.group.doc.dependencies]
sphinx = "<7.0.0"
sphinx-click = "^4.4.0"
sphinxawesome-theme = "^4.1.0"
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.4.1"
myst-parser = "^1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
gimie = 'gimie.cli:app'


# Tooling configuration

[tool.black]
line-length = 79
target-version = ["py38", "py39"]

[tool.pytest.ini_options]
addopts = ["--doctest-modules", "--cov"]
testpaths = ["gimie", "tests"]

[tool.pyright]
reportMissingTypeStubs = false
reportUntypedBaseClass = false

[tool.git-cliff.changelog]
header = "Notable changes introduced in gimie releases are documented in this file\n\n"
body = """

{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        - *({{commit.scope}})* {{ commit.message }}
        {%- if commit.breaking %}
        {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
        {%- endif -%}
    {%- endfor -%}
    {%- for commit in commits %}
        {%- if commit.scope -%}
        {% else -%}
            - {{ commit.message }}
            {% if commit.breaking -%}
            {% raw %}  {% endraw %}- **BREAKING**: {{commit.breaking_description}}
            {% endif -%}
        {% endif -%}
    {% endfor -%}
    {% raw %}\n{% endraw %}\
{% endfor %}\n
"""
footer = "<!--generated by git-cliff -->"

[tool.git-cliff.git]
conventional_commits = true
filter_commits = true
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^(fix|bug)", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
]

commit_preprocessors = [
    { pattern = 'Merged PR #[0-9]: (.*)', replace = "$1" },
    { pattern = " +", replace = " " },
]
