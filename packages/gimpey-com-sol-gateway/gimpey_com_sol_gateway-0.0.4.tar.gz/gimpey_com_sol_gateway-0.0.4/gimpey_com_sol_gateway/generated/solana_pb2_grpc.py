# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import solana_pb2 as solana__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in solana_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SolanaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Drain = channel.unary_unary(
                '/solana.Solana/Drain',
                request_serializer=solana__pb2.DrainRequest.SerializeToString,
                response_deserializer=solana__pb2.DrainResponse.FromString,
                _registered_method=True)
        self.NoncedFastSend = channel.unary_unary(
                '/solana.Solana/NoncedFastSend',
                request_serializer=solana__pb2.NoncedFastSendRequest.SerializeToString,
                response_deserializer=solana__pb2.NoncedFastSendResponse.FromString,
                _registered_method=True)
        self.JitoPayload = channel.unary_unary(
                '/solana.Solana/JitoPayload',
                request_serializer=solana__pb2.JitoPayloadRequest.SerializeToString,
                response_deserializer=solana__pb2.JitoPayloadResponse.FromString,
                _registered_method=True)
        self.JitoSend = channel.unary_unary(
                '/solana.Solana/JitoSend',
                request_serializer=solana__pb2.JitoSendRequest.SerializeToString,
                response_deserializer=solana__pb2.JitoSendResponse.FromString,
                _registered_method=True)
        self.NextBlockSend = channel.unary_unary(
                '/solana.Solana/NextBlockSend',
                request_serializer=solana__pb2.NextBlockSendRequest.SerializeToString,
                response_deserializer=solana__pb2.NextBlockSendResponse.FromString,
                _registered_method=True)
        self.TemporalSend = channel.unary_unary(
                '/solana.Solana/TemporalSend',
                request_serializer=solana__pb2.TemporalSendRequest.SerializeToString,
                response_deserializer=solana__pb2.TemporalSendResponse.FromString,
                _registered_method=True)
        self.HeliusSend = channel.unary_unary(
                '/solana.Solana/HeliusSend',
                request_serializer=solana__pb2.HeliusSendRequest.SerializeToString,
                response_deserializer=solana__pb2.HeliusSendResponse.FromString,
                _registered_method=True)
        self.SendSol = channel.unary_unary(
                '/solana.Solana/SendSol',
                request_serializer=solana__pb2.SendSolRequest.SerializeToString,
                response_deserializer=solana__pb2.SendSolResponse.FromString,
                _registered_method=True)


class SolanaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Drain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NoncedFastSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JitoPayload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JitoSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextBlockSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TemporalSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeliusSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SolanaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Drain': grpc.unary_unary_rpc_method_handler(
                    servicer.Drain,
                    request_deserializer=solana__pb2.DrainRequest.FromString,
                    response_serializer=solana__pb2.DrainResponse.SerializeToString,
            ),
            'NoncedFastSend': grpc.unary_unary_rpc_method_handler(
                    servicer.NoncedFastSend,
                    request_deserializer=solana__pb2.NoncedFastSendRequest.FromString,
                    response_serializer=solana__pb2.NoncedFastSendResponse.SerializeToString,
            ),
            'JitoPayload': grpc.unary_unary_rpc_method_handler(
                    servicer.JitoPayload,
                    request_deserializer=solana__pb2.JitoPayloadRequest.FromString,
                    response_serializer=solana__pb2.JitoPayloadResponse.SerializeToString,
            ),
            'JitoSend': grpc.unary_unary_rpc_method_handler(
                    servicer.JitoSend,
                    request_deserializer=solana__pb2.JitoSendRequest.FromString,
                    response_serializer=solana__pb2.JitoSendResponse.SerializeToString,
            ),
            'NextBlockSend': grpc.unary_unary_rpc_method_handler(
                    servicer.NextBlockSend,
                    request_deserializer=solana__pb2.NextBlockSendRequest.FromString,
                    response_serializer=solana__pb2.NextBlockSendResponse.SerializeToString,
            ),
            'TemporalSend': grpc.unary_unary_rpc_method_handler(
                    servicer.TemporalSend,
                    request_deserializer=solana__pb2.TemporalSendRequest.FromString,
                    response_serializer=solana__pb2.TemporalSendResponse.SerializeToString,
            ),
            'HeliusSend': grpc.unary_unary_rpc_method_handler(
                    servicer.HeliusSend,
                    request_deserializer=solana__pb2.HeliusSendRequest.FromString,
                    response_serializer=solana__pb2.HeliusSendResponse.SerializeToString,
            ),
            'SendSol': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSol,
                    request_deserializer=solana__pb2.SendSolRequest.FromString,
                    response_serializer=solana__pb2.SendSolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'solana.Solana', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('solana.Solana', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Solana(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Drain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/Drain',
            solana__pb2.DrainRequest.SerializeToString,
            solana__pb2.DrainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NoncedFastSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/NoncedFastSend',
            solana__pb2.NoncedFastSendRequest.SerializeToString,
            solana__pb2.NoncedFastSendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JitoPayload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/JitoPayload',
            solana__pb2.JitoPayloadRequest.SerializeToString,
            solana__pb2.JitoPayloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JitoSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/JitoSend',
            solana__pb2.JitoSendRequest.SerializeToString,
            solana__pb2.JitoSendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NextBlockSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/NextBlockSend',
            solana__pb2.NextBlockSendRequest.SerializeToString,
            solana__pb2.NextBlockSendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TemporalSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/TemporalSend',
            solana__pb2.TemporalSendRequest.SerializeToString,
            solana__pb2.TemporalSendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HeliusSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/HeliusSend',
            solana__pb2.HeliusSendRequest.SerializeToString,
            solana__pb2.HeliusSendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendSol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/solana.Solana/SendSol',
            solana__pb2.SendSolRequest.SerializeToString,
            solana__pb2.SendSolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
