from sqlalchemy import String, Column, DateTime, Float, Integer,ForeignKey
from sqlalchemy.orm import relationship
from .sap_model import SapBonanzaBase as SBB

class JournalEntry(SBB):
    __tablename__ = 'sap_journal_entry'

    JdtNum = Column('JdtNum', Integer, primary_key=True)
    ReferenceDate = Column('ReferenceDate', DateTime)
    Memo = Column('Memo', String)
    Reference = Column('Reference', String)
    Reference2 = Column('Reference2', String)
    TransactionCode = Column('TransactionCode', String)
    ProjectCode = Column('ProjectCode', String)
    TaxDate = Column('TaxDate', DateTime)
    Indicator = Column('Indicator', String)
    UseAutoStorno = Column('UseAutoStorno', String)
    StornoDate = Column('StornoDate', DateTime)
    VatDate = Column('VatDate', DateTime)
    Series = Column('Series', Integer)
    StampTax = Column('StampTax', String)
    DueDate = Column('DueDate', DateTime)
    AutoVAT = Column('AutoVAT', String)
    Number = Column('Number', Integer)
    FolioNumber = Column('FolioNumber', String)
    FolioPrefixString = Column('FolioPrefixString', String)
    ReportEU = Column('ReportEU', String)
    Report347 = Column('Report347', String)
    Printed = Column('Printed', String)
    LocationCode = Column('LocationCode', String)
    OriginalJournal = Column('OriginalJournal', String)
    Original = Column('Original', Integer)
    BaseReference = Column('BaseReference', String)
    BlockDunningLetter = Column('BlockDunningLetter', String)
    AutomaticWT = Column('AutomaticWT', String)
    WTSum = Column('WTSum', Float)
    WTSumSC = Column('WTSumSC', Float)
    WTSumFC = Column('WTSumFC', Float)
    SignatureInputMessage = Column('SignatureInputMessage', String)
    SignatureDigest = Column('SignatureDigest', String)
    CertificationNumber = Column('CertificationNumber', String)
    PrivateKeyVersion = Column('PrivateKeyVersion', String)
    Corisptivi = Column('Corisptivi', String)
    Reference3 = Column('Reference3', String)
    DocumentType = Column('DocumentType', String)
    DeferredTax = Column('DeferredTax', String)
    BlanketAgreementNumber = Column('BlanketAgreementNumber', Integer)
    OperationCode = Column('OperationCode', String)
    ResidenceNumberType = Column('ResidenceNumberType', String)
    ECDPostingType = Column('ECDPostingType', String)
    ExposedTransNumber = Column('ExposedTransNumber', Integer)
    PointOfIssueCode = Column('PointOfIssueCode', String)
    Letter = Column('Letter', String)
    FolioNumberFrom = Column('FolioNumberFrom', Integer)
    FolioNumberTo = Column('FolioNumberTo', Integer)
    IsCostCenterTransfer = Column('IsCostCenterTransfer', String)
    ReportingSectionControlStatementVAT = Column('ReportingSectionControlStatementVAT', String)
    ExcludeFromTaxReportControlStatementVAT = Column('ExcludeFromTaxReportControlStatementVAT', String)
    AdjustTransaction = Column('AdjustTransaction', String)
    AttachmentEntry = Column('AttachmentEntry', Integer)

    # Relacionamento com JournalEntryLine
    journal_entry_lines = relationship("JournalEntryLine", back_populates="journal_entry")

    def __repr__(self):
        return f"<JournalEntry(jdt_num='{self.JdtNum}', memo='{self.Memo}', reference='{self.Reference}')>"
    

class JournalEntryLine(SBB):
    __tablename__ = 'sap_journal_entry_line'

    id = Column(Integer, primary_key=True, autoincrement=True)
    LineID = Column('LineID', Integer)
    AccountCode = Column('AccountCode', String)
    Debit = Column('Debit', Float)
    Credit = Column('Credit', Float)
    FCDebit = Column('FCDebit', Float)
    FCCredit = Column('FCCredit', Float)
    FCCurrency = Column('FCCurrency', String)
    DueDate = Column('DueDate', DateTime)
    ShortName = Column('ShortName', String)
    ContraAccount = Column('ContraAccount', String)
    LineMemo = Column('LineMemo', String)
    ReferenceDate1 = Column('ReferenceDate1', DateTime)
    ReferenceDate2 = Column('ReferenceDate2', DateTime)
    Reference1 = Column('Reference1', String)
    Reference2 = Column('Reference2', String)
    ProjectCode = Column('ProjectCode', String)
    CostingCode = Column('CostingCode', String)
    TaxDate = Column('TaxDate', DateTime)
    BaseSum = Column('BaseSum', Float)
    TaxGroup = Column('TaxGroup', String)
    DebitSys = Column('DebitSys', Float)
    CreditSys = Column('CreditSys', Float)
    VatDate = Column('VatDate', DateTime)
    VatLine = Column('VatLine', String)
    SystemBaseAmount = Column('SystemBaseAmount', Float)
    VatAmount = Column('VatAmount', Float)
    SystemVatAmount = Column('SystemVatAmount', Float)
    GrossValue = Column('GrossValue', Float)
    AdditionalReference = Column('AdditionalReference', String)
    CheckAbs = Column('CheckAbs', Integer)
    CostingCode2 = Column('CostingCode2', String)
    CostingCode3 = Column('CostingCode3', String)
    CostingCode4 = Column('CostingCode4', String)
    TaxCode = Column('TaxCode', String)
    TaxPostAccount = Column('TaxPostAccount', String)
    CostingCode5 = Column('CostingCode5', String)
    LocationCode = Column('LocationCode', String)
    ControlAccount = Column('ControlAccount', String)
    EqualizationTaxAmount = Column('EqualizationTaxAmount', Float)
    SystemEqualizationTaxAmount = Column('SystemEqualizationTaxAmount', Float)
    TotalTax = Column('TotalTax', Float)
    SystemTotalTax = Column('SystemTotalTax', Float)
    WTLiable = Column('WTLiable', String)
    WTRow = Column('WTRow', String)
    PaymentBlock = Column('PaymentBlock', String)
    BlockReason = Column('BlockReason', String)
    FederalTaxID = Column('FederalTaxID', String)
    BPLID = Column('BPLID', Integer)
    BPLName = Column('BPLName', String)
    VATRegNum = Column('VATRegNum', String)
    PaymentOrdered = Column('PaymentOrdered', String)
    ExposedTransNumber = Column('ExposedTransNumber', Integer)
    DocumentArray = Column('DocumentArray', Integer)
    DocumentLine = Column('DocumentLine', Integer)
    CostElementCode = Column('CostElementCode', String)

    # Relacionamento com JournalEntry
    journal_entry_id = Column(Integer, ForeignKey(f'{SBB.__table_args__.get("schema")}.sap_journal_entry.JdtNum'))
    journal_entry = relationship("JournalEntry", back_populates="journal_entry_lines")

    def __repr__(self):
        return f"<JournalEntryLine(line_id='{self.LineID}', account_code='{self.AccountCode}', debit='{self.Debit}', credit='{self.Credit}')>"