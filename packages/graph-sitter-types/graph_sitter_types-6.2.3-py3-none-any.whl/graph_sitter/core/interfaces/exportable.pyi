"""
This type stub file was generated by pyright.
"""

from typing import Generic, TYPE_CHECKING, TypeVar
from codegen.utils.codemod.codemod_writer_decorators import apidoc
from graph_sitter.core.autocommit import reader
from graph_sitter.core.interfaces.usable import Usable
from graph_sitter.enums import ImportType
from graph_sitter.core.export import Export
from graph_sitter.core.interfaces.editable import Editable

if TYPE_CHECKING:
    ...
Parent = TypeVar("Parent", bound="Editable")
@apidoc
class Exportable(Usable[Parent], Generic[Parent]):
    """An interface for any node object that can be exported
    eg. Class, class name,  top-level functions, imports
    """
    @property
    def is_exported(self) -> bool:
        """Returns True if the symbol is exported from the file it's defined in.

        This property determines whether the symbol has an associated export object, indicating
        that the symbol is exported from its defining file.

        Returns:
            bool: True if the symbol has an export object, False otherwise.
        """
        ...
    
    @property
    @reader(cache=False)
    def export(self) -> Export | None:
        """Returns the export object that exports this symbol.

        Retrieves the export object that is exporting this symbol by looking at incoming EXPORT edges in the CodebaseGraph.

        Args:
            None

        Returns:
            Export | None: The Export object that exports this symbol, or None if this symbol is not exported.
        """
        ...
    
    @property
    @reader(cache=False)
    def exported_name(self) -> str | None:
        """Retrieves the name under which a symbol is exported from its file.

        Returns the name that this symbol is exported as in its file. If the symbol is an export node, returns the node's name. If the symbol is not exported, returns None.

        Returns:
            str | None: The name the symbol is exported as, or None if the symbol is not exported.
        """
        ...
    
    @property
    @reader
    def is_reexported(self) -> bool:
        """Returns True if the symbol is re-exported from a file where it is not defined.

        Determines if this symbol is exported from a different file than where it was originally defined.
        A re-export occurs when a symbol is imported into a file and then exported from that same file.

        Returns:
            bool: True if the symbol is re-exported from a different file than where it was defined,
                False otherwise.
        """
        ...
    
    @reader
    def get_import_string(self, alias: str | None = ..., module: str | None = ..., import_type: ImportType = ..., is_type_import: bool = ...) -> str:
        """Returns the import string needed to import this symbol.

        Generates a string representing the import statement required to import this symbol from its module. This is an abstract method that must be implemented by subclasses.

        Args:
            alias (str | None): Optional alias to use when importing the symbol.
            module (str | None): Optional module name to import from. If not provided, uses the symbol's current module.
            import_type (ImportType): The type of import to generate. If WILDCARD, imports the entire module.
            is_type_import (bool): Whether this is a type-only import.

        Returns:
            str: The formatted import string (e.g. 'from module import symbol as alias').

        Raises:
            NotImplementedError: When called directly on the base class.
        """
        ...
    


