Metadata-Version: 2.1
Name: ipybox
Version: 0.1.3
Summary: Python code execution sandbox based on IPython and Docker
Home-page: https://github.com/gradion-ai/ipybox
License: Apache-2.0
Author: Martin Krasser
Author-email: martin@gradion.ai
Requires-Python: >=3.10,<3.13
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: aiodocker (>=0.23.0,<0.24.0)
Requires-Dist: aiofiles (>=24.1,<25.0)
Requires-Dist: aiohttp (>=3.10,<4.0)
Requires-Dist: pillow (>=11.0,<12.0)
Requires-Dist: tornado (>=6.4,<7.0)
Requires-Dist: typer (>=0.12.5,<0.13.0)
Description-Content-Type: text/markdown

# ipybox

`ipybox` is a lightweight, stateful and secure Python code execution sandbox built with [IPython](https://ipython.org/) and [Docker](https://www.docker.com/). Designed for AI agents that interact with their environment through code execution, it is also well-suited for general-purpose code execution. Fully open-source and free to use, ipybox is distributed under the Apache 2.0 license.

<p align="center">
  <img src="docs/img/logo.png" alt="logo">
</p>

## Features

- **Secure Execution**: Executes code in isolated Docker containers, preventing unauthorized access to the host system.
- **Stateful Execution**: Retains variable and session state across commands using IPython kernels.
- **Real-Time Output Streaming**: Streams execution outputs directly, enabling real-time feedback.
- **Enhanced Plotting Support**: Facilitates downloading plots created with Matplotlib and other libraries.
- **Flexible Dependency Management**: Supports installing and updating dependencies during runtime or at build time.
- **Resource Management**: Manages container lifecycle with built-in timeout and resource control mechanisms.
- **Reproducible Environments**: Provides a consistent execution setup across different systems to ensure reproducibility.

This project is in early beta, with active development of new features ongoing.

## Documentation

The official documentation is available [here](https://gradion-ai.github.io/ipybox/).

## Quickstart

Install `ipybox` Python package:

```bash
pip install ipybox
```

Build a `gradion-ai/ipybox` Docker image:

```bash
python -m ipybox build -t gradion-ai/ipybox
```

Print *Hello, world!* inside `ipybox`:

```python
from ipybox import ExecutionClient, ExecutionContainer

async with ExecutionContainer(tag="gradion-ai/ipybox") as container:
    async with ExecutionClient(port=container.port) as client:
        result = await client.execute("print('Hello, world!')")
        print(result.text)  # Hello, world!
```

## Development

Clone the repository:

```bash
git clone https://github.com/gradion-ai/ipybox.git
cd ipybox
```

Create a new Conda environment and activate it:

```bash
conda env create -f environment.yml
conda activate ipybox
```

Install dependencies with Poetry:

```bash
poetry install --with docs
```

Run tests:

```bash
pytest -s tests
```

