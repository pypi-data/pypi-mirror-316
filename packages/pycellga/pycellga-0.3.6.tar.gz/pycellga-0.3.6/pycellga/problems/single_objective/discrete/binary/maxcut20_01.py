from pycellga.problems.abstract_problem import AbstractProblem
from pycellga.common import GeneType

from typing import List

class Maxcut20_01(AbstractProblem):
    """
    Maximum Cut (MAXCUT) function implementation for optimization problems.

    The MAXCUT function evaluates the fitness of a binary partition of nodes based on edge weights.
    It is used to test optimization algorithms, particularly for maximum cut problems.

    Attributes
    ----------
    problema : list of list of float
        Adjacency matrix representing edge weights between nodes.

    Methods
    -------
    f(x: list) -> float
        Calculates the MAXCUT function value for a given list of binary variables.
    evaluate(x: list, out: dict) -> None
        Pymoo-compatible evaluation method for batch processing.
    """

    def __init__(self):
        """
        Initialize the MAXCUT problem with binary variables and adjacency matrix.
        """
        n_var = 20  # Number of binary variables (nodes)
        xl = 0  # Lower bound for binary variables
        xu = 1  # Upper bound for binary variables
        gen_type = GeneType.BINARY

        super().__init__(gen_type=gen_type, n_var=n_var, xl=xl, xu=xu)

        # Define adjacency matrix (20x20 matrix of edge weights)
        self.problema = [
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.359902,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.313702, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.848267, 0.000000, 0.000000, 0.000000, 0.287508, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.117489,
                0.000000, 0.000000, 0.000000, 0.000000, 0.190953, 0.000000, 0.000000, 0.000000, 0.000000, 0.916311],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.848267, 0.000000, 0.000000, 0.000000, 0.084579, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.721013, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.084579, 0.000000, 0.000000, 0.000000, 0.000000, 0.863363,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.032054],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.764415, 0.000000, 0.495863, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.287508, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.109939, 0.000000, 0.000000, 0.000000, 0.167750, 0.000000, 0.000000, 0.000000],
            [0.359902, 0.000000, 0.117489, 0.000000, 0.000000, 0.863363, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.928091, 0.000000, 0.000000, 0.118362, 0.000000, 0.000000, 0.969750],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.652776, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.764415, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.424253, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.109939, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.495863, 0.000000, 0.000000, 0.928091,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.190953, 0.000000, 0.721013, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.252964, 0.936165, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.652776, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.313702, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.167750, 0.118362,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.424253, 0.000000, 0.000000, 0.252964, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
                0.000000, 0.000000, 0.000000, 0.000000, 0.936165, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000],
            [0.000000, 0.000000, 0.916311, 0.000000, 0.000000, 0.032054, 0.000000, 0.000000, 0.000000, 0.969750,
                0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000]
        ]

    def f(self, x: List[int]) -> float:
        """
        Calculate the MAXCUT function value for a given list of binary variables.

        Parameters
        ----------
        x : list
            A list of binary variables representing node partitions.

        Returns
        -------
        float
            The MAXCUT function value representing the total weight of edges cut by the partition.
        """
        fitness = 0.0
        cols = len(self.problema)

        for i in range(cols - 1):
            for j in range(i + 1, cols):
                if x[i] != x[j]:  # Nodes are in different partitions
                    fitness += self.problema[i][j]

        return round(fitness, 6)

    def evaluate(self, x: List[int], out: dict, *args, **kwargs) -> None:
        """
        Evaluate function for compatibility with pymoo's optimizer.

        Parameters
        ----------
        x : numpy.ndarray
            Array of input variables.
        out : dict
            Dictionary to store the output fitness values.
        """
        out["F"] = self.f(x)
