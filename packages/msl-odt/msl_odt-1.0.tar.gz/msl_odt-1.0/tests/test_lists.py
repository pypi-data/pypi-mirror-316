"""
Test Module for Open Document (.odt) Lists example

This module contains tests to ensure that the Open Document files generated by
the `example_msl-odt_lists.py` script match the expected output file,
`example_msl-odt_lists.odt`, located in the `expected_outputs` directory.

The tests focus on the following aspects:
- The correct creation of `example_msl-odt_lists.odt` by running the
  `example_msl-odt_lists.py` script.
- Comparison of text content between the generated and expected files.
- Comparison of list items' counts and content between generated
  and expected files.

Setup Process:
--------------
The test module utilizes a pytest fixture to run the
`example_msl-odt_lists.py` script before any tests are executed.
This fixture:
- Runs the script to create `example_msl-odt_lists.odt`
  in the same directory as the script.
- Ensures the file has been created successfully.
- Cleans up by deleting the generated `example_msl-odt_lists.odt`
  after all tests have run.

Test Cases:
-----------
- test_list_items_exist: Asserts the list items exist in the expected file.
- test_list_items_generated: Asserts the generated file has list items.
- test_list_items_count: Asserts number of list items in both files is equal.
- test_list_items_content: Compares the content of list items in both files.

Usage:
------
Run the tests using pytest:
```bash
pytest path/to/your/test_lists.py
"""

import subprocess
from pathlib import Path
from inspect import currentframe
from os import environ
from odf.opendocument import load
from odf.text import P as Paragraph  # pylint: disable=no-name-in-module
from odf.text import List, ListItem
import pytest

# Directory paths
BASE_DIR = Path(__file__).resolve().parent
SCRIPT_DIR = BASE_DIR / "../src/msl/examples/odt"
EXPECTED_OUTPUTS_DIR = BASE_DIR / "expected_outputs"

# Test file creation script
SCRIPT_FILE = SCRIPT_DIR / "example_msl-odt_lists.py"
# Test file created
TEST_FILE = SCRIPT_DIR / "example_msl-odt_lists.odt"
# Expected output file
EXPECTED_FILE = EXPECTED_OUTPUTS_DIR / "example_msl-odt_lists.odt"

# Run the script to create example_msl-odt_lists.odt at the start


@pytest.fixture(scope="module", autouse=True)
def setup_test_file():
    """Fixture to set up the test environment and create the test file."""
    cleanup = True  # Flag for cleaning up created files

    try:
        # Copy the current environment and set PYTHONPATH using pathlib
        env = environ.copy()
        env["PYTHONPATH"] = str(BASE_DIR.parent / "src")
        subprocess.run(
            ["python", str(SCRIPT_FILE)],
            cwd=str(SCRIPT_DIR),
            env=env,
            check=True,
            text=True,
            capture_output=True
        )
    except subprocess.CalledProcessError as e:
        print("Subprocess failed with return code:", e.returncode)
        print("Output:", e.output)
        print("Error:", e.stderr)
        raise

    # Check that the file was created
    assert TEST_FILE.exists(), f"{TEST_FILE} does not exist."
    yield  # Cleanup occurs after all tests

    # Cleanup after all tests
    if TEST_FILE.exists() and cleanup:
        TEST_FILE.unlink()  # Delete the test file


def test_list_items_exist():
    """Check that the expected list items exist in the expected file."""
    test = currentframe().f_code.co_name
    if not EXPECTED_FILE.exists():
        pytest.skip(f"Skipping {test}: expected file not found.")
    # Load expected document
    doc2 = load(EXPECTED_FILE)

    # Check for list elements
    content2 = doc2.getElementsByType(List)
    assert content2, "No list elements in expected document."


def test_list_items_generated():
    """Check that the generated document has list items."""
    test = currentframe().f_code.co_name
    if not TEST_FILE.exists():
        pytest.skip(f"Skipping {test}: test file not found.")
    # Load generated document
    doc1 = load(TEST_FILE)

    # Check for list elements
    content1 = doc1.getElementsByType(List)
    assert content1, "No list elements in generated document."


def test_list_elements_count():
    """Compare the count of lists between generated and expected files."""
    test = currentframe().f_code.co_name
    if not TEST_FILE.exists():
        pytest.skip(f"Skipping {test}: test file not found.")
    if not EXPECTED_FILE.exists():
        pytest.skip(f"Skipping {test}: expected file not found.")

    # Load both documents
    doc1 = load(TEST_FILE)
    doc2 = load(EXPECTED_FILE)

    # Check number of list elements
    num_lists1 = len(doc1.getElementsByType(List))
    num_lists2 = len(doc2.getElementsByType(List))
    assert num_lists1 == num_lists2, (
        f"Different numbers of Lists. "
        f"Generated: {num_lists1} != Expected: {num_lists2}"
    )


def test_list_items_count():
    """Compare the number of items in each list between generated and expected files."""
    test = currentframe().f_code.co_name
    if not TEST_FILE.exists() or not EXPECTED_FILE.exists():
        pytest.skip(f"Skipping {test}: Test or expected file not found.")

    # Load both documents
    doc1 = load(TEST_FILE)
    doc2 = load(EXPECTED_FILE)

    # Get all lists from both documents
    lists1 = doc1.getElementsByType(List)
    lists2 = doc2.getElementsByType(List)

    # Check number of lists
    assert len(lists1) == len(lists2), (
        f"Number of lists do not match. Test: {len(lists1)} != Expected: {len(lists2)}"
    )

    for list_index, (list1, list2) in enumerate(zip(lists1, lists2), start=1):
        num_items1 = len(list1.getElementsByType(ListItem))
        num_items2 = len(list2.getElementsByType(ListItem))

        print(f"Comparing items in List {list_index} "
              f"Test: {num_items1} | Expected: {num_items2}")

        assert num_items1 == num_items2, (
            f"Item count mismatch in List {list_index}. "
            f"Test: {num_items1} != Expected: {num_items2}"
        )


def test_list_items_content():
    """Test to verify the content of each list item matches between generated and expected files."""
    if not TEST_FILE.exists() or not EXPECTED_FILE.exists():
        pytest.skip(f"Skipping {currentframe().f_code.co_name}: "
                    "Test or expected file not found.")

    # Load both documents
    doc1 = load(TEST_FILE)
    doc2 = load(EXPECTED_FILE)

    # Get all lists from both documents
    lists1 = doc1.getElementsByType(List)
    lists2 = doc2.getElementsByType(List)

    # Check number of lists
    assert len(lists1) == len(lists2), (
        f"Number of lists do not match. Test: {len(lists1)} != Expected: {len(lists2)}"
    )

    for list_index, (list1, list2) in enumerate(zip(lists1, lists2), start=1):
        items1 = list1.getElementsByType(ListItem)
        items2 = list2.getElementsByType(ListItem)

        # Check number of items
        assert len(items1) == len(items2), (
            f"Item count mismatch in List {list_index}. "
            f"Generated: {len(items1)} != Expected: {len(items2)}"
        )

        # Compare text content of each list item
        for item_index, (item1, item2) in enumerate(zip(items1, items2), start=1):
            # Extract text from the Paragraph element within each ListItem
            # by joining the data from text nodes
            text1 = ''.join(
                node.data for node in
                    item1.getElementsByType(Paragraph)[0].childNodes
                    if node.nodeType == node.TEXT_NODE) \
                if item1.getElementsByType(Paragraph) else ""
            text2 = ''.join(
                node.data for node in
                    item2.getElementsByType(Paragraph)[0].childNodes
                    if node.nodeType == node.TEXT_NODE) \
                if item2.getElementsByType(Paragraph) else ""
            # Print the contents of the list items for debugging
            print(f"Comparing List {list_index}.{item_index}. "
                  f"Test: '{text1}' | Expected: '{text2}'")

            assert text1 == text2, (
                f"Text content mismatch in List {list_index}.{item_index}. "
                f"Generated: '{text1}' != Expected: '{text2}'"
            )
