"""
Test Module for Open Document (.odt) examples

This module contains tests to ensure that the Open Document files generated by
the `example_msl-odt_<TYPE_OF_EXAMPLE>.py` script match the expected output
files, `example_msl-odt_<TYPE_OF_EXAMPLE>.odt`, located in `expected_outputs`
directory.


The tests focus on the following aspects:
- The correct creation of `example_msl-odt_<TYPE_OF_EXAMPLE>.odt` files by
  running the `example_msl-odt_<TYPE_OF_EXAMPLE>.py` scripts.
- Comparison of number of text elements in the generated and expected files.
- Comparison of the text content between the generated and expected files.
- Verification of metadata (title and creator) between the two files.

Setup Process:
--------------
The test module utilises a pytest fixture to run the
`example_msl-odt_<TYPE_OF_EXAMPLE>.py` script before any tests are executed.
This fixture:
- Runs the script to create `example_msl-odt_<TYPE_OF_EXAMPLE>.odt`
  in the same directory as the script.
- Ensures the file has been created successfully.
- Cleans up by deleting the generated `example_msl-odt_<TYPE_OF_EXAMPLE>.odt`
  after all tests have run.

Test Cases:
-----------
- test_text_elements_count: Asserts that the number of text elements in the
  generated and expected files are the same.
- test_text_content_equality: Compares the content of corresponding text
  elements in both files and asserts that they are identical.
- test_metadata: Validates that the title and creator metadata in both files
  match.

The module uses a class to parametrise the tests so they can be run on multiple
example files without needing to duplicate the tests in multiple files.

Usage:
------
Run the tests using pytest:
```bash
pytest path/to/your/test_file.py
"""

import subprocess
from pathlib import Path
from inspect import currentframe
from os import environ
from odf.opendocument import load  # pylint: disable=no-name-in-module
from odf.text import P as Paragraph  # pylint: disable=no-name-in-module
from odf.meta import InitialCreator, UserDefined
import pytest

# Directory paths
BASE_DIR = Path(__file__).resolve().parent
SCRIPT_DIR = BASE_DIR / "../src/msl/examples/odt"
EXPECTED_OUTPUTS_DIR = BASE_DIR / "expected_outputs"

# List of example types
EXAMPLE_TYPES = ["introduction", "math",
                 "figures", "tables", "lists",
                 "append"]


@pytest.fixture(scope="module", autouse=True)
def setup_test_files():
    """Fixture to set up test files by running the creation scripts."""
    cleanup = True  # Set to True to delete created .odt files when finished

    for example_type in EXAMPLE_TYPES:
        script_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.py"
        test_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.odt"

        # Run the example script with the modified environment
        env = environ.copy()
        env["PYTHONPATH"] = str(BASE_DIR.parent / "src")
        try:
            subprocess.run(
                ["python", str(script_file)],
                cwd=str(SCRIPT_DIR),
                env=env,
                check=True,
                text=True,
                capture_output=True
            )
        except subprocess.CalledProcessError as e:
            print(f"Script execution failed: {e.stderr}")
            raise RuntimeError(f"Failed to execute {script_file}") from e

        assert test_file.exists(), f"{test_file} does not exist."

    # Cleanup after tests if enabled
    yield
    if cleanup:
        for example_type in EXAMPLE_TYPES:
            test_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.odt"
            if test_file.exists():
                test_file.unlink()


@pytest.mark.parametrize("example_type", EXAMPLE_TYPES)
class TestOdtFiles:
    """Tests for verifying contents of generated .odt files against expected."""

    def test_text_elements_exist(self, example_type: str):
        """Check that paragraph elements exist in the expected file."""
        test = currentframe().f_code.co_name
        expected_file = EXPECTED_OUTPUTS_DIR / f"example_msl-odt_{example_type}.odt"

        if not expected_file.exists():
            pytest.skip(f"Skipping {test}: expected file not found.")

        doc = load(expected_file)
        content = doc.getElementsByType(Paragraph)
        assert content, "No paragraph elements in golden document."

    def test_text_elements_generated(self, example_type: str):
        """Check that paragraph elements exist in the generated test file."""
        test = currentframe().f_code.co_name
        test_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.odt"

        if not test_file.exists():
            pytest.skip(f"Skipping {test}: test file not found.")

        doc = load(test_file)
        content = doc.getElementsByType(Paragraph)
        assert content, "No paragraph elements in generated document."

    def test_text_elements_count(self, example_type: str):
        """Verify that the number of paragraphs matches in test and expected files."""
        test = currentframe().f_code.co_name
        test_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.odt"
        expected_file = EXPECTED_OUTPUTS_DIR / f"example_msl-odt_{example_type}.odt"

        if not test_file.exists() or not expected_file.exists():
            pytest.skip(f"Skipping {test}: missing test or expected file.")

        doc_test = load(test_file)
        doc_expected = load(expected_file)
        num_para_test = len(doc_test.getElementsByType(Paragraph))
        num_para_expected = len(doc_expected.getElementsByType(Paragraph))
        print(f"Paragraphs in example_msl-odt_{example_type}.odt "
            f"Test: {num_para_test}, Expected: {num_para_expected}")

        assert num_para_test == num_para_expected, (
            f"Different numbers of Paragraphs: "
            f"Test: {num_para_test} != Expected: {num_para_expected}"
        )

    def test_text_content_equality(self, example_type: str):
        """Compare text content of paragraphs in test and expected files."""
        test = currentframe().f_code.co_name
        test_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.odt"
        expected_file = EXPECTED_OUTPUTS_DIR / f"example_msl-odt_{example_type}.odt"

        if not test_file.exists() or not expected_file.exists():
            pytest.skip(f"Skipping {test}: missing test or expected file.")

        doc_test = load(test_file)
        doc_expected = load(expected_file)
        content_test = doc_test.getElementsByType(Paragraph)
        content_expected = doc_expected.getElementsByType(Paragraph)

        if len(content_test) != len(content_expected):
            pytest.skip(f"Skipping {test}: files are different in structure.")

        for elem_test, elem_expected in zip(content_test, content_expected):
            text_test = ''.join(
                node.data for node in elem_test.childNodes
                if node.nodeType == node.TEXT_NODE
            )
            text_expected = ''.join(
                node.data for node in elem_expected.childNodes
                if node.nodeType == node.TEXT_NODE
            )
            assert text_test == text_expected, (
                f"Text content differs. Test: {text_test} != "
                f"Expected: {text_expected}"
            )


# At present odt puts the following metadata into the file:
#     InitialCreator: "msl-odt"
#     CreationDate: creation datetime in UTC with minute resolution
#     UserDefined: name = Title, text = document name


    def test_metadata_creator(self, example_type: str):
        """Check that InitialCreator metadata matches in test and expected files."""
        test = currentframe().f_code.co_name
        test_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.odt"
        expected_file = EXPECTED_OUTPUTS_DIR / f"example_msl-odt_{example_type}.odt"

        if not test_file.exists() or not expected_file.exists():
            pytest.skip(f"Skipping {test}: missing test or expected file.")

        # Load both documents
        doc_test = load(test_file)
        doc_expected = load(expected_file)

        # Retrieve creator metadata
        creator_test = doc_test.meta.getElementsByType(InitialCreator)
        creator_expected = doc_expected.meta.getElementsByType(InitialCreator)

        # Extract text
        creator_text_test = creator_test[0].firstChild.data if creator_test else ""
        creator_text_expected = creator_expected[0].firstChild.data if creator_expected else ""
        assert creator_text_test == creator_text_expected, (
            "Creator metadata fields do not match. "
            f"Test: {creator_text_test} != Expected: {creator_text_expected}"
        )

    def test_metadata_title(self, example_type: str):
        """Check that Title metadata matches in test and expected files."""
        test = currentframe().f_code.co_name
        test_file = SCRIPT_DIR / f"example_msl-odt_{example_type}.odt"
        expected_file = EXPECTED_OUTPUTS_DIR / f"example_msl-odt_{example_type}.odt"

        if not test_file.exists() or not expected_file.exists():
            pytest.skip(f"Skipping {test}: missing test or expected file.")

        # Load both documents
        doc_test = load(test_file)
        doc_expected = load(expected_file)

        # Locate the title metadata stored as UserDefined
        title_test = next((elem for elem in doc_test.meta.getElementsByType(UserDefined)
                           if elem.getAttribute("name") == "Title"), None)
        title_expected = next((elem for elem in doc_expected.meta.getElementsByType(UserDefined)
                               if elem.getAttribute("name") == "Title"), None)

        # Compare the titles
        title_text_test = title_test.firstChild.data \
            if title_test and title_test.firstChild else ""
        title_text_expected = title_expected.firstChild.data \
            if title_expected and title_expected.firstChild else ""
        assert title_text_test == title_text_expected, (
            "Title metadata fields do not match. "
            f"Test: {title_text_test} != Expected: {title_text_expected}"
        )
