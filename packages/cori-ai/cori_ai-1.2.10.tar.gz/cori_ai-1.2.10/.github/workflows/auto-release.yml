name: Auto Ship Cori AI

on:
  push:
    branches:
      - sudo

jobs:
  # Run tests
  tests:
    runs-on: ubuntu-latest
    container:
      image: python:3.12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run BASIC tests
        run: |
          python -m unittest discover -s tests -p 'test_*.py'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m unittest discover -s cori_ai/tests -p 'test_*.py'

  
  release:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cori Auth Step
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.CORI_APP_ID }}
          private-key: ${{ secrets.CORI_APP_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install names_generator

      - name: Generate Dockerlike release name
        id: dockerlike-release-name
        run: |
          DOCKERLIKE_RELEASE_NAME=$(python -c "from names_generator import generate_name; print(generate_name())")
          echo "DOCKERLIKE_RELEASE_NAME=${DOCKERLIKE_RELEASE_NAME}" >> $GITHUB_ENV

      - name: Get latest version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Increment patch version
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Get commits
        id: get_commits
        shell: sh
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS=$(git log --oneline --no-merges --pretty=format:"%s" ${LAST_TAG}..HEAD)
          COMMITS=$(echo "$COMMITS" | tr '\n' ';')
          echo "ALL_COMMITS=$COMMITS" >> $GITHUB_ENV

      - name: Generate Release notes
        id: generate-release-notes
        shell: sh
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          DOCKERLIKE_RELEASE_NAME: ${{ env.DOCKERLIKE_RELEASE_NAME }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
          COMMITS: ${{ env.ALL_COMMITS }}
        run: |
          RELEASE_NOTES=$(curl -X POST \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [
                {
                  \"role\": \"system\",
                  \"content\": \"You are a helpful assistant that generates release notes for a software project. The user will provide a list of commits since the last release, and you will generate a summary of the changes in a way that is easy to understand and use for the release notes.\"
                },
                {
                  \"role\": \"user\",
                  \"content\": \"Here are the commits since the last release: $COMMITS; Repo: $GITHUB_REPOSITORY; Release name: $DOCKERLIKE_RELEASE_NAME; Version: $NEW_VERSION\"
                }
              ]
            }" \
            "$OPENAI_BASE_URL/chat/completions" | jq '.choices[0].message.content')
          if [ -z "$RELEASE_NOTES" ]; then
            echo "RELEASE_NOTES=No release notes generated" >> $GITHUB_OUTPUT
          else
            RELEASE_NOTES=$(echo "$RELEASE_NOTES" | tr -d '"') # remove quotes
            RELEASE_NOTES=$(echo "$RELEASE_NOTES" | tr -d '\n') # remove newlines
            RELEASE_NOTES=$(echo "$RELEASE_NOTES" | tr -d '\r') # remove carriage returns
            echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
          DOCKERLIKE_RELEASE_NAME: ${{ env.DOCKERLIKE_RELEASE_NAME }}
          RELEASE_NOTES: ${{ steps.generate-release-notes.outputs.RELEASE_NOTES }}
        run: |
          gh release create ${NEW_VERSION} \
            --title "${DOCKERLIKE_RELEASE_NAME}" \
            --notes "${RELEASE_NOTES}" \
            --target sudo
