name: Auto Ship Cori AI

on:
  push:
    branches:
      - sudo

jobs:
  # Run tests
  tests:
    runs-on: ubuntu-latest
    container:
      image: python:3.12
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run BASIC tests
        run: |
          python -m unittest discover -s tests -p 'test_*.py'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m unittest discover -s cori_ai/tests -p 'test_*.py'

  
  release:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cori Auth Step
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.CORI_APP_ID }}
          private-key: ${{ secrets.CORI_APP_PRIVATE_KEY }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install names_generator

      - name: Generate Dockerlike release name
        id: dockerlike-release-name
        run: |
          DOCKERLIKE_RELEASE_NAME=$(python -c "from names_generator import generate_name; print(generate_name())")
          echo "DOCKERLIKE_RELEASE_NAME=${DOCKERLIKE_RELEASE_NAME}" >> $GITHUB_ENV

      - name: Get latest version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Increment patch version
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          NEW_VERSION: ${{ env.NEW_VERSION }}
          DOCKERLIKE_RELEASE_NAME: ${{ env.DOCKERLIKE_RELEASE_NAME }}
        run: |
          gh release create ${NEW_VERSION} \
            --title "${DOCKERLIKE_RELEASE_NAME}" \
            --notes "Let's ship this Cori AI release!
             ðŸš€ Changelogs here: https://cori.theboring.name/changelogs" \
            --target sudo

  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine

      - name: Update version
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Extract version from git tag
          # get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Update versions in files
          sed -i "s/version = \".*\"/version = \"${LATEST_TAG}\"/" pyproject.toml

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
