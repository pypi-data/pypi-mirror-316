Metadata-Version: 2.1
Name: tensorlink
Version: 0.1.1
Summary: Tensorlink is a library designed to simplify the scaling of PyTorch model training and inference, offering tools to easily distribute models across a network of peers and share computational resources both locally and globally.
Home-page: https://smartnodes.ca/tensorlink
Author: Smartnodes Lab
Author-email: smartnodes-lab@proton.me
License: MIT
Project-URL: Documentation, https://smartnodes.ca/docs
Project-URL: Source, https://github.com/smartnodes-lab/tensorlink
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: Unix
Requires-Python: >=3.11.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohappyeyeballs==2.4.3
Requires-Dist: aiohttp==3.10.10
Requires-Dist: aiosignal==1.3.1
Requires-Dist: annotated-types==0.7.0
Requires-Dist: async-timeout==4.0.3
Requires-Dist: attrs==24.2.0
Requires-Dist: bitarray==2.9.3
Requires-Dist: blinker==1.8.2
Requires-Dist: build==1.2.2.post1
Requires-Dist: certifi==2024.8.30
Requires-Dist: cffi==1.17.1
Requires-Dist: charset-normalizer==3.4.0
Requires-Dist: ckzg==2.0.1
Requires-Dist: click==8.1.7
Requires-Dist: contourpy==1.3.0
Requires-Dist: cryptography==43.0.1
Requires-Dist: cycler==0.12.1
Requires-Dist: cytoolz==1.0.0
Requires-Dist: datasets==3.0.1
Requires-Dist: dill==0.3.8
Requires-Dist: eth-account==0.13.4
Requires-Dist: eth-hash==0.7.0
Requires-Dist: eth-keyfile==0.8.1
Requires-Dist: eth-keys==0.5.1
Requires-Dist: eth-rlp==2.1.0
Requires-Dist: eth-typing==5.0.0
Requires-Dist: eth-utils==5.0.0
Requires-Dist: eth-abi==5.1.0
Requires-Dist: filelock==3.16.1
Requires-Dist: findimports==2.5.1
Requires-Dist: Flask==3.0.3
Requires-Dist: Flask-Cors==5.0.0
Requires-Dist: fonttools==4.54.1
Requires-Dist: frozenlist==1.4.1
Requires-Dist: fsspec==2024.6.1
Requires-Dist: graphviz==0.20.3
Requires-Dist: hexbytes==1.2.1
Requires-Dist: huggingface-hub==0.25.2
Requires-Dist: idna==3.10
Requires-Dist: importlib-metadata==8.5.0
Requires-Dist: importlib-resources==6.4.5
Requires-Dist: itsdangerous==2.2.0
Requires-Dist: Jinja2==3.1.4
Requires-Dist: kiwisolver==1.4.7
Requires-Dist: MarkupSafe==3.0.1
Requires-Dist: matplotlib==3.9.2
Requires-Dist: miniupnpc==2.2.8
Requires-Dist: mpmath==1.3.0
Requires-Dist: multidict==6.1.0
Requires-Dist: multiprocess==0.70.16
Requires-Dist: networkx==3.2.1
Requires-Dist: numpy==2.0.2
Requires-Dist: packaging==24.1
Requires-Dist: pandas==2.2.3
Requires-Dist: parsimonious==0.10.0
Requires-Dist: pillow==10.4.0
Requires-Dist: propcache==0.2.0
Requires-Dist: pyarrow==17.0.0
Requires-Dist: pybind11==2.13.6
Requires-Dist: pycparser==2.22
Requires-Dist: pycryptodome==3.21.0
Requires-Dist: pydantic==2.9.2
Requires-Dist: pydantic-core==2.23.4
Requires-Dist: pyparsing==3.2.0
Requires-Dist: pyproject-hooks==1.2.0
Requires-Dist: python-dateutil==2.9.0.post0
Requires-Dist: python-dotenv==1.0.1
Requires-Dist: pytz==2024.2
Requires-Dist: pyunormalize==16.0.0
Requires-Dist: PyYAML==6.0.2
Requires-Dist: regex==2024.9.11
Requires-Dist: requests==2.32.3
Requires-Dist: rlp==4.0.1
Requires-Dist: safetensors==0.4.5
Requires-Dist: six==1.16.0
Requires-Dist: sympy==1.13.3
Requires-Dist: tokenizers==0.20.1
Requires-Dist: tomli==2.0.2
Requires-Dist: toolz==1.0.0
Requires-Dist: torch==2.4.1
Requires-Dist: torchviz==0.0.2
Requires-Dist: tqdm==4.66.5
Requires-Dist: transformers==4.45.2
Requires-Dist: types-requests==2.32.0.20240914
Requires-Dist: typing-extensions==4.12.2
Requires-Dist: tzdata==2024.2
Requires-Dist: urllib3==2.2.3
Requires-Dist: web3==7.3.0
Requires-Dist: websockets==13.1
Requires-Dist: Werkzeug==3.0.4
Requires-Dist: xxhash==3.5.0
Requires-Dist: yarl==1.15.1
Requires-Dist: zipp==3.20.2

# Tensorlink
![Static Badge](https://img.shields.io/badge/v0.1.0-Tensorlink-pink?logo=) ![License](https://img.shields.io/badge/License-MIT-blue.svg) ![GitHub Repo stars](https://img.shields.io/github/stars/smartnodes-lab/tensorlink?style=social) 
<!-- ![GitHub all releases](https://img.shields.io/github/downloads/smartnodes-lab/tensorlink/total) -->

**Tensorlink** is a library designed to simplify the scaling of PyTorch model training and inference, offering tools 
to easily distribute models across a network of peers and share computational resources both locally and globally.

## Plug-and-Play, Peer-to-Peer Neural Network Scaling for PyTorch

Tensorlink is a versatile framework designed to facilitate neural network offloading and acceleration within PyTorch, a 
leading machine learning framework in Python. Tensorlink offers a straightforward, plug-and-play solution that parses 
and distributes neural networks in PyTorch with ease, including support for third-party models utilized in libraries 
such as Hugging Face. This approach enables the training of large models from consumer hardware, eliminating the need 
for cloud services for certain ML applications. Tensorlink leverages techniques such as automated model parsing and 
parallelism to simplify and enhance the training process, making state-of-the-art models accessible to a wider audience.

For a deeper dive into Tensorlink's features, capabilities, and underlying principles, please refer to the 
[lightpaper](docs/Lightpaper.md) and [documentation](https://smartnodes.ca/docs).

### Key features
By implementing wrappers for PyTorch's `Module` and `Optimizer` objects, Tensorlink integrates with existing codebases, 
preserving model workflows while seamlessly harnessing distributed resources. Tensorlink enables individuals and 
organizations to collaborate, share resources, and scale models dynamicallyâ€”bringing the power of distributed training 
to a broader community.

- `DistributedModel`: A flexible wrapper for `torch.nn.Module` designed to simplify distributed machine learning workflows.
    - Provides methods for parsing, distributing, and integrating PyTorch models across devices.
    - Supports standard model operations (e.g., `forward`, `backward`, `parameters`).
    - Automatically manages partitioning and synchronization of model components across nodes.
    - Seamlessly supports both data and model parallelism.

- `DistributedOptimizer`: An optimizer wrapper built for `DistributedModel` to ensure synchronized parameter updates across distributed nodes.
   - Compatible with native PyTorch and Hugging Face optimizers.

- Nodes Types (`tensorlink.nodes`): Tensorlink provides three key node types to enable robust distributed machine learning workflows:
   - `UserNode`: Handles job submissions and result retrieval, facilitating interaction with `DistributedModel` for training and inference. Required for public network participation.
   - `WorkerNode`: Manages active jobs, connections to users, and processes data for model execution.
   - `ValidatorNode`: Secures and coordinates training tasks and node interactions, ensuring job integrity on the public network.
   
- **Public Computational Resources**: By default, Tensorlink nodes are integrated with a smart contract-secured network, enabling:
   - Incentive mechanisms to reward contributors for sharing computational power.
   - Access to both free and paid machine learning resources.
   - Configuration options for private networks, supporting local or closed group machine learning workflows.

### Limitations in this Release

- Bugs, performance issues, and limited network availability are expected.
- **Model Support**: Tensorlink currently supports scriptable PyTorch models (`torch.jit.script`) and select open-source 
Hugging Face models not requiring API-keys.
   - **Why?** Security and serialization constraints for un-trusted P2P interactions. We're actively working on custom serialization methods to support all PyTorch model types. Feedback and contributions to accelerate this effort are welcome!
- **Job Constraints**: 
    - **Model Size**: Due to limited worker availability in this initial release, public jobs are best suited for models under ~1 billion parameters.
        - **Future Plans**: We are actively expanding network capacity, and the next update (expected soon) will increase this limit, enabling support for larger models and more complex workflows.
    - **Worker Allocation**: Public jobs are currently limited to one worker. Data parallel acceleration is temporarily disabled for public tasks but can be enabled for local jobs or private clusters.
- Internet latency and connection speeds can significantly impact the performance of public jobs, which may become problematic for certain training and inference scenarios.


## Training and Inference with Tensorlink

### Installation

Before installing Tensorlink, ensure you meet the following requirements:

- UNIX/MacOS (Windows support coming soon...)
- Python 3.11.9+
- PyTorch 2.3+ (ensure model compatibility with torch version)

While we aim to reduce version requirements, Python 3.11.9+ and a UNIX-based OS are required for stable utilization. 
You can install Tensorlink using pip.

```bash
pip install tensorlink
```

This command will download and install Tensorlink along with its dependencies. If you're using a virtual environment 
(recommended), ensure it's activated before running the installation command.

*Tensorlink aims to be compatible with all models and optimizers built with of PyTorch, however some compatibility 
issues can be expected with the pre-alpha release.* 

To get started you must request a job. Requesting a job will 
provide you with a distributed model and optimizer objects. The optimizer must be instantiated with kwargs after the 
request of a job, leaving out model parameters. When requesting a job, ensure that the request follows the 
instantiation of your model and precedes the training segment of your code:

```python
from tensorlink import UserNode
from transformers import AutoModelForCausalLM
from torch.optim import AdamW

# Initialize tokenizer, model, optimizer, and loss function
model = AutoModelForCausalLM.from_pretrained("bert-base-uncased")

# Create a Tensorlink user node instance, and request a job with your model
user = UserNode()
distributed_model, distributed_optimizer = user.create_distributed_model(
      model=model,
      training=True,
      optimizer_type=AdamW,
)
distributed_optimizer(lr=5e-5) # Instantiate optimizer without specifying parameters
```

Once the job request is created, you'll be successfully connected to Tensorlink. You can now proceed with training. 
Hereâ€™s an example of a training loop that uses the distributed model:

```python
from torch.utils.data import DataLoader

# Training loop
epochs = 10
for epoch in range(epochs):
    # Iterating over tokenized dataset. See tests/ml/useful_scripts.py
    for batch in DataLoader(tokenized_dataset["train"], batch_size=8):
        b_input_ids = batch['input_ids'].to(device)
        b_input_mask = batch['attention_mask'].to(device)
        b_labels = batch['label'].to(device)

        distributed_optimizer.zero_grad()
        outputs = distributed_model(b_input_ids, attention_mask=b_input_mask, labels=b_labels)
        loss = outputs.loss
        loss.backward()
        distributed_optimizer.step()

    print(f"Epoch {epoch + 1}/{epochs} completed")
```

Training progress and network information will be trackable through the Tensorlink/Smartnodes dashboard. 
This feature is a work in progress and is currently not available.

## Running a Node

Tensorlink can be configured for use on local or private networks, but its full potential lies in the public network, 
where individuals from around the world contribute computational resources. By running a Worker node, you can:

- **Support Innovation:** Contribute to building a global decentralized compute network.
- **Earn Rewards:** Provide resources and receive Smartnodes tokens (SNO) for your contributions.
- **Join the Community:** Be part of an open-source project aiming to redefine distributed computing.


### How to Get Started
- Check the **Releases** section on GitHub for binaries or scripts to set up a node quickly and easily.
- Follow the included documentation to configure your node and start contributing to the Tensorlink network.

## Contributing

We welcome contributions from the community to help us build and enhance Tensorlink! There are many ways to get involved:

- **Create Issues**: If you encounter bugs, have feature requests, or suggestions for improvement, please create an issue on our GitHub repository.
- **Submit Pull Requests**: Feel free to fork the repository, make changes, and submit a pull request with improvements or fixes.
- **Join the Discussion**: Reach out to us through GitHub discussions or contact us directly if you want to collaborate on specific features.

We need more people to help us refine Tensorlink and make it the best possible tool for decentralized neural network training. Your contributions and insights can make a significant impact!

## Donate

If you would like to support our work, consider buying us a coffee! Your contributions help us continue developing and improving Tensorlink.
[![Buy Me a Coffee](https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png)](https://www.buymeacoffee.com/smartnodes)
