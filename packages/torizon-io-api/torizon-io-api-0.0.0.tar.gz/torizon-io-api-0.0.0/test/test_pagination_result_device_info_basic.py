# coding: utf-8

"""
    Torizon OTA

     This API is rate limited and will return the following headers for each API call.    - X-RateLimit-Limit - The total number of requests allowed within a time period   - X-RateLimit-Remaining - The total number of requests still allowed until the end of the rate limiting period   - X-RateLimit-Reset - The number of seconds until the limit is fully reset  In addition, if an API client is rate limited, it will receive a HTTP 420 response with the following header:     - Retry-After - The number of seconds to wait until this request is allowed  

    The version of the OpenAPI document: 2.0-Beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from torizon_io_api.models.pagination_result_device_info_basic import PaginationResultDeviceInfoBasic

class TestPaginationResultDeviceInfoBasic(unittest.TestCase):
    """PaginationResultDeviceInfoBasic unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginationResultDeviceInfoBasic:
        """Test PaginationResultDeviceInfoBasic
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginationResultDeviceInfoBasic`
        """
        model = PaginationResultDeviceInfoBasic()
        if include_optional:
            return PaginationResultDeviceInfoBasic(
                values = [
                    torizon_io_api.models.device_info_basic.DeviceInfoBasic(
                        device_uuid = '', 
                        device_name = '', 
                        device_id = '', 
                        last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        activated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        device_status = 'NotSeen', 
                        notes = '', 
                        attributes = {
                            'key' : ''
                            }, 
                        hibernated = True, )
                    ],
                total = 56,
                offset = 56,
                limit = 56
            )
        else:
            return PaginationResultDeviceInfoBasic(
                total = 56,
                offset = 56,
                limit = 56,
        )
        """

    def testPaginationResultDeviceInfoBasic(self):
        """Test PaginationResultDeviceInfoBasic"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
