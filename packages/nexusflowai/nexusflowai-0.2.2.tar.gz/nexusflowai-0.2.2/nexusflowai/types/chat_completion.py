from typing import List, Optional, Literal

from openai._models import BaseModel

from nexusflowai.types.completion_usage import NexusflowAICompletionUsage
from nexusflowai.types.chat_completion_message import NexusflowAIChatCompletionMessage


__all__ = ["NexusflowAIChatCompletion"]


class Choice(BaseModel):
    finish_reason: Literal[
        "stop", "length", "tool_calls", "content_filter", "function_call"
    ]
    """The reason the model stopped generating tokens.

    This will be `stop` if the model hit a natural stop point or a provided stop
    sequence, `length` if the maximum number of tokens specified in the request was
    reached, `content_filter` if content was omitted due to a flag from our content
    filters, `tool_calls` if the model called a tool, or `function_call`
    (deprecated) if the model called a function.
    """

    index: int
    """The index of the choice in the list of choices."""

    message: NexusflowAIChatCompletionMessage
    """A chat completion message generated by the model."""


class NexusflowAIChatCompletion(BaseModel):
    id: str
    """A unique identifier for the chat completion."""

    choices: List[Choice]
    """A list of chat completion choices.

    Can be more than one if `n` is greater than 1.
    """

    created: int
    """The Unix timestamp (in seconds) of when the chat completion was created."""

    model: str
    """The model used for the chat completion."""

    object: Literal["chat.completion"]
    """The object type, which is always `chat.completion`."""

    system_fingerprint: Optional[str] = None
    """This fingerprint represents the backend configuration that the model runs with.

    Can be used in conjunction with the `seed` request parameter to understand when
    backend changes have been made that might impact determinism.
    """

    usage: Optional[NexusflowAICompletionUsage] = None
    """Usage statistics for the completion request."""

    hints: Optional[List[str]] = None
    """Hints and suggestions to improve model or system performance."""

    raw_prompt: Optional[str] = None
    """Raw plaintext prompt exactly as it is seen by the model."""
